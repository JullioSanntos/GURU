<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Corning.GenSys.ComponentsNoForm</name>
  </assembly>
  <members>
    <member name="T:YAXLib.YAXExceptionHandlingPolicies">
      <summary>
            Enumerates different kinds of exception handling policies as used by YAX Library.
            </summary>
    </member>
    <member name="F:YAXLib.YAXExceptionHandlingPolicies.ThrowWarningsAndErrors">
      <summary>
            Throws Both Warnings And Errors
            </summary>
    </member>
    <member name="F:YAXLib.YAXExceptionHandlingPolicies.ThrowErrorsOnly">
      <summary>
            Throws Errors only (default)
            </summary>
    </member>
    <member name="F:YAXLib.YAXExceptionHandlingPolicies.DoNotThrow">
      <summary>
            Does not throw exceptions, the errors can be accessed via the YAXParsingErrors instance
            </summary>
    </member>
    <member name="T:YAXLib.YAXExceptionTypes">
      <summary>
            Enumerates different possible behaviours of the library toward exceptions
            </summary>
    </member>
    <member name="F:YAXLib.YAXExceptionTypes.Ignore">
      <summary>
            Ignore non-fatal exceptions; neither throw them, nor log them.
            </summary>
    </member>
    <member name="F:YAXLib.YAXExceptionTypes.Warning">
      <summary>
            Treat exception as a warning
            </summary>
    </member>
    <member name="F:YAXLib.YAXExceptionTypes.Error">
      <summary>
            Treat exception as an error
            </summary>
    </member>
    <member name="T:YAXLib.YAXSerializationOptions">
      <summary>
            Enumerates different serialization options which could be set at construction time.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializationOptions.SerializeNullObjects">
      <summary>
            Serializes null objects also (the default)
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializationOptions.DontSerializeNullObjects">
      <summary>
            Prevents serialization of null objects.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializationOptions.ThrowUponSerializingCyclingReferences">
      <summary>
            TODO: update the comment
            Prevents serialization of child objects that refer to a parent object which is already serialized, and hene causing a cycle or infinite loop
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializationOptions.DontSerializePropertiesWithNoSetter">
      <summary>
            Prevents serailization of properties with no setter 
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializationOptions.SuppressMetadataAttributes">
      <summary>
            Never add YAXLib metadata attributes (e.g., 'yaxlib:realtype') to the serialized XML (even when they would be required for deserialization.)
            Useful when generating XML intended for another system's consumption.
            </summary>
    </member>
    <member name="T:YAXLib.YAXCollectionSerializationTypes">
      <summary>
            Enumerates the possible ways of serializing collection classes
            </summary>
    </member>
    <member name="F:YAXLib.YAXCollectionSerializationTypes.Recursive">
      <summary>
            Serializes each member of the collection, as a separate element, all enclosed in an element regarding the collection itself
            </summary>
    </member>
    <member name="F:YAXLib.YAXCollectionSerializationTypes.RecursiveWithNoContainingElement">
      <summary>
            Serializes each member of the collection, as a separate element, with no enclosing element for the collection
            </summary>
    </member>
    <member name="F:YAXLib.YAXCollectionSerializationTypes.Serially">
      <summary>
            Serializes all members of the collection in one element separated by some delimiter, if possible.
            </summary>
    </member>
    <member name="T:YAXLib.YAXNodeTypes">
      <summary>
            Enumerates possible XML node types upon which a property can be serialized.
            </summary>
    </member>
    <member name="F:YAXLib.YAXNodeTypes.Attribute">
      <summary>
            Serialize data as an attribute for the base element
            </summary>
    </member>
    <member name="F:YAXLib.YAXNodeTypes.Element">
      <summary>
            Serialize data as an element
            </summary>
    </member>
    <member name="F:YAXLib.YAXNodeTypes.Content">
      <summary>
            Serialize data as content of the element
            </summary>
    </member>
    <member name="T:YAXLib.YAXSerializationFields">
      <summary>
            Enumerates possible options for a serializable type
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializationFields.PublicPropertiesOnly">
      <summary>
            Serializes only the public properties (the default behaviour)
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializationFields.AllFields">
      <summary>
            Serializes all fields (properties or member variables) which are public, or non-public.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializationFields.AttributedFieldsOnly">
      <summary>
            Serializes all fields (properties or member variables) which are public, or non-public, if attributed as <c>YAXSerializableField</c></summary>
    </member>
    <member name="T:YAXLib.EnumWrapper">
      <summary>
            Provides a wrapper arount enum types, in order to provide alias definition capabilities for enums
            </summary>
    </member>
    <member name="F:YAXLib.EnumWrapper.m_enumType">
      <summary>
            The enum underlying type
            </summary>
    </member>
    <member name="F:YAXLib.EnumWrapper.m_enumMembers">
      <summary>
            maps real enum names to their corresponding user defined aliases 
            </summary>
    </member>
    <member name="M:YAXLib.EnumWrapper.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.EnumWrapper" /> class.
            </summary>
      <param name="t">The enum type.</param>
    </member>
    <member name="M:YAXLib.EnumWrapper.ParseAlias(System.String)">
      <summary>
            Parses the alias and returns the correct enum value. Throws an exception if the alias cannot be matched.
            </summary>
      <param name="alias">The alias.</param>
      <returns>the enum member corresponding to the specified alias</returns>
    </member>
    <member name="M:YAXLib.EnumWrapper.GetAlias(System.Object)">
      <summary>
            Gets the alias for the specified enum value.
            </summary>
      <param name="enumMember">The enum member.</param>
      <returns>the alias corresponding to the specified enum member</returns>
    </member>
    <member name="M:YAXLib.EnumWrapper.FindRealNameFromAlias(System.String)">
      <summary>
            Finds the real name from alias.
            </summary>
      <param name="alias">The alias.</param>
      <returns>the real name of the enum member</returns>
    </member>
    <member name="T:YAXLib.ICustomSerializer`1">
      <summary>
            Defines the interface to all custom serializers and deserializers used with YAXLib.
            Note that normally you don't need to implement all the methods.
            </summary>
      <typeparam name="T">The type of field, property, class, or struct for which custom serializer
            is provided</typeparam>
    </member>
    <member name="M:YAXLib.ICustomSerializer`1.SerializeToAttribute(`0,System.Xml.Linq.XAttribute)">
      <summary>
            Serializes the given object and fills the provided reference to the
            XML attribute appropriately. Do NOT change the name of the provided attribute.
            </summary>
      <param name="objectToSerialize">The object to serialize.</param>
      <param name="attrToFill">The XML attribute to fill.</param>
    </member>
    <member name="M:YAXLib.ICustomSerializer`1.SerializeToElement(`0,System.Xml.Linq.XElement)">
      <summary>
            Serializes the given object and fills the provided reference to the
            XML element appropriately. Do NOT change the name of the provided element.
            </summary>
      <param name="objectToSerialize">The object to serialize.</param>
      <param name="elemToFill">The XML element to fill.</param>
    </member>
    <member name="M:YAXLib.ICustomSerializer`1.SerializeToValue(`0)">
      <summary>
            Serializes the given object to an string to be used as a value for an
            XML element.
            </summary>
      <param name="objectToSerialize">The object to serialize.</param>
      <returns>
      </returns>
    </member>
    <member name="M:YAXLib.ICustomSerializer`1.DeserializeFromAttribute(System.Xml.Linq.XAttribute)">
      <summary>
            Deserializes from an xml attribute, and returns the retreived value.
            You will normally need to use XAttribute.Value property only.
            </summary>
      <param name="attrib">The attribute to deserialize.</param>
      <returns>
      </returns>
    </member>
    <member name="M:YAXLib.ICustomSerializer`1.DeserializeFromElement(System.Xml.Linq.XElement)">
      <summary>
            Deserializes from an xml element, and returns the retreived value.
            You might need to use XElement.Value, XElement.Nodes(), 
            XElement.Attributes(), and XElement.Elements() only.
            </summary>
      <param name="element">The element to deserialize.</param>
      <returns>
      </returns>
    </member>
    <member name="M:YAXLib.ICustomSerializer`1.DeserializeFromValue(System.String)">
      <summary>
            Deserializes from a string value which has been serialized as the content of an element
            </summary>
      <param name="value">The string value to deserialize.</param>
      <returns>
      </returns>
    </member>
    <member name="T:YAXLib.KnownTypes">
      <summary>
            Provides serialization and deserialization methods for some known .NET built-in types.
            </summary>
    </member>
    <member name="M:YAXLib.IKnownType.Serialize(System.Object,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace)">
      <summary>
            Serializes the specified object int the specified XML element.
            </summary>
      <param name="obj">The object to serialize.</param>
      <param name="elem">The XML element.</param>
      <param name="overridingNamespace">The namespace the element belongs to.</param>
    </member>
    <member name="M:YAXLib.IKnownType.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace)">
      <summary>
            Deserializes the specified XML element to the known type.
            </summary>
      <param name="elem">The XML element to deserialize object from.</param>
      <param name="overridingNamespace">The namespace the element belongs to.</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="P:YAXLib.IKnownType.Type">
      <summary>
            Gets the underlying known type.
            </summary>
    </member>
    <member name="T:YAXLib.KnownType`1">
      <summary>
            Interface for predefined serializers and deserializers for some known dot-net types.
            </summary>
      <typeparam name="T">The underlying known type</typeparam>
    </member>
    <member name="M:YAXLib.KnownType`1.Serialize(`0,System.Xml.Linq.XElement,System.Xml.Linq.XNamespace)">
      <summary>
            Serializes the specified object int the specified XML element.
            </summary>
      <param name="obj">The object to serialize.</param>
      <param name="elem">The XML element.</param>
      <param name="overridingNamespace">The namespace the element belongs to.</param>
    </member>
    <member name="M:YAXLib.KnownType`1.Deserialize(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace)">
      <summary>
            Deserializes the specified XML element to the known type.
            </summary>
      <param name="elem">The XML element to deserialize object from.</param>
      <param name="overridingNamespace">The namespace the element belongs to.</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="P:YAXLib.KnownType`1.Type">
      <summary>
            Gets the underlying known type.
            </summary>
    </member>
    <member name="T:YAXLib.MemberWrapper">
      <summary>
            A wrapper class for members which only can be properties or member variables
            </summary>
    </member>
    <member name="F:YAXLib.MemberWrapper.m_memberInfo">
      <summary>
            reference to the underlying <c>MemberInfo</c> from which this instance is built
            </summary>
    </member>
    <member name="F:YAXLib.MemberWrapper.m_memberType">
      <summary>
            the member type of the underlying member
            </summary>
    </member>
    <member name="F:YAXLib.MemberWrapper.m_memberTypeWrapper">
      <summary>
            a type wrapper around the underlying member type
            </summary>
    </member>
    <member name="F:YAXLib.MemberWrapper.m_propertyInfoInstance">
      <summary>
            the <c>PropertyInfo</c> instance, if this member corrsponds to a property, <c>null</c> otherwise
            </summary>
    </member>
    <member name="F:YAXLib.MemberWrapper.m_fieldInfoInstance">
      <summary>
            the <c>FieldInfo</c> instance, if this member corrsponds to a field, <c>null</c> otherwise
            </summary>
    </member>
    <member name="F:YAXLib.MemberWrapper.m_collectionAttributeInstance">
      <summary>
            The collection attribute instance
            </summary>
    </member>
    <member name="F:YAXLib.MemberWrapper.m_dictionaryAttributeInstance">
      <summary>
            the dictionary attribute instance
            </summary>
    </member>
    <member name="F:YAXLib.MemberWrapper.m_isProperty">
      <summary>
        <c>true</c> if this instance corresponds to a property, <c>false</c> 
            if it corrsponds to a field (i.e., a member variable)
            </summary>
    </member>
    <member name="F:YAXLib.MemberWrapper.m_serializationLocation">
      <summary>
            The location of the serialization
            </summary>
    </member>
    <member name="F:YAXLib.MemberWrapper.m_alias">
      <summary>
            The alias specified by the user
            </summary>
    </member>
    <member name="F:YAXLib.MemberWrapper.m_namespace">
      <summary>
            The xml-namespace this member is going to be serialized under.
            </summary>
    </member>
    <member name="F:YAXLib.MemberWrapper.m_isSerializedAsAttribute">
      <summary>
            specifies whether this member is going to be serialized as an attribute
            </summary>
    </member>
    <member name="F:YAXLib.MemberWrapper.m_isSerializedAsValue">
      <summary>
            specifies whether this member is going to be serialized as a value for another element
            </summary>
    </member>
    <member name="M:YAXLib.MemberWrapper.#ctor(System.Reflection.MemberInfo,YAXLib.YAXSerializer)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.MemberWrapper" /> class.
            </summary>
      <param name="memberInfo">The member-info to build this instance from.</param>
      <param name="callerSerializer">The caller serializer.</param>
    </member>
    <member name="M:YAXLib.MemberWrapper.GetOriginalValue(System.Object,System.Object[])">
      <summary>
            Gets the original value of this member in the specified object
            </summary>
      <param name="obj">The object whose value corresponding to this instance, must be retreived.</param>
      <param name="index">The array of indeces (usually <c>null</c>).</param>
      <returns>the original value of this member in the specified object</returns>
    </member>
    <member name="M:YAXLib.MemberWrapper.GetValue(System.Object)">
      <summary>
            Gets the processed value of this member in the specified object
            </summary>
      <param name="obj">The object whose value corresponding to this instance, must be retreived.</param>
      <returns>the processed value of this member in the specified object</returns>
    </member>
    <member name="M:YAXLib.MemberWrapper.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value of this member in the specified object
            </summary>
      <param name="obj">The object whose member corresponding to this instance, must be given value.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:YAXLib.MemberWrapper.IsAllowedToBeSerialized(YAXLib.YAXSerializationFields,System.Boolean)">
      <summary>
            Determines whether this instance of <c>MemberWrapper</c> can be serialized.
            </summary>
      <param name="serializationFields">The serialization fields.</param>
      <param name="dontSerializePropertiesWithNoSetter">Skip serialization of fields which doesn't have a setter.</param>
      <returns>
        <c>true</c> if this instance of <c>MemberWrapper</c> can be serialized; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:YAXLib.MemberWrapper.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:YAXLib.MemberWrapper.InitInstance">
      <summary>
            Initializes this instance of <c>MemberWrapper</c>.
            </summary>
    </member>
    <member name="M:YAXLib.MemberWrapper.InitDefaultValue">
      <summary>
            Initializes the default value for this instance of <c>MemberWrapper</c>.
            </summary>
    </member>
    <member name="M:YAXLib.MemberWrapper.ProcessYaxAttribute(System.Object)">
      <summary>
            Processes the specified attribute which is an instance of <c>YAXAttribute</c>.
            </summary>
      <param name="attr">The attribute to process.</param>
    </member>
    <member name="P:YAXLib.MemberWrapper.Alias">
      <summary>
            Gets the alias specified for this member.
            </summary>
      <value>The alias specified for this member.</value>
    </member>
    <member name="P:YAXLib.MemberWrapper.CanRead">
      <summary>
            Gets a value indicating whether the member corrsponding to this instance can be read from.
            </summary>
      <value>
        <c>true</c> if the member corrsponding to this instance can be read from; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:YAXLib.MemberWrapper.CanWrite">
      <summary>
            Gets a value indicating whether the member corrsponding to this instance can be written to.
            </summary>
      <value>
        <c>true</c> if the member corrsponding to this instance can be written to; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:YAXLib.MemberWrapper.Comment">
      <summary>
            Gets an array of comment lines.
            </summary>
      <value>The comment lines.</value>
    </member>
    <member name="P:YAXLib.MemberWrapper.DefaultValue">
      <summary>
            Gets the default value for this instance.
            </summary>
      <value>The default value for this instance.</value>
    </member>
    <member name="P:YAXLib.MemberWrapper.Format">
      <summary>
            Gets the format specified for this value; <c>null</c> if no format is specified.
            </summary>
      <value>the format specified for this value; <c>null</c> if no format is specified.</value>
    </member>
    <member name="P:YAXLib.MemberWrapper.HasComment">
      <summary>
            Gets a value indicating whether this instance has comments.
            </summary>
      <value>
        <c>true</c> if this instance has comments; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.MemberWrapper.HasFormat">
      <summary>
            Gets a value indicating whether this instance has format values specified
            </summary>
      <value>
        <c>true</c> if this instance has format values specified; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.MemberWrapper.IsAttributedAsDontSerialize">
      <summary>
            Gets a value indicating whether this instance is attributed as dont serialize.
            </summary>
      <value>
        <c>true</c> if this instance is attributed as dont serialize; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.MemberWrapper.IsAttributedAsNotCollection">
      <summary>
            Gets a value indicating whether this instance is attributed as not-collection.
            </summary>
      <value>
        <c>true</c> if this instance is attributed as not-collection; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.MemberWrapper.IsAttributedAsSerializable">
      <summary>
            Gets a value indicating whether this instance is attributed as serializable.
            </summary>
      <value>
        <c>true</c> if this instance is attributed as serializable; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.MemberWrapper.IsAttributedAsDontSerializeIfNull">
      <summary>
            Gets a value indicating whether this instance is attributed as dont serialize when null.
            </summary>
      <value>
        <c>true</c> if this instance is attributed as dont serialize when null; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.MemberWrapper.IsSerializedAsAttribute">
      <summary>
            Gets a value indicating whether this instance is serialized as an XML attribute.
            </summary>
      <value>
        <c>true</c> if this instance is serialized as an XML attribute; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.MemberWrapper.IsSerializedAsValue">
      <summary>
            Gets a value indicating whether this instance is serialized as a value for an element.
            </summary>
      <value>
        <c>true</c> if this instance is serialized as a value for an element; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.MemberWrapper.IsSerializedAsElement">
      <summary>
            Gets a value indicating whether this instance is serialized as an XML element.
            </summary>
      <value>
        <c>true</c> if this instance is serialized as an XML element; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.MemberWrapper.MemberType">
      <summary>
            Gets the type of the member.
            </summary>
      <value>The type of the member.</value>
    </member>
    <member name="P:YAXLib.MemberWrapper.MemberTypeWrapper">
      <summary>
            Gets the type wrapper instance corrsponding to the member-type of this instance.
            </summary>
      <value>The type wrapper instance corrsponding to the member-type of this instance.</value>
    </member>
    <member name="P:YAXLib.MemberWrapper.IsKnownType">
      <summary>
            Gets a value indicating whether the underlying type is a known-type
            </summary>
    </member>
    <member name="P:YAXLib.MemberWrapper.OriginalName">
      <summary>
            Gets the original of this member (as opposed to its alias).
            </summary>
      <value>The original of this member .</value>
    </member>
    <member name="P:YAXLib.MemberWrapper.SerializationLocation">
      <summary>
            Gets the serialization location.
            </summary>
      <value>The serialization location.</value>
    </member>
    <member name="P:YAXLib.MemberWrapper.TreatErrorsAs">
      <summary>
            Gets the exception type for this instance in case of encountering missing values
            </summary>
      <value>The exception type for this instance in case of encountering missing values</value>
    </member>
    <member name="P:YAXLib.MemberWrapper.CollectionAttributeInstance">
      <summary>
            Gets the collection attribute instance.
            </summary>
      <value>The collection attribute instance.</value>
    </member>
    <member name="P:YAXLib.MemberWrapper.DictionaryAttributeInstance">
      <summary>
            Gets the dictionary attribute instance.
            </summary>
      <value>The dictionary attribute instance.</value>
    </member>
    <member name="P:YAXLib.MemberWrapper.IsTreatedAsCollection">
      <summary>
            Gets a value indicating whether this instance is treated as a collection.
            </summary>
      <value>
        <c>true</c> if this instance is treated as a collection; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.MemberWrapper.IsTreatedAsDictionary">
      <summary>
            Gets a value indicating whether this instance is treated as a dictionary.
            </summary>
      <value>
        <c>true</c> if this instance is treated as a dictionary; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.MemberWrapper.CustomSerializerType">
      <summary>
            Gets or sets the type of the custom serializer.
            </summary>
      <value>The type of the custom serializer.</value>
    </member>
    <member name="P:YAXLib.MemberWrapper.HasCustomSerializer">
      <summary>
            Gets a value indicating whether this instance has custom serializer.
            </summary>
      <value>
        <c>true</c> if this instance has custom serializer; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.MemberWrapper.HasNamespace">
      <summary>
            Gets a value indicating whether this instance has a custom namespace
            defined for it through the <see cref="T:YAXLib.YAXNamespaceAttribute" /> attribute.
            </summary>
    </member>
    <member name="P:YAXLib.MemberWrapper.Namespace">
      <summary>
            Gets the namespace associated with this element.
            </summary>
      <remarks>
            If <see cref="P:YAXLib.MemberWrapper.HasNamespace" /> is <c>false</c> then this should
            be inherited from any parent elements.
            </remarks>
    </member>
    <member name="P:YAXLib.MemberWrapper.NamespacePrefix">
      <summary>
            Gets the namespace prefix associated with this element
            </summary>
      <remarks>
            If <see cref="P:YAXLib.MemberWrapper.HasNamespace" /> is <c>false</c> then this should
            be inherited from any parent elements.
            If this is <c>null</c>, then it should be assumed that the specified
            <see cref="P:YAXLib.MemberWrapper.Namespace" /> (if it is present) is the default namespace.
            
            It should also be noted that if a namespace is not provided for the
            entire document (default namespace) and yet a default namespace is
            provided for one element that an exception should be thrown (since
            setting a default namespace for that element would make it apply to
            the whole document).
            </remarks>
    </member>
    <member name="T:YAXLib.ReflectionBridgeExtensions">
      <summary>
            Provides extensions as a bridge for the differences 
            between .Net Framework "Type" and .Net Core "TypeInfo".
            </summary>
    </member>
    <member name="T:YAXLib.ReflectionUtils">
      <summary>
            A utility class for reflection related stuff
            </summary>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsBasicType(System.Type)">
      <summary>
            Determines whether the specified type is basic type. A basic type is one that can be wholly expressed
            as an XML attribute. All primitive data types and type <c>string</c> and <c>DataTime</c> are basic.
            </summary>
      <param name="t">The type to check.</param>
      <returns>
        <value>
          <c>true</c> if the specified type is a basic type; otherwise, <c>false</c>.</value>
      </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsArray(System.Type,System.Type@)">
      <summary>
            Determines whether the specified type is array.
            </summary>
      <param name="type">The type to check</param>
      <param name="elementType">Type of the containing element.</param>
      <returns>
        <value>
          <c>true</c> if the specified type is array; otherwise, <c>false</c>.</value>
      </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsArray(System.Type)">
      <summary>
            Determines whether the specified type is array.
            </summary>
      <param name="type">The type to check.</param>
      <returns>
        <c>true</c> if the specified type is array; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.GetArrayDimensions(System.Object)">
      <summary>
            Gets the array dimensions.
            </summary>
      <param name="ar">The array to return its dimensions.</param>
      <returns>the specified array's dimensions</returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.GetTypeFriendlyName(System.Type)">
      <summary>
            Gets the friendly name for the type. Recommended for generic types.
            </summary>
      <param name="type">The type to get its friendly name</param>
      <returns>The friendly name for the type</returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.TypeContainsGenericParameters(System.Type)">
      <summary>
            Determines whether the type specified contains generic parameters or not.
            </summary>
      <param name="type">The type to check.</param>
      <returns>
        <value>
          <c>true</c> if the type contains generic parameters; otherwise,<c>false</c>.</value>
      </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsCollectionType(System.Type)">
      <summary>
            Determines whether the specified type is a collection type, i.e., it implements IEnumerable.
            Although System.String is derived from IEnumerable, it is considered as an exception.
            </summary>
      <param name="type">The type to check.</param>
      <returns>
        <value>
          <c>true</c> if the specified type is a collection type; otherwise, <c>false</c>.</value>
      </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsIEnumerable(System.Type)">
      <summary>
            Determines whether the specified type has implemented or is an <c>IEnumerable</c> or <c>IEnumerable&lt;&gt;</c></summary>
      <param name="type">The type to check.</param>
      <returns>
        <value>
          <c>true</c> if the specified type is enumerable; otherwise, <c>false</c>.</value>
      </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsIEnumerable(System.Type,System.Type@)">
      <summary>
            Determines whether the specified type has implemented or is an <c>IEnumerable</c> or <c>IEnumerable&lt;&gt;</c> .
            </summary>
      <param name="type">The type to check.</param>
      <param name="seqType">Type of the sequence items.</param>
      <returns>
        <value>
          <c>true</c> if the specified type is enumerable; otherwise, <c>false</c>.</value>
      </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.GetCollectionItemType(System.Type)">
      <summary>
            Gets the type of the items of a collection type.
            </summary>
      <param name="type">The type of the collection.</param>
      <returns>The type of the items of a collection type.</returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsIList(System.Type)">
      <summary>
            Determines whether the specified type has implemented <c>IList</c>.
            </summary>
      <param name="type">The type to check.</param>
      <returns>
        <value>
          <c>true</c> if the specified type has implemented <c>IList</c>; otherwise, <c>false</c>.</value>
      </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsICollection(System.Type,System.Type@)">
      <summary>
            Determines whether the specified type has implemented the <c>ICollection</c> interface.
            </summary>
      <param name="type">The type to check.</param>
      <param name="itemType">Type of the member items.</param>
      <returns>
        <value>
          <c>true</c> if the specified type has implemented the <c>ICollection</c> interface; otherwise, <c>false</c>.</value>
      </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsIDictionary(System.Type,System.Type@,System.Type@)">
      <summary>
            Determines whether the specified type is a generic dictionary.
            </summary>
      <param name="type">The type to check.</param>
      <param name="keyType">Type of the key.</param>
      <param name="valueType">Type of the value.</param>
      <returns>
        <value>
          <c>true</c> if the specified type has implemented the IDictionary interface; otherwise, <c>false</c>.</value>
      </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsIDictionary(System.Type)">
      <summary>
            Determines whether the specified type is a generic dictionary.
            </summary>
      <param name="type">The type to check.</param>
      <returns>
        <value>
          <c>true</c> if the specified type is dictionary; otherwise, <c>false</c>.</value>
      </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsNonGenericIDictionary(System.Type)">
      <summary>
            Determines whether the specified type is a non generic IDictionary, e.g., a Hashtable.
            </summary>
      <param name="type">The type to check.</param>
      <returns>
        <c>true</c> if the specified type is a non generic IDictionary; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.EqualsOrIsNullableOf(System.Type,System.Type)">
      <summary>
            Determines whether the specified type is equal to this type,
            or is a nullable of this type, or this type is a nullable of 
            the other type.
            </summary>
      <param name="self">
      </param>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsTypeEqualOrInheritedFromType(System.Type,System.Type)">
      <summary>
            Determines whether the specified type is equal or inherited from another specified type.
            </summary>
      <param name="type">The type to check.</param>
      <param name="baseType">Another type that the specified type is checked whether it is equal or
            has been driven from.</param>
      <returns>
        <c>true</c> if the specified type is equal or inherited from another specified type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsNullable(System.Type,System.Type@)">
      <summary>
            Determines whether the specified type is nullable.
            </summary>
      <param name="type">The type to check.</param>
      <param name="valueType">The value type of the corresponding nullable type.</param>
      <returns>
        <c>true</c> if the specified type is nullable; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsNullable(System.Type)">
      <summary>
            Determines whether the specified type is nullable.
            </summary>
      <param name="type">The type to check.</param>
      <returns>
        <c>true</c> if the specified type is nullable; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsIFormattable(System.Type)">
      <summary>
            Determines whether the specified type implements <c>IFormattable</c></summary>
      <param name="type">The type to check.</param>
      <returns>
        <c>true</c> if the specified type implements <c>IFormattable</c>; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsStringConvertibleIFormattable(System.Type)">
      <summary>
            Determines whether the type provides the functionality 
            to format the value of an object into a string representation.
            </summary>
      <param name="type">The type to check.</param>
      <returns>
        <value>
          <c>true</c> if the specified type impliments the <c>IFormattable</c> interface; otherwise, <c>false</c>.</value>
      </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.HasOneReadWriteProperty(System.Type)">
      <summary>
            Checks to see if the specified type has readable and writable properties.
            </summary>
      <param name="type">The type to check for.</param>
      <returns>
        <value>
          <c>true</c> if the specified type has readable and writable properties; otherwise, <c>false</c>.</value>
      </returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.TryFormatObject(System.Object,System.String)">
      <summary>
            Tries to format the specified object using the format string provided.
            If the formatting operation is not applicable, the source object is returned intact.
            Note: The type of the returned object will be 'System.String' if formatting succeeds.
            </summary>
      <param name="src">The source object.</param>
      <param name="format">The format string.</param>
      <returns>
        <code>System.String</code> if the format is successful; otherwise, the original object</returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.ConvertBasicType(System.Object,System.Type)">
      <summary>
            Converts the specified object from a basic type to another type as specified.
            It is meant by basic types, primitive data types, strings, and enums.
            </summary>
      <param name="value">The object to be converted.</param>
      <param name="dstType">the destination type of conversion.</param>
      <returns>the converted object</returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.GetTypeByName(System.String)">
      <summary>
            Searches all loaded assemblies to find a type with a special name.
            </summary>
      <param name="name">The name of the type to find.</param>
      <returns>type found using the specified name</returns>
    </member>
    <member name="M:YAXLib.ReflectionUtils.IsPublicProperty(System.Reflection.PropertyInfo)">
      <summary>
            Determines whether the specified property is public.
            </summary>
      <param name="pi">The property.</param>
      <returns>
        <c>true</c> if the specified property is public; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:YAXLib.StringUtils">
      <summary>
            Provides string utility methods
            </summary>
    </member>
    <member name="M:YAXLib.StringUtils.RefineLocationString(System.String)">
      <summary>
            Refines the location string. Trims it, and replaces invlalid characters with underscore.
            </summary>
      <param name="elemAddr">The element address to refine.</param>
      <returns>the refined location string</returns>
    </member>
    <member name="M:YAXLib.StringUtils.LooksLikeExpandedXName(System.String)">
      <summary>
            Heuristically determines if the supplied name conforms to the "expanded XML name" form supported by the System.Xml.Linq.XName class.
            </summary>
      <param name="name">The name to be examined.</param>
      <returns>
        <c>true</c> if the supplied name appears to be in expanded form, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:YAXLib.StringUtils.RefineSingleElement(System.String)">
      <summary>
            Refines a single element name. Refines the location string. Trims it, and replaces invlalid characters with underscore.
            </summary>
      <param name="elemName">Name of the element.</param>
      <returns>the refined element name</returns>
    </member>
    <member name="M:YAXLib.StringUtils.ExttractPathAndAliasFromLocationString(System.String,System.String@,System.String@)">
      <summary>
            Extracts the path and alias from location string.
            A pure path location string: level1/level2
            A location string augmented with alias: level1/level2#somename
            Here path is "level1/level2" and alias is "somename".
            </summary>
      <param name="locationString">The location string.</param>
      <param name="path">The path to be extracted.</param>
      <param name="alias">The alias to be extracted.</param>
    </member>
    <member name="M:YAXLib.StringUtils.CombineLocationAndElementName(System.String,System.Xml.Linq.XName)">
      <summary>
            Combines a location string and an element name to form a bigger location string.
            </summary>
      <param name="location">The location string.</param>
      <param name="elemName">Name of the element.</param>
      <returns>a bigger location string formed by combining a location string and an element name.</returns>
    </member>
    <member name="M:YAXLib.StringUtils.DivideLocationOneStep(System.String,System.String@,System.String@)">
      <summary>
            Divides the location string one step, to form a shorter location string.
            </summary>
      <param name="location">The location string to divide.</param>
      <param name="newLocation">The new location string which is one level shorter.</param>
      <param name="newElem">The element name removed from the end of location string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:YAXLib.StringUtils.IsLocationAllGeneric(System.String)">
      <summary>
            Determines whether the specified location is composed of levels 
            which are themselves either "." or "..".
            </summary>
      <param name="location">The location string to check.</param>
      <returns>
        <c>true</c> if the specified location string is all composed of "." or ".." levels; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:YAXLib.StringUtils.IsSingleLocationGeneric(System.String)">
      <summary>
            Determines whether the specified location string is either "." or "..".
            </summary>
      <param name="location">The location string to check.</param>
      <returns>
        <c>true</c> if the specified location string is either "." or ".."; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:YAXLib.StringUtils.GetArrayDimsString(System.Int32[])">
      <summary>
            Gets the string corresponidng to the given array dimensions.
            </summary>
      <param name="dims">The array dimensions.</param>
      <returns>the string corresponidng to the given array dimensions</returns>
    </member>
    <member name="M:YAXLib.StringUtils.ParseArrayDimsString(System.String)">
      <summary>
            Parses the array dimensions string, and returns the corresponding dimensions array.
            </summary>
      <param name="str">The string to parse.</param>
      <returns>the dimensions array corresponiding to the given string</returns>
    </member>
    <member name="M:YAXLib.StringUtils.SplitPathNamespaceSafe(System.String)">
      <summary>
            Splits a string at each instance of a '/' except where such slashes
            are within {}.
            </summary>
      <param name="value">The string to split</param>
      <returns>An enumerable set of strings which were seperated by '/'</returns>
    </member>
    <member name="T:YAXLib.TypeWrappersPool">
      <summary>
            Implements a singleton pool of type-wrappers to prevent excessive creation of 
            repetetive type wrappers
            </summary>
    </member>
    <member name="F:YAXLib.TypeWrappersPool.s_instance">
      <summary>
            The instance to the pool, to implement the singleton
            </summary>
    </member>
    <member name="F:YAXLib.TypeWrappersPool.m_dicTypes">
      <summary>
            A dictionary from types to their corresponding wrappers
            </summary>
    </member>
    <member name="F:YAXLib.TypeWrappersPool.m_lockDic">
      <summary>
            An object to lock type-wrapper dictionary to make it thread-safe
            </summary>
    </member>
    <member name="M:YAXLib.TypeWrappersPool.#ctor">
      <summary>
            Prevents a default instance of the <c>TypeWrappersPool</c> class from being created, from
            outside the scope of this class.
            </summary>
    </member>
    <member name="M:YAXLib.TypeWrappersPool.CleanUp">
      <summary>
            Cleans up the pool.
            </summary>
    </member>
    <member name="M:YAXLib.TypeWrappersPool.GetTypeWrapper(System.Type,YAXLib.YAXSerializer)">
      <summary>
            Gets the type wrapper corresponding to the specified type.
            </summary>
      <param name="t">The type whose wrapper is needed.</param>
      <param name="caller">reference to the serializer instance which called this method.</param>
      <returns>the type wrapper corresponding to the specified type</returns>
    </member>
    <member name="P:YAXLib.TypeWrappersPool.Pool">
      <summary>
            Gets the type wrappers pool.
            </summary>
      <value>The type wrappers pool.</value>
    </member>
    <member name="T:YAXLib.UdtWrapper">
      <summary>
            a wrapper class around user-defined types, for quick acess to their YAXLib related attributes
            </summary>
    </member>
    <member name="F:YAXLib.UdtWrapper.m_udtType">
      <summary>
            the underlying type for this instance of <c>TypeWrapper</c></summary>
    </member>
    <member name="F:YAXLib.UdtWrapper.m_isTypeCollection">
      <summary>
            boolean value indicating whether this instance is a wrapper around a collection type
            </summary>
    </member>
    <member name="F:YAXLib.UdtWrapper.m_isTypeDictionary">
      <summary>
            boolean value indicating whether this instance is a wrapper around a dictionary type
            </summary>
    </member>
    <member name="F:YAXLib.UdtWrapper.m_collectionAttributeInstance">
      <summary>
            The collection attribute instance
            </summary>
    </member>
    <member name="F:YAXLib.UdtWrapper.m_dictionaryAttributeInstance">
      <summary>
            the dictionary attribute instance
            </summary>
    </member>
    <member name="F:YAXLib.UdtWrapper.m_enumWrapper">
      <summary>
            reference to an instance of <c>EnumWrapper</c> in case that the current instance is an enum.
            </summary>
    </member>
    <member name="F:YAXLib.UdtWrapper.m_isSerializationOptionSetByAttribute">
      <summary>
            value indicating whether the serialization options has been explicitly adjusted
            using attributes for the class
            </summary>
    </member>
    <member name="F:YAXLib.UdtWrapper.m_alias">
      <summary>
            Alias for the type
            </summary>
    </member>
    <member name="F:YAXLib.UdtWrapper.m_namespace">
      <summary>
            the namespace associated with this element
            </summary>
    </member>
    <member name="M:YAXLib.UdtWrapper.#ctor(System.Type,YAXLib.YAXSerializer)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.UdtWrapper" /> class.
            </summary>
      <param name="udtType">The underlying type to create the wrapper around.</param>
      <param name="callerSerializer">reference to the serializer 
            instance which is building this instance.</param>
    </member>
    <member name="M:YAXLib.UdtWrapper.SetYAXSerializerOptions(YAXLib.YAXSerializer)">
      <summary>
            Sets the serializer options.
            </summary>
      <param name="caller">The caller serializer.</param>
    </member>
    <member name="M:YAXLib.UdtWrapper.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:YAXLib.UdtWrapper.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:YAXLib.UdtWrapper.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:YAXLib.UdtWrapper.ProcessYAXAttribute(System.Object)">
      <summary>
            Processes the specified attribute.
            </summary>
      <param name="attr">The attribute to process.</param>
    </member>
    <member name="P:YAXLib.UdtWrapper.Alias">
      <summary>
            Gets the alias of the type.
            </summary>
      <value>The alias of the type.</value>
    </member>
    <member name="P:YAXLib.UdtWrapper.Comment">
      <summary>
            Gets an array of comments for the underlying type.
            </summary>
      <value>The array of comments for the underlying type.</value>
    </member>
    <member name="P:YAXLib.UdtWrapper.FieldsToSerialize">
      <summary>
            Gets the fields to be serialized.
            </summary>
      <value>The fields to be serialized.</value>
    </member>
    <member name="P:YAXLib.UdtWrapper.SerializationOption">
      <summary>
            Gets the serialization options.
            </summary>
      <value>The serialization options.</value>
    </member>
    <member name="P:YAXLib.UdtWrapper.IsAttributedAsNotCollection">
      <summary>
            Gets a value indicating whether this instance is attributed as not collection.
            </summary>
      <value>
        <c>true</c> if this instance is attributed as not collection; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.UdtWrapper.HasComment">
      <summary>
            Gets a value indicating whether this instance has comment.
            </summary>
      <value>
        <c>true</c> if this instance has comment; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.UdtWrapper.UnderlyingType">
      <summary>
            Gets the underlying type corresponding to this wrapper.
            </summary>
      <value>The underlying type corresponding to this wrapper.</value>
    </member>
    <member name="P:YAXLib.UdtWrapper.IsKnownType">
      <summary>
            Gets a value indicating whether the underlying type is a known-type
            </summary>
    </member>
    <member name="P:YAXLib.UdtWrapper.IsEnum">
      <summary>
            Gets a value indicating whether this instance wraps around an enum.
            </summary>
      <value>
        <c>true</c> if this instance wraps around an enum; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:YAXLib.UdtWrapper.EnumWrapper">
      <summary>
            Gets the enum wrapper, provided that this instance wraps around an enum.
            </summary>
      <value>The enum wrapper, provided that this instance wraps around an enum.</value>
    </member>
    <member name="P:YAXLib.UdtWrapper.IsNotAllowdNullObjectSerialization">
      <summary>
            Determines whether serialization of null objects is not allowd.
            </summary>
      <returns>
        <c>true</c> if serialization of null objects is not allowd; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:YAXLib.UdtWrapper.ThrowUponSerializingCyclingReferences">
      <summary>
            Determines whether cycling referrences must be ignored, or an exception needs to be thrown
            </summary>
    </member>
    <member name="P:YAXLib.UdtWrapper.DontSerializePropertiesWithNoSetter">
      <summary>
            Determines whether properties with no setters should be serialized
            </summary>
    </member>
    <member name="P:YAXLib.UdtWrapper.SuppressMetadataAttributes">
      <summary>
            Never add YAXLib metadata attributes (e.g., 'yaxlib:realtype') to the serialized XML (even when they would be required for deserialization.)
            Useful when generating XML intended for another system's consumption.
            </summary>
    </member>
    <member name="P:YAXLib.UdtWrapper.IsCollectionType">
      <summary>
            Gets a value indicating whether this instance wraps around a collection type.
            </summary>
      <value>
        <c>true</c> if this instance wraps around a collection type; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.UdtWrapper.IsDictionaryType">
      <summary>
            Gets a value indicating whether this instance wraps around a dictionary type.
            </summary>
      <value>
        <c>true</c> if this instance wraps around a dictionary type; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.UdtWrapper.IsTreatedAsCollection">
      <summary>
            Gets a value indicating whether this instance is treated as collection.
            </summary>
      <value>
        <c>true</c> if this instance is treated as collection; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.UdtWrapper.IsTreatedAsDictionary">
      <summary>
            Gets a value indicating whether this instance is treated as dictionary.
            </summary>
      <value>
        <c>true</c> if this instance is treated as dictionary; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.UdtWrapper.CollectionAttributeInstance">
      <summary>
            Gets the collection attribute instance.
            </summary>
      <value>The collection attribute instance.</value>
    </member>
    <member name="P:YAXLib.UdtWrapper.DictionaryAttributeInstance">
      <summary>
            Gets the dictionary attribute instance.
            </summary>
      <value>The dictionary attribute instance.</value>
    </member>
    <member name="P:YAXLib.UdtWrapper.CustomSerializerType">
      <summary>
            Gets or sets the type of the custom serializer.
            </summary>
      <value>The type of the custom serializer.</value>
    </member>
    <member name="P:YAXLib.UdtWrapper.HasCustomSerializer">
      <summary>
            Gets a value indicating whether this instance has custom serializer.
            </summary>
      <value>
        <c>true</c> if this instance has custom serializer; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.UdtWrapper.HasNamespace">
      <summary>
            Gets a value indicating whether this instance has a custom namespace
            defined for it through the <see cref="T:YAXLib.YAXNamespaceAttribute" /> attribute.
            </summary>
    </member>
    <member name="P:YAXLib.UdtWrapper.Namespace">
      <summary>
            Gets the namespace associated with this element.
            </summary>
      <remarks>
            If <see cref="P:YAXLib.UdtWrapper.HasNamespace" /> is <c>false</c> then this should
            be inherited from any parent elements.
            </remarks>
    </member>
    <member name="P:YAXLib.UdtWrapper.NamespacePrefix">
      <summary>
            Gets the namespace prefix associated with this element
            </summary>
      <remarks>
            If <see cref="P:YAXLib.UdtWrapper.HasNamespace" /> is <c>false</c> then this should
            be inherited from any parent elements.
            If this is <c>null</c>, then it should be assumed that the specified
            <see cref="P:YAXLib.UdtWrapper.Namespace" /> (if it is present) is the default namespace.
            
            It should also be noted that if a namespace is not provided for the
            entire document (default namespace) and yet a default namespace is
            provided for one element that an exception should be thrown (since
            setting a default namespace for that element would make it apply to
            the whole document).
            </remarks>
    </member>
    <member name="T:YAXLib.XMLUtils">
      <summary>
            Provides utility methods for manipulating XML.
            There are four methods for each unit. UnitExists, FindUnit, CanCreateUnit, CreateUnit
            Units are: Location, Element, and Attribute
            </summary>
    </member>
    <member name="M:YAXLib.XMLUtils.LocationExists(System.Xml.Linq.XElement,System.String)">
      <summary>
            Determines whether the location specified exists in the given XML element.
            </summary>
      <param name="baseElement">The XML element.</param>
      <param name="location">The location string.</param>
      <returns>a value indicating whether the location specified exists in the given XML element</returns>
    </member>
    <member name="M:YAXLib.XMLUtils.FindLocation(System.Xml.Linq.XElement,System.String)">
      <summary>
            Finds the location specified in the given XML element specified.
            </summary>
      <param name="baseElement">The XML element.</param>
      <param name="location">The location string.</param>
      <returns>the XML element corresponding to the specified location, or <c>null</c> if it is not found</returns>
    </member>
    <member name="M:YAXLib.XMLUtils.CanCreateLocation(System.Xml.Linq.XElement,System.String)">
      <summary>
            Determines whether the specified location can be created in the specified XML element.
            </summary>
      <param name="baseElement">The XML element.</param>
      <param name="location">The location string.</param>
      <returns>
        <c>true</c> if the specified location can be created in the specified XML element; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:YAXLib.XMLUtils.CreateLocation(System.Xml.Linq.XElement,System.String)">
      <summary>
            Creates and returns XML element corresponding to the sepcified location in the given XML element.
            </summary>
      <param name="baseElement">The XML element.</param>
      <param name="location">The location string.</param>
      <returns>XML element corresponding to the sepcified location created in the given XML element</returns>
    </member>
    <member name="M:YAXLib.XMLUtils.AttributeExists(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName)">
      <summary>
            Determines whether the attribute with the given name located in the given location string exists in the given XML element.
            </summary>
      <param name="baseElement">The XML element.</param>
      <param name="location">The location string.</param>
      <param name="attrName">Name of the attribute.</param>
      <returns>
            a value indicating whether the attribute with the given name located in the given location string exists in the given XML element.
            </returns>
    </member>
    <member name="M:YAXLib.XMLUtils.FindAttribute(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName)">
      <summary>
            Finds the attribute with the given name located in the given location string in the given XML element.
            </summary>
      <param name="baseElement">The XML element.</param>
      <param name="location">The location string.</param>
      <param name="attrName">Name of the attribute.</param>
      <returns>a value indicating whether the attribute with the given name located in 
            the given location string in the given XML element has been found.</returns>
    </member>
    <member name="M:YAXLib.XMLUtils.CanCreateAttribute(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName)">
      <summary>
            Determines whether the attribute with the given name can be created in the location 
            specified by the given location string in the given XML element.
            </summary>
      <param name="baseElement">The XML element.</param>
      <param name="location">The location string.</param>
      <param name="attrName">Name of the attribute.</param>
      <returns>
        <c>true</c> if the attribute with the given name can be created in the location 
            specified by the given location string in the given XML element; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:YAXLib.XMLUtils.CreateAttribute(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName,System.Object,System.Xml.Linq.XNamespace)">
      <summary>
            Creates and returns the attribute with the given name in the location 
            specified by the given location string in the given XML element.
            </summary>
      <param name="baseElement">The XML element.</param>
      <param name="location">The location string.</param>
      <param name="attrName">Name of the attribute.</param>
      <param name="attrValue">The value to be assigned to the attribute.</param>
      <param name="documentDefaultNamespace">The default namespace.</param>
      <returns>returns the attribute with the given name in the location 
            specified by the given location string in the given XML element.</returns>
    </member>
    <member name="M:YAXLib.XMLUtils.FindElement(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName)">
      <summary>
            Finds the element with the given name located in the given location string in the given XML element.
            </summary>
      <param name="baseElement">The XML element.</param>
      <param name="location">The location string.</param>
      <param name="elemName">Name of the element.</param>
      <returns>a value indicating whether the element with the given name located in 
            the given location string in the given XML element has been found</returns>
    </member>
    <member name="M:YAXLib.XMLUtils.ElementExists(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName)">
      <summary>
            Determines whether the XML element with the given name located in the 
            given location string in the given XML element exists.
            </summary>
      <param name="baseElement">The XML element.</param>
      <param name="location">The location string.</param>
      <param name="elemName">Name of the element.</param>
      <returns>a value indicating whether the XML element with the given name located in the 
            given location string in the given XML element exists</returns>
    </member>
    <member name="M:YAXLib.XMLUtils.CanCreateElement(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName)">
      <summary>
            Determines whether the XML element with the given name located in the 
            given location string in the given XML element can be created
            </summary>
      <param name="baseElement">The XML element.</param>
      <param name="location">The location string.</param>
      <param name="elemName">Name of the element.</param>
      <returns>
        <c>true</c> if the XML element with the given name located in the given 
            location string in the given XML element can be created; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:YAXLib.XMLUtils.CreateElement(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName)">
      <summary>
            Creates and returns the XML element with the given name located in the 
            given location string in the given XML element.
            </summary>
      <param name="baseElement">The parent XML element.</param>
      <param name="location">The location string.</param>
      <param name="elemName">Name of the element to create.</param>
      <returns>returns the XML element with the given name located in the 
            given location string in the given XML element</returns>
    </member>
    <member name="M:YAXLib.XMLUtils.CreateElement(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XName,System.Object)">
      <summary>
            Creates and returns the XML element with the given name located in the 
            given location string in the given XML element.
            </summary>
      <param name="baseElement">The parent XML element.</param>
      <param name="location">The location string.</param>
      <param name="elemName">Name of the element to create.</param>
      <param name="elemValue">The element value to be assigned to the created element.</param>
      <returns>returns the XML element with the given name located in the 
            given location string in the given XML element.</returns>
    </member>
    <member name="M:YAXLib.XMLUtils.MoveDescendants(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
      <summary>
            Moves all the children of src (including all its elements and attributes) to the 
            destination element, dst.
            </summary>
      <param name="src">The source element.</param>
      <param name="dst">The destination element.</param>
    </member>
    <member name="M:YAXLib.XMLUtils.IsElementCompletelyEmpty(System.Xml.Linq.XElement)">
      <summary>
            Determines whether the specified element has neither any child attributes nor any child elements.
            </summary>
      <param name="elem">The element.</param>
      <returns>
        <c>true</c> if the specified element has neither any child attributes nor any child elements; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:YAXLib.XMLUtils.DecodeXMLString(System.String)">
      <summary>
            Decodes the XML escape sequences into normal string
            </summary>
      <param name="str">The string to decode.</param>
      <returns>
      </returns>
    </member>
    <member name="M:YAXLib.XMLUtils.AddPreserveSpaceAttribute(System.Xml.Linq.XElement)">
      <summary>
            Adds the 'xml:space="preserve"' attribute to the specified element.
            </summary>
      <param name="element">Element to add the 'xml:space="preserve"' attribute to</param>
      <returns>
      </returns>
    </member>
    <member name="T:YAXLib.YAXBaseAttribute">
      <summary>
            The base class for all attributes defined in YAXLib.
            </summary>
    </member>
    <member name="T:YAXLib.YAXCommentAttribute">
      <summary>
            Creates a comment node per each line of the comment string provided.
            This attribute is applicable to classes, structures, fields, and properties.
            </summary>
    </member>
    <member name="M:YAXLib.YAXCommentAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXCommentAttribute" /> class.
            </summary>
      <param name="comment">The comment.</param>
    </member>
    <member name="P:YAXLib.YAXCommentAttribute.Comment">
      <summary>
            Gets or sets the comment.
            </summary>
      <value>The comment.</value>
    </member>
    <member name="T:YAXLib.YAXSerializableTypeAttribute">
      <summary>
            Add this attribute to types, structs or classes which you want to override
            their default serialization behaviour. This attribute is optional.
            This attribute is applicable to classes and structures.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializableTypeAttribute.m_isOptionSet">
      <summary>
            determines whether the serialization options property has been explicitly
            set by the user.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializableTypeAttribute.m_serializationOptions">
      <summary>
            Private variable to hold the serialization options
            </summary>
    </member>
    <member name="M:YAXLib.YAXSerializableTypeAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXSerializableTypeAttribute" /> class.
            </summary>
    </member>
    <member name="M:YAXLib.YAXSerializableTypeAttribute.IsSerializationOptionSet">
      <summary>
            Determines whether the serialization options property has been explicitly
            set by the user.
            </summary>
      <returns>
        <c>true</c> if the serialization options property has been explicitly
            set by the user; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:YAXLib.YAXSerializableTypeAttribute.FieldsToSerialize">
      <summary>
            Gets or sets the fields which YAXLib selects for serialization
            </summary>
      <value>The fields to serialize.</value>
    </member>
    <member name="P:YAXLib.YAXSerializableTypeAttribute.Options">
      <summary>
            Gets or sets the serialization options.
            </summary>
      <value>The options.</value>
    </member>
    <member name="T:YAXLib.YAXNamespaceAttribute">
      <summary>
            Makes an element make use of a specific XML namespace.
            This attribute is applicable to classes, structs, fields, enums and properties
            </summary>
    </member>
    <member name="M:YAXLib.YAXNamespaceAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXNamespaceAttribute" /> class.
            </summary>
      <remarks>
            The element this applies to will take on the given XML namespace. In the case
            of this constructor, the default one defined by xmlns="namespace"
            </remarks>
      <param name="defaultNamespace">The default namespace to use for this item</param>
    </member>
    <member name="M:YAXLib.YAXNamespaceAttribute.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXNamespaceAttribute" /> class.
            </summary>
      <remarks>
            The element this applies to will take on the given XML namespace. The namespace
            will be added to the root XML element, with the given prefix in the form: 
                xmlns:prefix="namespace"
            </remarks>
      <param name="namespacePrefix">The prefix to use for this element's namespace</param>
      <param name="xmlNamespace">The xml namespace to use for this item</param>
    </member>
    <member name="P:YAXLib.YAXNamespaceAttribute.Namespace">
      <summary>
            The namespace path
            </summary>
    </member>
    <member name="P:YAXLib.YAXNamespaceAttribute.Prefix">
      <summary>
            The xml prefix used for the namespace
            </summary>
    </member>
    <member name="T:YAXLib.YAXSerializableFieldAttribute">
      <summary>
            Add this attribute to properties or fields which you wish to be serialized, when 
            the enclosing class uses the <c>YAXSerializableType</c> attribute in which <c>FieldsToSerialize</c>
            has been set to <c>AttributedFieldsOnly</c>.
            This attribute is applicable to fields and properties.
            </summary>
    </member>
    <member name="T:YAXLib.YAXAttributeForClassAttribute">
      <summary>
            Makes a property to appear as an attribute for the enclosing class (i.e. the parent element) if possible.
            This attribute is applicable to fields and properties only.
            </summary>
    </member>
    <member name="T:YAXLib.YAXAttributeForAttribute">
      <summary>
            Makes a field or property to appear as an attribute for another element, if possible.
            This attribute is applicable to fields and properties.
            </summary>
    </member>
    <member name="M:YAXLib.YAXAttributeForAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXAttributeForAttribute" /> class.
            </summary>
      <param name="parent">The element of which the property becomes an attribute.</param>
    </member>
    <member name="P:YAXLib.YAXAttributeForAttribute.Parent">
      <summary>
            Gets or sets the element of which the property becomes an attribute.
            </summary>
    </member>
    <member name="T:YAXLib.YAXValueForAttribute">
      <summary>
            Makes a field or property to appear as a value for another element, if possible.
            This attribute is applicable to fields and properties.
            </summary>
    </member>
    <member name="M:YAXLib.YAXValueForAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXAttributeForAttribute" /> class.
            </summary>
      <param name="parent">The element of which the property becomes an attribute.</param>
    </member>
    <member name="P:YAXLib.YAXValueForAttribute.Parent">
      <summary>
            Gets or sets the element for which the property becomes a value.
            </summary>
    </member>
    <member name="T:YAXLib.YAXValueForClassAttribute">
      <summary>
            Makes a field or property to appear as a value for its parent element, if possible.
            This attribute is applicable to fields and properties.
            </summary>
    </member>
    <member name="M:YAXLib.YAXValueForClassAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXValueForClassAttribute" /> class.
            </summary>
    </member>
    <member name="T:YAXLib.YAXElementOrder">
      <summary>
            Specifies the order upon which a field or property is serialized / deserialized.
            </summary>
    </member>
    <member name="M:YAXLib.YAXElementOrder.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXElementOrder" /> class.
            </summary>
      <remarks>
            The element this applies to will be given priority in being serialized or deserialized
            depending on the relative value compared to other child elements.
            </remarks>
      <param name="order">The priority of the element in serializing and deserializing.</param>
    </member>
    <member name="P:YAXLib.YAXElementOrder.Order">
      <summary>
            The order used to prioritize serialization and deserialization.
            </summary>
    </member>
    <member name="T:YAXLib.YAXDontSerializeAttribute">
      <summary>
            Prevents serialization of some field or property.
            This attribute is applicable to fields and properties.
            </summary>
    </member>
    <member name="T:YAXLib.YAXDontSerializeIfNullAttribute">
      <summary>
            Prevents serialization of fields or properties when their value is null.
            This attribute is applicable to fields and properties.
            </summary>
    </member>
    <member name="T:YAXLib.YAXSerializeAsAttribute">
      <summary>
            Defines an alias for the field, property, class, or struct under 
            which it will be serialized. This attribute is applicable to fields, 
            properties, classes, and structs.
            </summary>
    </member>
    <member name="M:YAXLib.YAXSerializeAsAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXSerializeAsAttribute" /> class.
            </summary>
      <param name="serializeAs">the alias for the property under which the property will be serialized.</param>
    </member>
    <member name="P:YAXLib.YAXSerializeAsAttribute.SerializeAs">
      <summary>
            Gets or sets the alias for the property under which the property will be serialized.
            </summary>
    </member>
    <member name="T:YAXLib.YAXElementForAttribute">
      <summary>
            Makes a property or field to appear as a child element 
            for another element. This attribute is applicable to fields and properties.
            </summary>
    </member>
    <member name="M:YAXLib.YAXElementForAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXElementForAttribute" /> class.
            </summary>
      <param name="parent">The element of which the property becomes a child element.</param>
    </member>
    <member name="P:YAXLib.YAXElementForAttribute.Parent">
      <summary>
            Gets or sets the element of which the property becomes a child element.
            </summary>
      <value>The element of which the property becomes a child element.</value>
    </member>
    <member name="T:YAXLib.YAXCollectionAttribute">
      <summary>
            Controls the serialization of collection instances.
            This attribute is applicable to fields and properties, and collection classes.
            </summary>
    </member>
    <member name="M:YAXLib.YAXCollectionAttribute.#ctor(YAXLib.YAXCollectionSerializationTypes)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXCollectionAttribute" /> class.
            </summary>
      <param name="serType">type of the serialization of the collection.</param>
    </member>
    <member name="P:YAXLib.YAXCollectionAttribute.SerializationType">
      <summary>
            Gets or sets the type of the serialization of the collection.
            </summary>
      <value>The type of the serialization of the collection.</value>
    </member>
    <member name="P:YAXLib.YAXCollectionAttribute.SeparateBy">
      <summary>
            Gets or sets the string to separate collection items, if the Serialization type is set to <c>Serially</c>.
            </summary>
      <value>the string to separate collection items, if the Serialization Type is set to <c>Serially</c>.</value>
    </member>
    <member name="P:YAXLib.YAXCollectionAttribute.EachElementName">
      <summary>
            Gets or sets the name of each child element corresponding to the collection members, if the Serialization type is set to <c>Recursive</c>.
            </summary>
      <value>The name of each child element corresponding to the collection members, if the Serialization type is set to <c>Recursive</c>.</value>
    </member>
    <member name="P:YAXLib.YAXCollectionAttribute.IsWhiteSpaceSeparator">
      <summary>
            Gets or sets a value indicating whether white space characters are to be
            treated as sparators or not.
            </summary>
      <value>
        <c>true</c> if white space separator characters are to be
            treated as sparators; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:YAXLib.YAXDictionaryAttribute">
      <summary>
            Controls the serialization of generic Dictionary instances.
            This attribute is applicable to fields and properties, and 
            classes derived from the <c>Dictionary</c> base class.
            </summary>
    </member>
    <member name="M:YAXLib.YAXDictionaryAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXDictionaryAttribute" /> class.
            </summary>
    </member>
    <member name="P:YAXLib.YAXDictionaryAttribute.KeyName">
      <summary>
            Gets or sets the alias for the key part of the dicitonary.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:YAXLib.YAXDictionaryAttribute.ValueName">
      <summary>
            Gets or sets alias for the value part of the dicitonary.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:YAXLib.YAXDictionaryAttribute.EachPairName">
      <summary>
            Gets or sets alias for the element containing the Key-Value pair.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:YAXLib.YAXDictionaryAttribute.SerializeKeyAs">
      <summary>
            Gets or sets the node type according to which the key part of the dictionary is serialized.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:YAXLib.YAXDictionaryAttribute.SerializeValueAs">
      <summary>
            Gets or sets the node type according to which the value part of the dictionary is serialized.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:YAXLib.YAXDictionaryAttribute.KeyFormatString">
      <summary>
            Gets or sets the key format string.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:YAXLib.YAXDictionaryAttribute.ValueFormatString">
      <summary>
            Gets or sets the value format string.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:YAXLib.YAXErrorIfMissedAttribute">
      <summary>
            Specifies the behavior of the deserialization method, if the element/attribute corresponding to this property is missed in the XML input.
            This attribute is applicable to fields and properties.
            </summary>
    </member>
    <member name="M:YAXLib.YAXErrorIfMissedAttribute.#ctor(YAXLib.YAXExceptionTypes)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXErrorIfMissedAttribute" /> class.
            </summary>
      <param name="treatAs">The value indicating this situation is going to be treated as Error or Warning.</param>
    </member>
    <member name="P:YAXLib.YAXErrorIfMissedAttribute.TreatAs">
      <summary>
            Gets or sets the value indicating this situation is going to be treated as Error or Warning.
            </summary>
      <value>The value indicating this situation is going to be treated as Error or Warning.</value>
    </member>
    <member name="P:YAXLib.YAXErrorIfMissedAttribute.DefaultValue">
      <summary>
            Gets or sets the default value for the property if the element/attribute corresponding to this property is missed in the XML input.
            Setting <c>null</c> means do nothing.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="T:YAXLib.YAXFormatAttribute">
      <summary>
            Specifies the format string provided for serializing data. The format string is the parameter 
            passed to the <c>ToString</c> method.
            If this attribute is applied to collection classes, the format, therefore, is applied to 
            the collection members.
            This attribute is applicable to fields and properties.
            </summary>
    </member>
    <member name="M:YAXLib.YAXFormatAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXFormatAttribute" /> class.
            </summary>
      <param name="format">The format string.</param>
    </member>
    <member name="P:YAXLib.YAXFormatAttribute.Format">
      <summary>
            Gets or sets the format string needed to serialize data. The format string is the parameter 
            passed to the <c>ToString</c> method.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:YAXLib.YAXNotCollectionAttribute">
      <summary>
            Specifies that a particular class, or a particular property or variable type, that is 
            driven from <c>IEnumerable</c> should not be treated as a collection class/object.
            This attribute is applicable to fields, properties, classes, and structs.
            </summary>
    </member>
    <member name="T:YAXLib.YAXEnumAttribute">
      <summary>
            Specifies an alias for an enum member.
            This attribute is applicable to enum members.
            </summary>
    </member>
    <member name="M:YAXLib.YAXEnumAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXEnumAttribute" /> class.
            </summary>
      <param name="alias">The alias.</param>
    </member>
    <member name="P:YAXLib.YAXEnumAttribute.Alias">
      <summary>
            Gets the alias for the enum member.
            </summary>
      <value>The alias for the enum member.</value>
    </member>
    <member name="T:YAXLib.YAXCustomSerializerAttribute">
      <summary>
            Specifies a custom serializer class for a field, property, class, or struct. YAXLib will instantiate an object
            from the specified type in this attribute, and calls appropriate methods while serializing.
            This attribute is applicable to fields, properties, classes, and structs.
            </summary>
    </member>
    <member name="M:YAXLib.YAXCustomSerializerAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXCustomSerializerAttribute" /> class.
            </summary>
      <param name="customSerializerType">Type of the custom serializer.</param>
    </member>
    <member name="P:YAXLib.YAXCustomSerializerAttribute.CustomSerializerType">
      <summary>
            Gets or sets the type of the custom serializer.
            </summary>
      <value>The type of the custom serializer.</value>
    </member>
    <member name="T:YAXLib.YAXPreserveWhitespaceAttribute">
      <summary>
            Adds the attribute xml:space="preserve" to the serialized element, so that the deserializer would
            perserve all whitespace characters for the string values.
            Add this attribute to any string field that you want their whitespace be preserved during 
            deserialization, or add it to the containing class to be applied to all its fields and properties.
            </summary>
    </member>
    <member name="T:YAXLib.YAXException">
      <summary>
            The base for all exception classes of YAXLib
            </summary>
    </member>
    <member name="M:YAXLib.YAXException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXException" /> class.
            </summary>
    </member>
    <member name="M:YAXLib.YAXException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="T:YAXLib.YAXBadLocationException">
      <summary>
            Raised when the location of serialization specified cannot be
            created or cannot be read from.
            This exception is raised during serialization and deserialization
            </summary>
    </member>
    <member name="M:YAXLib.YAXBadLocationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXBadLocationException" /> class.
            </summary>
      <param name="location">The location.</param>
    </member>
    <member name="P:YAXLib.YAXBadLocationException.Location">
      <summary>
            Gets or sets the bad location which caused the exception
            </summary>
      <value>The location.</value>
    </member>
    <member name="P:YAXLib.YAXBadLocationException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>
      </value>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="T:YAXLib.YAXAttributeAlreadyExistsException">
      <summary>
            Raised when trying to serialize an attribute where 
            another attribute with the same name already exists.
            This exception is raised during serialization.
            </summary>
    </member>
    <member name="M:YAXLib.YAXAttributeAlreadyExistsException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXAttributeAlreadyExistsException" /> class.
            </summary>
      <param name="attrName">Name of the attribute.</param>
    </member>
    <member name="P:YAXLib.YAXAttributeAlreadyExistsException.AttrName">
      <summary>
            Gets the name of the attribute.
            </summary>
      <value>The name of the attribute.</value>
    </member>
    <member name="P:YAXLib.YAXAttributeAlreadyExistsException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>
      </value>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="T:YAXLib.YAXAttributeMissingException">
      <summary>
            Raised when the attribute corresponding to some property is not present in the given XML file, when deserializing.
            This exception is raised during deserialization.
            </summary>
    </member>
    <member name="M:YAXLib.YAXAttributeMissingException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXAttributeMissingException" /> class.
            </summary>
      <param name="attrName">Name of the attribute.</param>
    </member>
    <member name="P:YAXLib.YAXAttributeMissingException.AttributeName">
      <summary>
            Gets the name of the attribute.
            </summary>
      <value>The name of the attribute.</value>
    </member>
    <member name="P:YAXLib.YAXAttributeMissingException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>
      </value>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="T:YAXLib.YAXElementValueMissingException">
      <summary>
            Raised when the element value corresponding to some property is not present in the given XML file, when deserializing.
            This exception is raised during deserialization.
            </summary>
    </member>
    <member name="M:YAXLib.YAXElementValueMissingException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXAttributeMissingException" /> class.
            </summary>
      <param name="elementName">Name of the element.</param>
    </member>
    <member name="P:YAXLib.YAXElementValueMissingException.ElementName">
      <summary>
            Gets the name of the attribute.
            </summary>
      <value>The name of the attribute.</value>
    </member>
    <member name="P:YAXLib.YAXElementValueMissingException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>
      </value>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="T:YAXLib.YAXElementValueAlreadyExistsException">
      <summary>
            Raised when the element value corresponding to some property is not present in the given XML file, when deserializing.
            This exception is raised during deserialization.
            </summary>
    </member>
    <member name="M:YAXLib.YAXElementValueAlreadyExistsException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXAttributeMissingException" /> class.
            </summary>
      <param name="elementName">Name of the element.</param>
    </member>
    <member name="P:YAXLib.YAXElementValueAlreadyExistsException.ElementName">
      <summary>
            Gets the name of the attribute.
            </summary>
      <value>The name of the attribute.</value>
    </member>
    <member name="P:YAXLib.YAXElementValueAlreadyExistsException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>
      </value>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="T:YAXLib.YAXElementMissingException">
      <summary>
            Raised when the element corresponding to some property is not present in the given XML file, when deserializing.
            This exception is raised during deserialization.
            </summary>
    </member>
    <member name="M:YAXLib.YAXElementMissingException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXElementMissingException" /> class.
            </summary>
      <param name="elemName">Name of the element.</param>
    </member>
    <member name="P:YAXLib.YAXElementMissingException.ElementName">
      <summary>
            Gets or the name of the element.
            </summary>
      <value>The name of the element.</value>
    </member>
    <member name="P:YAXLib.YAXElementMissingException.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>
      </value>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="T:YAXLib.YAXBadlyFormedInput">
      <summary>
            Raised when the value provided for some property in the XML input, cannot be 
            converted to the type of the property.
            This exception is raised during deserialization.
            </summary>
    </member>
    <member name="M:YAXLib.YAXBadlyFormedInput.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXBadlyFormedInput" /> class.
            </summary>
      <param name="elemName">Name of the element.</param>
      <param name="badInput">The value of the input which could not be converted to the type of the property.</param>
    </member>
    <member name="P:YAXLib.YAXBadlyFormedInput.ElementName">
      <summary>
            Gets the name of the element.
            </summary>
      <value>The name of the element.</value>
    </member>
    <member name="P:YAXLib.YAXBadlyFormedInput.BadInput">
      <summary>
            Gets the value of the input which could not be converted to the type of the property.
            </summary>
      <value>The value of the input which could not be converted to the type of the property.</value>
    </member>
    <member name="P:YAXLib.YAXBadlyFormedInput.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>
      </value>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="T:YAXLib.YAXPropertyCannotBeAssignedTo">
      <summary>
            Raised when the value provided for some property in the XML input, cannot be 
            assigned to the property.
            This exception is raised during deserialization.
            </summary>
    </member>
    <member name="M:YAXLib.YAXPropertyCannotBeAssignedTo.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXPropertyCannotBeAssignedTo" /> class.
            </summary>
      <param name="propName">Name of the property.</param>
    </member>
    <member name="P:YAXLib.YAXPropertyCannotBeAssignedTo.PropertyName">
      <summary>
            Gets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:YAXLib.YAXPropertyCannotBeAssignedTo.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>
      </value>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="T:YAXLib.YAXCannotAddObjectToCollection">
      <summary>
            Raised when some member of the collection in the input XML, cannot be added to the collection object.
            This exception is raised during deserialization.
            </summary>
    </member>
    <member name="M:YAXLib.YAXCannotAddObjectToCollection.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXCannotAddObjectToCollection" /> class.
            </summary>
      <param name="propName">Name of the property.</param>
      <param name="obj">The object that could not be added to the collection.</param>
    </member>
    <member name="P:YAXLib.YAXCannotAddObjectToCollection.PropertyName">
      <summary>
            Gets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:YAXLib.YAXCannotAddObjectToCollection.ObjectToAdd">
      <summary>
            Gets the object that could not be added to the collection.
            </summary>
      <value>the object that could not be added to the collection.</value>
    </member>
    <member name="P:YAXLib.YAXCannotAddObjectToCollection.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>
      </value>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="T:YAXLib.YAXDefaultValueCannotBeAssigned">
      <summary>
            Raised when the default value specified by the <c>YAXErrorIfMissedAttribute</c> could not be assigned to the property.
            This exception is raised during deserialization.
            </summary>
    </member>
    <member name="M:YAXLib.YAXDefaultValueCannotBeAssigned.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXDefaultValueCannotBeAssigned" /> class.
            </summary>
      <param name="propName">Name of the property.</param>
      <param name="defaultValue">The default value which caused the problem.</param>
    </member>
    <member name="P:YAXLib.YAXDefaultValueCannotBeAssigned.PropertyName">
      <summary>
            Gets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:YAXLib.YAXDefaultValueCannotBeAssigned.TheDefaultValue">
      <summary>
            Gets the default value which caused the problem.
            </summary>
      <value>The default value which caused the problem.</value>
    </member>
    <member name="P:YAXLib.YAXDefaultValueCannotBeAssigned.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>
      </value>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="T:YAXLib.YAXBadlyFormedXML">
      <summary>
            Raised when the XML input does not follow standard XML formatting rules.
            This exception is raised during deserialization.
            </summary>
    </member>
    <member name="F:YAXLib.YAXBadlyFormedXML.innerException">
      <summary>
            The inner exception.
            </summary>
    </member>
    <member name="M:YAXLib.YAXBadlyFormedXML.#ctor(System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXBadlyFormedXML" /> class.
            </summary>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:YAXLib.YAXBadlyFormedXML.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXBadlyFormedXML" /> class.
            </summary>
    </member>
    <member name="P:YAXLib.YAXBadlyFormedXML.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <value>
      </value>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="T:YAXLib.YAXInvalidFormatProvided">
      <summary>
            Raised when an object cannot be formatted with the format string provided.
            This exception is raised during serialization.
            </summary>
    </member>
    <member name="M:YAXLib.YAXInvalidFormatProvided.#ctor(System.Type,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXInvalidFormatProvided" /> class.
            </summary>
      <param name="objectType">Type of the fiedl to serialize.</param>
      <param name="format">The format string.</param>
    </member>
    <member name="P:YAXLib.YAXInvalidFormatProvided.ObjectType">
      <summary>
            Gets the type of the field to serialize
            </summary>
      <value>The type of the field to serialize.</value>
    </member>
    <member name="P:YAXLib.YAXInvalidFormatProvided.Format">
      <summary>
            Gets the format string.
            </summary>
      <value>The format string.</value>
    </member>
    <member name="P:YAXLib.YAXInvalidFormatProvided.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="T:YAXLib.YAXCannotSerializeSelfReferentialTypes">
      <summary>
            Raised when trying to serialize self-referential types. This exception cannot be turned off.
            This exception is raised during deserialization.
            </summary>
    </member>
    <member name="M:YAXLib.YAXCannotSerializeSelfReferentialTypes.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXCannotSerializeSelfReferentialTypes" /> class.
            </summary>
      <param name="type">The the self-referential type that caused the problem.</param>
    </member>
    <member name="P:YAXLib.YAXCannotSerializeSelfReferentialTypes.SelfReferentialType">
      <summary>
            Gets the self-referential type that caused the problem.
            </summary>
      <value>The type of the self-referential type that caused the problem.</value>
    </member>
    <member name="P:YAXLib.YAXCannotSerializeSelfReferentialTypes.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="T:YAXLib.YAXObjectTypeMismatch">
      <summary>
            Raised when the object provided for serialization is not of the type provided for the serializer. This exception cannot be turned off.
            This exception is raised during serialization.
            </summary>
    </member>
    <member name="M:YAXLib.YAXObjectTypeMismatch.#ctor(System.Type,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXObjectTypeMismatch" /> class.
            </summary>
      <param name="expectedType">The expected type.</param>
      <param name="receivedType">The type of the object which did not match the expected type.</param>
    </member>
    <member name="P:YAXLib.YAXObjectTypeMismatch.ExpectedType">
      <summary>
            Gets the expected type.
            </summary>
      <value>The expected type.</value>
    </member>
    <member name="P:YAXLib.YAXObjectTypeMismatch.ReceivedType">
      <summary>
            Gets the type of the object which did not match the expected type.
            </summary>
      <value>The type of the object which did not match the expected type.</value>
    </member>
    <member name="P:YAXLib.YAXObjectTypeMismatch.Message">
      <summary>
            Gets a message that describes the current exception.
            </summary>
      <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
    </member>
    <member name="T:YAXLib.YAXParsingErrors">
      <summary>
            Holds list of exception occured during serialization/deserialization.
            </summary>
    </member>
    <member name="F:YAXLib.YAXParsingErrors.listExceptions">
      <summary>
            The list of exception occured during serialization/deserialization.
            </summary>
    </member>
    <member name="M:YAXLib.YAXParsingErrors.AddException(YAXLib.YAXException,YAXLib.YAXExceptionTypes)">
      <summary>
            Adds an exception with the corresponding type.
            </summary>
      <param name="exception">The exception to add.</param>
      <param name="exceptionType">Type of the exception added.</param>
    </member>
    <member name="M:YAXLib.YAXParsingErrors.ClearErrors">
      <summary>
            Clears the list of errors.
            </summary>
    </member>
    <member name="M:YAXLib.YAXParsingErrors.AddRange(YAXLib.YAXParsingErrors)">
      <summary>
            Adds the list of errors within another instance of <c>YAXParsingErrors</c>.
            </summary>
      <param name="parsingErrors">The parsing errors to add its content.</param>
    </member>
    <member name="M:YAXLib.YAXParsingErrors.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:YAXLib.YAXParsingErrors.ContainsAnyError">
      <summary>
            Gets a value indicating whether the list of errors is empty or not.
            </summary>
      <value>
        <c>true</c> if the list is not empty; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:YAXLib.YAXParsingErrors.Count">
      <summary>
            Gets the number of errors within the list of errors.
            </summary>
      <value>the number of errors within the list of errors.</value>
    </member>
    <member name="P:YAXLib.YAXParsingErrors.Item(System.Int32)">
      <summary>
            Gets the the pair of Exception and its corresponding exception-type with the specified n.
            </summary>
      <param name="n">The index of the exception/exception type pair in the error list to return.</param>
      <value>
      </value>
    </member>
    <member name="T:YAXLib.YAXSerializer">
      <summary>
            An XML serialization class which lets developers design the XML file structure and select the exception handling policy.
            This class also supports serializing most of the collection classes such as the Dictionary generic class.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_type">
      <summary>
            The class or structure that is to be serialized/deserialized.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_exceptionPolicy">
      <summary>
            The handling policy enumeration to be used by the YAX library.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_parsingErrors">
      <summary>
            The list of all errors that have occured.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_defaultExceptionType">
      <summary>
            The exception error behaviour enumeration to be used by the YAX library.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_exceptionOccurredDuringMemberDeserialization">
      <summary>
            Specifies whether an exception is occurred during the deserialization of the current member
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_serializationOption">
      <summary>
            The serialization option enumeration which can be set during initialization.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_udtWrapper">
      <summary>
            The type wrapper for the underlying type used in the serializer
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_mainDocument">
      <summary>
            XML document object which will hold the resulting serialization
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_baseElement">
      <summary>
            a reference to the base xml element used during serialization.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_desObject">
      <summary>
            reference to a pre assigned deserialization base object
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_yaxLibNamespaceUri">
      <summary>
            The URI address which holds the xmlns:yaxlib definition.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_documentDefaultNamespace">
      <summary>
            The main document's default namespace. This is stored so that if an attribute has the default namespace,
            it should be serialized without namespace assigned to it. Storing it here does NOT mean that elements
            and attributes without any namespace must adapt this namespace. It is just for comparison and control 
            purposes.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_yaxLibNamespacePrefix">
      <summary>
            The initials used for the xml namespace
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_dimsAttrName">
      <summary>
            the attribute name used to deserialize meta-data for multi-dimensional arrays.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_trueTypeAttrName">
      <summary>
            the attribute name used to deserialize meta-data for real types of objects serialized through
            a reference to their base class or interface.
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_namespaceToPrefix">
      <summary>
            a map of namespaces to their prefixes (if any) to be added utlimately to the xml result
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_serializedStack">
      <summary>
            a collection of already serialized objects, kept for the sake of loop detection and preventing stack overflow exception
            </summary>
    </member>
    <member name="F:YAXLib.YAXSerializer.m_isSerializing">
      <summary>
        <c>true</c> if this instance is busy serializing objects, <c>false</c> otherwise.
            </summary>
    </member>
    <member name="M:YAXLib.YAXSerializer.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXSerializer" /> class.
            </summary>
      <param name="type">The type of the object being serialized/deserialized.</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.#ctor(System.Type,YAXLib.YAXSerializationOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXSerializer" /> class.
            </summary>
      <param name="type">The type of the object being serialized/deserialized.</param>
      <param name="seializationOptions">The serialization option flags.</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.#ctor(System.Type,YAXLib.YAXExceptionHandlingPolicies)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXSerializer" /> class.
            </summary>
      <param name="type">The type of the object being serialized/deserialized.</param>
      <param name="exceptionPolicy">The exception handling policy.</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.#ctor(System.Type,YAXLib.YAXExceptionHandlingPolicies,YAXLib.YAXExceptionTypes)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXSerializer" /> class.
            </summary>
      <param name="type">The type of the object being serialized/deserialized.</param>
      <param name="exceptionPolicy">The exception handling policy.</param>
      <param name="defaultExType">The exceptions are treated as the value specified, unless otherwise specified.</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.#ctor(System.Type,YAXLib.YAXExceptionHandlingPolicies,YAXLib.YAXExceptionTypes,YAXLib.YAXSerializationOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:YAXLib.YAXSerializer" /> class.
            </summary>
      <param name="t">The type of the object being serialized/deserialized.</param>
      <param name="exceptionPolicy">The exception handling policy.</param>
      <param name="defaultExType">The exceptions are treated as the value specified, unless otherwise specified.</param>
      <param name="option">The serialization option.</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.Serialize(System.Object)">
      <summary>
            Serializes the specified object and returns a string containing the XML.
            </summary>
      <param name="obj">The object to serialize.</param>
      <returns>A <code>System.String</code> containing the XML</returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.SerializeToXDocument(System.Object)">
      <summary>
            Serializes the specified object and returns an instance of <c>XDocument</c> containing the result.
            </summary>
      <param name="obj">The object to serialize.</param>
      <returns>An instance of <c>XDocument</c> containing the resulting XML</returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.Serialize(System.Object,System.IO.TextWriter)">
      <summary>
            Serializes the specified object into a <c>TextWriter</c> instance.
            </summary>
      <param name="obj">The object to serialize.</param>
      <param name="textWriter">The <c>TextWriter</c> instance.</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.Serialize(System.Object,System.Xml.XmlWriter)">
      <summary>
            Serializes the specified object into a <c>XmlWriter</c> instance.
            </summary>
      <param name="obj">The object to serialize.</param>
      <param name="xmlWriter">The <c>XmlWriter</c> instance.</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.SerializeToFile(System.Object,System.String)">
      <summary>
            Serializes the specified object to file.
            </summary>
      <param name="obj">The object to serialize.</param>
      <param name="fileName">Path to the file.</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.Deserialize(System.String)">
      <summary>
            Deserializes the specified string containing the XML serialization and returns an object.
            </summary>
      <param name="input">The input string containing the XML serialization.</param>
      <returns>The deserialized object.</returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.Deserialize(System.Xml.XmlReader)">
      <summary>
            Deserializes an object while reading input from an instance of <c>XmlReader</c>.
            </summary>
      <param name="xmlReader">The <c>XmlReader</c> instance to read input from.</param>
      <returns>The deserialized object.</returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.Deserialize(System.IO.TextReader)">
      <summary>
            Deserializes an object while reading input from an instance of <c>TextReader</c>.
            </summary>
      <param name="textReader">The <c>TextReader</c> instance to read input from.</param>
      <returns>The deserialized object.</returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.Deserialize(System.Xml.Linq.XElement)">
      <summary>
            Deserializes an object while reading from an instance of <c>XElement</c></summary>
      <param name="element">The <c>XElement</c> instance to read from.</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.DeserializeFromFile(System.String)">
      <summary>
            Deserializes an object from the specified file which contains the XML serialization of the object.
            </summary>
      <param name="fileName">Path to the file.</param>
      <returns>The deserialized object.</returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.SetDeserializationBaseObject(System.Object)">
      <summary>
            Sets the object used as the base object in the next stage of deserialization.
            This method enables multi-stage deserialization for YAXLib.
            </summary>
      <param name="obj">The object used as the base object in the next stage of deserialization.</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.CleanUpAuxiliaryMemory">
      <summary>
            Cleans up auxiliary memory used by YAXLib during different sessions of serialization.
            </summary>
    </member>
    <member name="M:YAXLib.YAXSerializer.SerializeXDocument(System.Object)">
      <summary>
            Serializes the object into an <c>XDocument</c> object.
            </summary>
      <param name="obj">The object to serialize.</param>
      <returns>
      </returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.SerializeBase(System.Object)">
      <summary>
            One of the base methods that perform the whole job of serialization.
            </summary>
      <param name="obj">The object to be serialized</param>
      <returns>an instance of <c>XElement</c> which contains the result of 
            serialization of the specified object</returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.SetBaseElement(System.Xml.Linq.XElement)">
      <summary>
            Sets the base XML element. This method is used when an <c>XMLSerializer</c>
            instantiates another <c>XMLSerializer</c> to serialize nested objects.
            Through this method the child objects have access to the already serialized elements of 
            their parent.
            </summary>
      <param name="baseElement">The base XML element.</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.SerializeBase(System.Object,System.Xml.Linq.XName)">
      <summary>
            The base method that performs the whole job of serialization. 
            Other serialization methods call this method to have their job done.
            </summary>
      <param name="obj">The object to be serialized</param>
      <param name="className">Name of the element that contains the serialized object.</param>
      <returns>an instance of <c>XElement</c> which contains the result of 
            serialization of the specified object</returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.CreateElementWithNamespace(YAXLib.UdtWrapper,System.Xml.Linq.XName)">
      <summary>
            Adds the namespace applying to the object type specified in <paramref name="wrapper" />
            to the <paramref name="className" /></summary>
      <param name="wrapper">The wrapper around the object who's namespace should be added</param>
      <param name="className">The root node of the document to which the namespace should be written</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.RegisterNamespace(System.Xml.Linq.XNamespace,System.String)">
      <summary>
            Registers the namespace to be added to the root element of the serialized document.
            </summary>
      <param name="ns">The namespace to be added</param>
      <param name="prefix">The prefix for the namespace.</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.MakeElement(System.Xml.Linq.XElement,YAXLib.MemberWrapper,System.Object,System.Boolean@,System.Boolean@)">
      <summary>
            Makes the element corresponding to the member specified.
            </summary>
      <param name="insertionLocation">The insertion location.</param>
      <param name="member">The member to serialize.</param>
      <param name="elementValue">The element value.</param>
      <param name="moveDescOnly">if set to <c>true</c> specifies that only the descendants of the resulting element should be added to the parent.</param>
      <param name="alreadyAdded">if set to <c>true</c> specifies the element returned is 
            already added to the parent element and should not be added once more.</param>
      <returns>
      </returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.MakeDictionaryElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object,YAXLib.YAXDictionaryAttribute,YAXLib.YAXCollectionAttribute,System.Boolean)">
      <summary>
            Creates a dictionary element according to the specified options, as described
            by the attribute instances.
            </summary>
      <param name="insertionLocation">The insertion location.</param>
      <param name="elementName">Name of the element.</param>
      <param name="elementValue">The element value, corresponding to a dictionary object.</param>
      <param name="dicAttrInst">reference to the dictionary attribute instance.</param>
      <param name="collectionAttrInst">reference to collection attribute instance.</param>
      <param name="dontSerializeNull">Don't serialize <c>null</c> values.</param>
      <returns>
            an instance of <c>XElement</c> which contains the dictionary object
            serialized properly
            </returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.AddObjectToElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object)">
      <summary>
            Adds an element contatining data related to the specified object, to an existing xml element.
            </summary>
      <param name="elem">The parent element.</param>
      <param name="alias">The name for the element to be added.</param>
      <param name="obj">The object corresponding to which an element is going to be added to
            an existing parent element.</param>
      <returns>the enclosing XML element.</returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.MakeCollectionElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object,YAXLib.YAXCollectionAttribute,System.String)">
      <summary>
            Serializes a collection object.
            </summary>
      <param name="insertionLocation">The insertion location.</param>
      <param name="elementName">Name of the element.</param>
      <param name="elementValue">The object to be serailized.</param>
      <param name="collectionAttrInst">The collection attribute instance.</param>
      <param name="format">formatting string, which is going to be applied to all members of the collection.</param>
      <returns>
            an instance of <c>XElement</c> which will contain the serailized collection
            </returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.MakeBaseElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object,System.Boolean@)">
      <summary>
            Makes an XML element with the specified name, corresponding to the object specified.
            </summary>
      <param name="insertionLocation">The insertion location.</param>
      <param name="name">The name of the element.</param>
      <param name="value">The object to be serialized in an XML element.</param>
      <param name="alreadyAdded">if set to <c>true</c> specifies the element returned is 
            already added to the parent element and should not be added once more.</param>
      <returns>
            an instance of <c>XElement</c> which will contain the serialized object,
            or <c>null</c> if the serialized object is already added to the base element
            </returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.DeserializeBase(System.Xml.Linq.XElement)">
      <summary>
            The basic method which performs the whole job of deserialization.
            </summary>
      <param name="baseElement">The element to be deserialized.</param>
      <returns>object containing the deserialized data</returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.AtLeastOneOfCollectionMembersExists(System.Xml.Linq.XElement,YAXLib.MemberWrapper)">
      <summary>
            Checks whether at least one of the collection memebers of 
            the specified collection exists.
            </summary>
      <param name="elem">The XML element to check its content.</param>
      <param name="member">The class-member corresponding to the collection for
            which we intend to check existence of its members.</param>
      <returns>
      </returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.AtLeastOneOfMembersExists(System.Xml.Linq.XElement,System.Type)">
      <summary>
            Checks whether at least one of the memebers (property or field) of 
            the specified object exists.
            </summary>
      <param name="elem">The XML element to check its content.</param>
      <param name="type">The class-member corresponding to the object for
            which we intend to check existence of its members.</param>
      <returns>
      </returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.RetreiveElementValue(System.Object,YAXLib.MemberWrapper,System.String,System.Xml.Linq.XElement)">
      <summary>
            Retreives the value of the element from the specified XML element or attribute.
            </summary>
      <param name="o">The object to store the retrieved value at.</param>
      <param name="member">The member of the specified object whose value we intent to retreive.</param>
      <param name="elemValue">The value of the element stored as string.</param>
      <param name="xelemValue">The XML element value to be retreived. If the value to be retreived
            has been stored in an XML attribute, this reference is <c>null</c>.</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.DeserializeCollectionValue(System.Type,System.Xml.Linq.XElement,System.Xml.Linq.XName,YAXLib.YAXCollectionAttribute)">
      <summary>
            Retreives the collection value.
            </summary>
      <param name="colType">Type of the collection to be retrieved.</param>
      <param name="xelemValue">The value of xml element.</param>
      <param name="memberAlias">The member's alias, used only in exception titles.</param>
      <param name="colAttrInstance">The collection attribute instance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.DeserializeCollectionMember(System.Object,YAXLib.MemberWrapper,System.Type,System.String,System.Xml.Linq.XElement)">
      <summary>
            Deserializes the collection member.
            </summary>
      <param name="o">The object to store the retrieved value at.</param>
      <param name="member">The member of the specified object whose value we intent to retreive.</param>
      <param name="colType">Type of the collection to be retrieved.</param>
      <param name="elemValue">The value of the element stored as string.</param>
      <param name="xelemValue">The XML element value to be retreived. If the value to be retreived
            has been stored in an XML attribute, this reference is <c>null</c>.</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.GetArrayDimentionalIndex(System.Int64,System.Int32[])">
      <summary>
            Gets the dimensional index for an element of a multi-dimensional array from a
            linear index specified. 
            </summary>
      <param name="linInd">The linear index.</param>
      <param name="dims">The dimensions of the array.</param>
      <returns>
      </returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.DeserializeTaggedDictionaryMember(System.Object,YAXLib.MemberWrapper,System.Xml.Linq.XElement)">
      <summary>
            Deserializes a dictionary member which also benefits from a YAXDictionary attribute
            </summary>
      <param name="o">The object to hold the deserialized value.</param>
      <param name="member">The member corresponding to the dictionary member.</param>
      <param name="xelemValue">The XML element value.</param>
    </member>
    <member name="M:YAXLib.YAXSerializer.VerifyDictionaryPairElements(System.Type@,System.Boolean@,System.Boolean@,System.Xml.Linq.XName,System.Xml.Linq.XElement)">
      <summary>
            Verifies the existence of dictionary pair <c>Key</c> and <c>Value</c> elements.
            </summary>
      <param name="keyType">Type of the key.</param>
      <param name="isKeyAttrib">if set to <c>true</c> means that key has been serialize as an attribute.</param>
      <param name="isKeyContent">if set to <c>true</c> means that key has been serialize as an XML content.</param>
      <param name="keyAlias">The alias for <c>Key</c>.</param>
      <param name="childElem">The child XML elemenet to search <c>Key</c> and <c>Value</c> elements in.</param>
      <returns>
      </returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.DeserializeKeyValuePair(System.Xml.Linq.XElement)">
      <summary>
            Deserializes the XML reperesentation of a key-value pair, as specified, and returns 
            a <c>KeyValuePair</c> instance containing the deserialized data.
            </summary>
      <param name="baseElement">The element contating the XML reperesentation of a key-value pair.</param>
      <returns>a <c>KeyValuePair</c> instance containing the deserialized data</returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.GetFieldsToBeSerialized(YAXLib.UdtWrapper)">
      <summary>
            Gets the sequence of fields to be serialized for the specified type. This sequence is retreived according to 
            the field-types specified by the user.
            </summary>
      <param name="typeWrapper">The type wrapper for the type whose serializable 
            fields is going to be retreived.</param>
      <returns>the sequence of fields to be serialized for the specified type</returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.GetFieldsToBeSerialized">
      <summary>
            Gets the sequence of fields to be serialized for the serializer's underlying type. 
            This sequence is retreived according to the field-types specified by the user.
            </summary>
      <returns>the sequence of fields to be serialized for the serializer's underlying type.</returns>
    </member>
    <member name="M:YAXLib.YAXSerializer.OnExceptionOccurred(YAXLib.YAXException,YAXLib.YAXExceptionTypes)">
      <summary>
            Called when an exception occurs inside the library. It applies the exception handling policies.
            </summary>
      <param name="ex">The exception that has occurred.</param>
      <param name="exceptionType">Type of the exception.</param>
    </member>
    <member name="P:YAXLib.YAXSerializer.DefaultExceptionType">
      <summary>
            Gets the default type of the exception.
            </summary>
      <value>The default type of the exception.</value>
    </member>
    <member name="P:YAXLib.YAXSerializer.SerializationOption">
      <summary>
            Gets the serialization option.
            </summary>
      <value>The serialization option.</value>
    </member>
    <member name="P:YAXLib.YAXSerializer.ExceptionHandlingPolicy">
      <summary>
            Gets the exception handling policy.
            </summary>
      <value>The exception handling policy.</value>
    </member>
    <member name="P:YAXLib.YAXSerializer.ParsingErrors">
      <summary>
            Gets the parsing errors.
            </summary>
      <value>The parsing errors.</value>
    </member>
    <member name="P:YAXLib.YAXSerializer.IsCraetedToDeserializeANonCollectionMember">
      <summary>
            Gets or sets a value indicating whether this instance is created to deserialize a non collection member of another object.
            </summary>
      <value>
        <c>true</c> if this instance is craeted to deserialize a non collection member of another object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:YAXLib.YAXSerializer.RemoveDeserializedXmlNodes">
      <summary>
            Gets or sets a value indicating whether XML elements or attributes should be removed after being deserialized
            </summary>
    </member>
    <member name="P:YAXLib.YAXSerializer.YaxLibNamespaceUri">
      <summary>
            The URI address which holds the xmlns:yaxlib definition.
            </summary>
    </member>
    <member name="P:YAXLib.YAXSerializer.YaxLibNamespacePrefix">
      <summary>
            The prefix used for the xml namespace
            </summary>
    </member>
    <member name="P:YAXLib.YAXSerializer.DimentionsAttributeName">
      <summary>
            the attribute name used to deserialize meta-data for multi-dimensional arrays.
            </summary>
    </member>
    <member name="P:YAXLib.YAXSerializer.RealTypeAttributeName">
      <summary>
            the attribute name used to deserialize meta-data for real types of objects serialized through
            a reference to their base class or interface.
            </summary>
    </member>
    <member name="P:YAXLib.YAXSerializer.MaxRecursion">
      <summary>
            Specifies the maximum serialization depth (default 300).
            This roughly equals the maximum element depth of the resulting XML.
            0 means unlimited.
            1 means an empty XML tag with no content.
            </summary>
    </member>
    <member name="T:Corning.GenSys.Point.AlarmEventHandler">
      <summary>Delegate used by <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarm">OnAlarm Event</see>, <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarmAcknowledged">OnAlarmAcknowledged Event</see>, <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarmCleared">OnAlarmCleared
            Event</see>, <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarmEnabled">OnAlarmEnabled Event</see>, <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarmDisabled">OnAlarmDisabled Event</see>.</summary>
      <param name="objSender">
      </param>
      <param name="lstoAlarmRules">
      </param>
    </member>
    <member name="T:Corning.GenSys.Point.CAlarmEventArg">
      <summary>The parameter type for the handler of the following events: <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarm">OnAlarm</see>, <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarmCleared">OnAlarmCleared</see>, <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarmAcknowledged">OnAlarmAcknowledged</see>,
            <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarmDisabled">OnAlarmDisabled</see>, <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarmEnabled">OnAlarmEnabled</see></summary>
    </member>
    <member name="P:Corning.GenSys.Point.CAlarmEventArg.AlarmRule">
      <summary>The alarm rule where the event occurred.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CAlarmEventArg.ActiveStateChanged">
      <summary>true if the active state</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CAlarmEventArg.TimeWhenEventOccured">
      <summary>A timestamp when the event occured</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CAlarmEventArg.ListOfPointFaultInAlarm">
      <summary>List of the point belonging to the alarm rule which are in fault state i.e. <see cref="P:Corning.GenSys.Point.IPoint.LastFaultEventArg">LastFaultEventArg Property</see> is not
            <see cref="F:Corning.GenSys.Point.EFaultType.None">None</see>.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointFaultInAlarm">
      <summary>This class is used only by <see cref="P:Corning.GenSys.Point.CAlarmEventArg.ListOfPointFaultInAlarm">ListOfPointFaultInAlarm Property</see>. It represent a point which is in a fault state.
            It provides a reference to the point as well as its fault state.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointFaultInAlarm.PointName">
      <summary>The Point name with the fault.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointFaultInAlarm.Point">
      <summary>The Point with the fault.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointFaultInAlarm.FaultType">
      <summary>The fault the point was in when this object was created.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointFaultInAlarm.IsAlarmCause">
      <summary>True if this point fault is what caused the <see cref="P:Corning.GenSys.Point.CAlarmEventArg.AlarmRule">AlarmRule</see> it is attached to raise the event.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.IAlarmManager">
      <summary>An alarm manager contains a collection of references to objects realizing the <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see>. It also contains a collection of <see cref="!:CAlarmRule">CAlarmRule
            Class</see> realizing the <see cref="T:Corning.GenSys.Point.IAlarmRule">IAlarmRule Interface</see> which are evaluated each time a <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault Event</see> is raised
            on a point participating in a rule.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.AddAlarmRule(System.String,System.String,Corning.GenSys.Point.EAlarmSeverity,System.String)">
      <summary>
            Creates and add a new AlarmRule to this AlarmManager and tries to reference the points contained
            in the rule.
            This method will throw an exception if a rule with the same name already exists or if an AlarmRule
            object cannot be created due to an error in the alarm rule string strAlarmRule. 
            </summary>
      <param name="strRuleName">Unique name for the rule</param>
      <param name="strDescription">
      </param>
      <param name="eAlarmSeverity">
      </param>
      <param name="strAlarmRule">ex: AND( OR([Point1Name, High], [Point2Name, None, Not]), [Point3Name, LowLow])</param>
      <returns>The new created rule</returns>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.DisableAlarmRules(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IAlarmRule})">
      <summary>Disables a collection of alarm rules. If some of the alarms in the collection were enabled, a <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarmDisabled">OnAlarmDisabled Event</see> will be raised with the
            list of newly disabled alarms as argument.</summary>
      <param name="ienumiAlarmRule">Collection of alarm rules to be disabled. A collection realizing IList&lt;IAlarmRule&gt; will be most efficient.</param>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.EnableAlarmRules(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IAlarmRule})">
      <summary>Enables a collection of alarm rules. Note that if one of the alarm rules specified cannot be evaluated the alarm rule will remain in the Disabled state. In
            that case the function will return false for that alarm. If some of the alarms in the collection were disabled, a <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarmEnabled">OnAlarmEnabled Event</see>
            will be raised with the list of newly enabled alarms as argument. Also, all newly enabled alarm rules will be evaluated which could lead to the raising
            of <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarm">OnAlarm Event</see>.</summary>
      <param name="ienumiAlarmRule">Collection of alarm rules to be enabled. A collection realizing IList&lt;IAlarmRule&gt; will be most efficient.</param>
      <returns>CanEvaluate for the enabled rule</returns>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.ReferenceUnreferencedPointFaults(System.Collections.Generic.IEnumerable{System.String})">
      <summary>This method tries to reference ipoints used in the AlarmRules which have not yet been referenced. This method only deals with AlarmRules associated with this
            AlarmManager. Any rule which is not associated with this AlarmManager will be ignored.</summary>
      <param name="ienumiAlarmRules">
      </param>
      <returns>List of iAlarmRules passed that belong to this server and cannot be evaluated</returns>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.ReferenceUnreferencedPointFaults(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IAlarmRule})">
      <summary>
            Goes through the list of all point names used in alarm rules for which no referenced point could be found and tries
            to find if a new point or point server has been added which contains a point with a matching name.
            </summary>
      <param name="ienumiAlarmRules">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.ReferenceUnreferencedPointFaultsForAllRules">
      <summary>
            This method tries to reference ipoints used in all this AlarmManager AlarmRules which have not yet been referenced.
            </summary>
      <returns>List of iAlarmRules that belong to this server and cannot be evaluated</returns>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.GetPoint(System.String)">
      <summary>Gets the <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see> realized by a point object with name strName which is part of one of the PointServers or points referenced by the
            AlarmManager.</summary>
      <param name="strName">Name of the point to be retrieved.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.GetAlarmRules(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>Returns all AlarmRules where all of the non null conditional arguments are met If all the conditional arguments are null, all the alarms will be returned.</summary>
      <param name="bActive">Ignored if null otherwise all the alarm rules returned will have to have an IsActive property
            value matching the value of this parameter</param>
      <param name="bAcknowledged">Ignored if null otherwise all the alarm rules returned will have to have an IsAcknowledged
            property value matching the value of this parameter</param>
      <param name="bDisabled">Ignored if null otherwise all the alarm rules returned will have to have an IsDisabled
            property value matching the value of this parameter</param>
      <param name="bCanEvaluate">Ignored if null otherwise all the alarm rules returned will have to have an CanEvaluate
            property value matching the value of this parameter</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.GetAlarmRules(Corning.GenSys.Point.EAlarmRuleState)">
      <summary>Gets a list of alarm rules contained in the Alarm Manager and with the specified state.</summary>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.GetAlarmRule(System.String)">
      <summary>Gets the alarm rule named strAlarmRuleName or null if not found.</summary>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.ForceRuleEvaluation(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IAlarmRule})">
      <summary>Causes the alarm rules passed to the method to be evaluated. This evaluation is usually only triggered by a point fault event on a point linked to an alarm
            rule.</summary>
      <param name="ienumiAlarmRule">Collection of alarm rules to be evaluated.</param>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.ForceAllRuleEvaluation">
      <summary>Forces the evaluation of all alarm rules contained in the alarm manager</summary>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.AcknowledgeAlarmEvents(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.CAlarmEventArg},System.Boolean)">
      <summary>Acknowledge multiple alarms from the <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarm">OnAlarm Event</see>.</summary>
      <param name="lstalarmeventargToAcknowledge">
      </param>
      <param name="bAcknowledgeAllPreviousEvents">
      </param>
      <returns>List of rules which either have not been found or which have already been acknowledged</returns>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.AcknowledgeAllAlarmEvents">
      <summary>All alarm events are acknowledged for all unacknowledged alarm rules</summary>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManager.AcknowledgeAllAlarmEvents(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            For each alarm rule all alarm events are acknowledged
            </summary>
      <param name="lststrAlarmToAcknowledge">Collection of alarm rule names for which all <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarm">OnAlarm Event</see> need to be acknowledged.</param>
      <returns>List of rules which either have not been found or which have already been acknowledged</returns>
    </member>
    <member name="E:Corning.GenSys.Point.IAlarmManager.OnAlarm">
      <summary>
            This event is raised each time a point fault causes at least one AlarmRule to be active.
            The argument is a collection of CAlarmEventArg which contain an iAlarmRule, the time when
            the event was evaluated as well as if the AlarmRule changed state (Inactive -&gt; Active).
            IMPORTANT: Note that the collection of CAlarmEventArg may contain references to AlarmRules
            that were already active
            </summary>
    </member>
    <member name="E:Corning.GenSys.Point.IAlarmManager.OnAlarmCleared">
      <summary>
            This event is raised each time a point fault causes at least one AlarmRule to change
            from the Active to Inactive state.
            The argument is a collection of CAlarmEventArg which contain an iAlarmRule.
            </summary>
    </member>
    <member name="E:Corning.GenSys.Point.IAlarmManager.OnAlarmAcknowledged">
      <summary>
            This event is raised each time one or many AlarmEvent are acknowledged.
            </summary>
    </member>
    <member name="E:Corning.GenSys.Point.IAlarmManager.OnAlarmDisabled">
      <summary>
            This event is raised each time one or many alarm rules are disabled.
            </summary>
    </member>
    <member name="E:Corning.GenSys.Point.IAlarmManager.OnAlarmEnabled">
      <summary>
        <para>THIS EVENT IS CURRENTLY DISABLED AND WILL NEVER BE RAISED.</para>
        <para>This event is raised each time one or many alarm rules are enabled. Note that this event is also raised when a rule CanEvaluate property goes from false to
            true.</para>
      </summary>
    </member>
    <member name="T:Corning.GenSys.Point.EAlarmRuleState">
      <summary>Represents the <see cref="P:Corning.GenSys.Point.IAlarmRule.State">State</see> of an <see cref="T:Corning.GenSys.Point.IAlarmRule">IAlarmRule Interface</see></summary>
    </member>
    <member name="F:Corning.GenSys.Point.EAlarmRuleState.Cleared">
      <summary>
        <para>The alarm rule was in the Acknowledge state and has been evaluated to false.</para>
        <para>The alarm rule was in the Inactive state and was acknowledged.</para>
        <para>The alarm rule was in the Disabled state and was enabled while it evaluated to false.</para>
      </summary>
    </member>
    <member name="F:Corning.GenSys.Point.EAlarmRuleState.Active">
      <summary>
        <para>The alarm rule was in the Cleared or Inactive state and has been evaluated to true.</para>
        <para>The alarm rule was in the Disabled state and was enabled while it evaluated to true.</para>
      </summary>
    </member>
    <member name="F:Corning.GenSys.Point.EAlarmRuleState.Acknowledged">
      <summary>
        <para>The alarm rule was in the Active state and was acknowledged.</para>
        <para>The alarm rule was in the Disabled state whille it was in the Acknowledged state and was reenabled while no new point fault pertaining to the rule
            occurred.</para>
        <para>Note that when an alarm rule is in Acknowledged state, even if new point faults occur, the alarm rule will not go to the Active state but will remain in the
            Acknowledged state.</para>
      </summary>
    </member>
    <member name="F:Corning.GenSys.Point.EAlarmRuleState.Inactive">
      <summary>The alarm rule was in an the Active state and evaluated to false.</summary>
    </member>
    <member name="F:Corning.GenSys.Point.EAlarmRuleState.DisabledUnacknowledged">
      <summary>The alarm rule was in the Active state and was disabled.</summary>
    </member>
    <member name="F:Corning.GenSys.Point.EAlarmRuleState.Disabled">
      <summary>
        <para>The alarm rule was in any state except the Active state and was disabled.</para>
        <para>The alarm rule was in the DisabledUnacknowledged state and was acknowledged.</para>
      </summary>
    </member>
    <member name="T:Corning.GenSys.Point.EAlarmSeverity">
      <summary>The severity of an alarm. This is a property of an <see cref="P:Corning.GenSys.Point.IAlarmRule.Severity">IAlarmRule</see> and is pecified at the time the AlarmRule is added using
            the <see cref="O:Corning.GenSys.Point.CAlarmManager.AddAlarmRule">AddAlarmRule Method</see>.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.IAlarmRule">
      <summary>This represents an alarm rule which is a combination of point faults interrelated by an equation. An alarm rule can be added to an alarm manager using
            the <see cref="O:Corning.GenSys.Point.CAlarmManager.AddAlarmRule">AddAlarmRule Method</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmRule.ForceRuleEvaluation">
      <summary>An alarm rule is usually evaluated only when a fault event is raised on one of its point component. This method forces the rule to be evaluated.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IAlarmRule.Name">
      <summary>
            Name of the rule
            </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IAlarmRule.Description">
      <summary>
            Description of the rule
            </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IAlarmRule.Severity">
      <summary>
            Severity of the rule
            </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IAlarmRule.PointFaultHandlersUsedInRule">
      <summary>
            List of all the point faults used in the rule
            </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IAlarmRule.UnresolvedPointFaultHandlersUsedInRule">
      <summary>
            List of all the point faults used in the rule which do not have a valid reference to an Point
            </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IAlarmRule.CanEvaluate">
      <summary>
        <para>When an alarm rule is added to a point server, it relies on points added to the point server. This property will be true only if all the points referenced
            in the alarm rule have been added to the point server.</para>
        <para>If this property is false the <see cref="P:Corning.GenSys.Point.IAlarmRule.State">State</see> of the alarm rule will be <see cref="F:Corning.GenSys.Point.EAlarmRuleState.Inactive">Inactive</see>.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IAlarmRule.IsActive">
      <summary>true if the rule is active. The alarm rule becomes active if a the equation evaluates to true.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IAlarmRule.IsAcknowledged">
      <summary>True if the rule has been acknowledged</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IAlarmRule.IsDisabled">
      <summary>true if the rule is disabled. In that case the rule is not evaluated.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IAlarmRule.State">
      <summary>The state of the alarm rule. see <see cref="T:Corning.GenSys.Point.EAlarmRuleState">states description</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IAlarmRule.LastActiveAlarmEventArg">
      <summary>This contains the <see cref="T:Corning.GenSys.Point.CAlarmEventArg">CAlarmEventArg Class</see> reported by the last raising of <see cref="E:Corning.GenSys.Point.IAlarmManager.OnAlarm">OnAlarm Event</see></summary>
    </member>
    <member name="T:Corning.GenSys.Point.IPointFaultHandler">
      <summary>Represents the point faults used in one or many alarm rule(s).</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointFaultHandler.HasValidPoint">
      <summary>True if the point referred to by name in one or many alarm rule(s) has been added to the alarm manager directly or via a point server.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointFaultHandler.PointName">
      <summary>The name of the point referred to by name in one or many alarm rule(s).</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointFaultHandler.Point">
      <summary>A reference to the point referred to by name in one or many alarm rule(s). Will be null if the <see cref="P:Corning.GenSys.Point.IPointFaultHandler.HasValidPoint">HasValidPoint Property</see> is false.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointFaultHandler.NullableLastFaultType">
      <summary>The last fault type reported by the point. This is a nullable type and will be null until the first fault occurs.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointFaultHandler.AlarmRulesUsedIn">
      <summary>A list of references to all the alarm rules this point fault is part of.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointAttribute.Name">
      <summary>Name of the point attribute. This name is the same as what would be obtain through reflection.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointAttribute.Description">
      <summary>Description of the point attribute</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointAttribute.AttribType">
      <summary>Returns the type of a point attribute if it has a fixed type. Otherwise it returns null if the type is not a fixed type. This is for example the case for the
            "CurrentValue" or "RawValue" point attributes. In this case the type of the attribute can be determine by looking at the type of the point. This is simplified
            by the use of <see cref="O:Corning.GenSys.Point.CPointAttribute.GetAttribType">GetAttribType Method</see></summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointAttribute.IsConst">
      <summary>Indicates if the point attribute is a constant i.e. if it is set at construction time and dose not change through out the life of the point object.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointAttribute.CanRead">
      <summary>Indicate if the attribute is readable. This only relates to static behavior. For example, for the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
            attribute</see>, CanWrite will be true but the writeability of this attribute is also dynamically controlled by the <see cref="P:Corning.GenSys.Point.IPoint.Dynamic">Dynamic
            Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointAttribute.CanWrite">
      <summary>Indicate if the attribute is writeable. This only relates to static behavior. For example, for the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
            attribute</see>, CanWrite will be true but the writeability of this attribute is also dynamically controlled by the <see cref="P:Corning.GenSys.Point.IPoint.Dynamic">Dynamic
            Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointAttribute.IsTypeRaw">
      <summary>Indicate if the point attribute is of type TRaw as specified in IPoint&lt;TValue, TRaw&gt;</summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointAttribute">
      <summary>
        <strong>Static</strong> description of point attributes.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointAttribute.GetAttribType(System.Type,System.Type)">
      <summary>Used to determine the type of a point attribute. The type of an point attribute is sometime dependent on the point type as it is the case for the
            <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue attribute</see>. In this case the <see cref="P:Corning.GenSys.Point.CPointAttribute.AttribType">AttribType Property</see> will return null. The use of
            this method is preferred whenever possible</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointAttribute.GetAttribType(Corning.GenSys.Point.IPoint)">
      <summary>Used to determine the type of a point attribute. The type of an point attribute is sometime dependent on the point type as it is the case for the
            <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue attribute</see>. In this case the <see cref="P:Corning.GenSys.Point.CPointAttribute.AttribType">AttribType Property</see> will return null. The use of
            this method is preferred whenever possible</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointAttribute.Name">
      <summary>Name of the point attribute. This name is the same as what would be obtain through reflection.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointAttribute.Description">
      <summary>Description of the point attribute</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointAttribute.AttribType">
      <summary>Returns the type of a point attribute if it has a fixed type. Otherwise it returns null if the type is not a fixed type. This is for example the case for the
            "CurrentValue" or "RawValue" point attributes. In this case the type of the attribute can be determine by looking at the type of the point. This is simplified
            by the use of <see cref="O:Corning.GenSys.Point.CPointAttribute.GetAttribType">GetAttribType Method</see></summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointAttribute.IsConst">
      <summary>Indicates if the point attribute is a constant i.e. if it is set at construction time and dose not change through out the life of the point object.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointAttribute.CanRead">
      <summary>Indicate if the attribute is readable. This only relates to static behavior. For example, for the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
            attribute</see>, CanWrite will be true but the writeability of this attribute is also dynamically controlled by the <see cref="P:Corning.GenSys.Point.IPoint.Dynamic">Dynamic
            Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointAttribute.CanWrite">
      <summary>Indicate if the attribute is writeable. This only relates to static behavior. For example, for the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
            attribute</see>, CanWrite will be true but the writeability of this attribute is also dynamically controlled by the <see cref="P:Corning.GenSys.Point.IPoint.Dynamic">Dynamic
            Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointAttribute.IsTypeRaw">
      <summary>Indicate if the point attribute is of type TRaw as specified in IPoint&lt;TValue, TRaw&gt;</summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointException">
      <summary>
            This class is not currently used
            </summary>
    </member>
    <member name="T:Corning.GenSys.Point.EFaultType">
      <summary>Various faults that can be reported by an alarmable point based on its current value.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.EAccessLevel">
      <summary>Access level used by <see cref="!:Corning.GenSys.PointServerGui.UCPointServerGui">UCPointServerGui Class</see> to determine how a user can interact with points.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointAttributes">
      <summary>
        <para>Contains a collection of point attributes that can be accessed with the <see cref="F:Corning.GenSys.Point.CPointAttributes.S">S Field</see> singleton.</para>
        <para>This class is a singleton instantiated by a static constructor.</para>
      </summary>
    </member>
    <member name="F:Corning.GenSys.Point.CPointAttributes.S">
      <summary>Singleton instance to access the point attribute collection.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.DelegateCalledWhenReadingAttribute`1">
      <summary>Optional delegate to be used by a point when reading a point attribute.</summary>
      <typeparam name="TAttrib">The type of the point attribute</typeparam>
      <param name="objParameters">Parameter to the delegate passed to the point when the delegate is added</param>
      <returns>Returns an object of type TAttrib to be used to assign the point attribute.</returns>
    </member>
    <member name="T:Corning.GenSys.Point.DelegateCalledWhenWritingAttribute`1">
      <summary>Optional delegate used by a point to be used when writing a point attribute.</summary>
      <param name="objParameters">Parameter to the delegate passed to the point when the delegate is added</param>
      <typeparam name="TAttrib">The type of the point attribute</typeparam>
      <param name="tattribData">The data that will be written in the point attribute.</param>
    </member>
    <member name="T:Corning.GenSys.Point.PointChangeEventHandler">
      <summary>A unique name for the setting.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.FaultEventHandler">
      <summary>Delegate signature used by <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault Event</see></summary>
    </member>
    <member name="T:Corning.GenSys.Point.IFaultEventArg">
      <summary>Interface to object containing data associated to <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault Event</see></summary>
    </member>
    <member name="P:Corning.GenSys.Point.IFaultEventArg.Type">
      <summary>The type of the point attribute on which the fault occurred.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IFaultEventArg.AttributeName">
      <summary>Name of the attribute that caused the fault. With the current implementation this will always be "CurrentValue".</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IFaultEventArg.FaultType">
      <summary>The type of the fault.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IFaultEventArg.Value">
      <summary>The value of the point attribute on which the fault occurred. The underlying type is <see cref="P:Corning.GenSys.Point.IFaultEventArg.Type">Type</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IFaultEventArg.Threshold">
      <summary>The value of the threshold that was crossed. The underlying type is the type of the attribute on which the fault occurred is <see cref="P:Corning.GenSys.Point.IFaultEventArg.Type">Type</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IFaultEventArg.FaultCount">
      <summary>The fault count at the time this fault occurred. the count includes the current fault.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.CFaultEventArg`1">
      <summary>One of the parameter of <see cref="T:Corning.GenSys.Point.FaultEventHandler">FaultEventHandler Delegate</see> is of this type. An object of this type is returned whenever a
            point <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault Event</see> is raised.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CFaultEventArg`1.Type">
      <summary>See <see cref="P:Corning.GenSys.Point.IFaultEventArg.Type">Type Property</see></summary>
    </member>
    <member name="P:Corning.GenSys.Point.CFaultEventArg`1.AttributeName">
      <summary>See <see cref="P:Corning.GenSys.Point.IFaultEventArg.AttributeName">AttributeName Property</see></summary>
    </member>
    <member name="P:Corning.GenSys.Point.CFaultEventArg`1.FaultType">
      <summary>See <see cref="P:Corning.GenSys.Point.IFaultEventArg.FaultType">FaultType Property</see></summary>
    </member>
    <member name="P:Corning.GenSys.Point.CFaultEventArg`1.Value">
      <summary>See <see cref="P:Corning.GenSys.Point.IFaultEventArg.Value">Value Property</see></summary>
    </member>
    <member name="P:Corning.GenSys.Point.CFaultEventArg`1.Threshold">
      <summary>See <see cref="P:Corning.GenSys.Point.IFaultEventArg.Threshold">Threshold Property</see></summary>
    </member>
    <member name="P:Corning.GenSys.Point.CFaultEventArg`1.FaultCount">
      <summary>See <see cref="P:Corning.GenSys.Point.IFaultEventArg.FaultCount">FaultCount Property</see></summary>
    </member>
    <member name="T:Corning.GenSys.Point.ISettingsName">
      <summary>Interface necessary so that a setting object can have a unique identifier. This unique identifier is used when settings are applied to find the object the
            settings belong to.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.ISettingApplierFromObject">
      <summary>Interface that object need to realize to be a setting.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.ISettingApplierFromObject.ApplySettingsFromObject(System.Object,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
      </summary>
      <param name="objSettings">Has to be of the same type or a more derived type than the object
            implementing the interface</param>
      <param name="ienumstrExcludedMembers">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Corning.GenSys.Point.IPointExternal">
      <summary>This is the interface used to carry point information over a network.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.IPointExternal.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">
      <summary>
        <para>Returns the value of a point attribute as a string. The attribute can be specified using <see cref="T:Corning.GenSys.Point.CPointAttributes">CPointAttributes Class</see> and the list of valid
            attributes is returned by <see cref="M:Corning.GenSys.Point.IPointExternal.GetAllAttributes">GetAllAttributes Method</see>.</para>
        <para>This method is used by the <see cref="!:CPointServerBase">CPointServerBase Class</see>. If the object also realizes the <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see>, it is easier to use the
            property associated with a point attribute instead of using this method.</para>
      </summary>
      <example>
        <code title="GetAttributeValueAsString Example" description="The following example illustrates the use of the GetAttributeValueAsString method with two ways of specifying the attribute parameter." lang="CS">
            IPoint iPoint = CPointFactory.CreatePoint(typeof(float), "SamplePoint", "Sample Point", 0.65f);
            // The following two lines shows two ways to specify an attribute
            string strPointNameValue = iPoint.GetAttributeValueAsString(CPointAttributes.GetPointAttribute("PointName"));
            strPointNameValue = iPoint.GetAttributeValueAsString(CPointAttributes.S.PointName);
            // At this point strPointNameValue contains string "SamplePoint"</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.Point.IPointExternal.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">
      <summary>
        <para>Returns the value of a point attribute as an object whose underlying type depends on the attribute being accessed and can be determined as illustrated in
            the example. The attribute can be specified using <see cref="T:Corning.GenSys.Point.CPointAttributes">CPointAttributes Class</see> and the list of valid attributes is returned by <see cref="M:Corning.GenSys.Point.IPointExternal.GetAllAttributes">GetAllAttributes
            Method</see>.</para>
        <para>This method is used by the <see cref="!:CPointServerBase">CPointServerBase Class</see>. If the object also realizes the <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see>, it is easier to use the
            property associated with a point attribute instead of using this method.</para>
      </summary>
      <example>
        <code title="GetAttributeValueAsObject Example" description="The following example illustrates the use of the GetAttributeValueAsObject method with two ways of specifying the attribute parameter. It also illustrate a method to get the underlying type of the returned object." lang="CS">
            IPoint iPoint = CPointFactory.CreatePoint(typeof(float), "SamplePoint", "Sample Point", 0.65f);
            // The following two lines shows two ways to specify an attribute
            object objPointNameValue = iPoint.GetAttributeValueAsObject(CPointAttributes.GetPointAttribute("PointName"));
            object objCurrentValueValue = iPoint.GetAttributeValueAsObject(CPointAttributes.S.CurrentValue);
            Type typeCurrentValueAttribute = CPointAttributes.S.CurrentValue.GetAttribType(iPoint);
            // At this point objPointNameValue contains string "SamplePoint"
            // objCurrentValueValue contains 0.65f and typeCurrentValueAttribute contains typeof(float)</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">
      <summary>
        <para>Sets the value of a writeable point attribute from a string. This call will succeed only if the type of the attribute being accessed can be deserialized
            from a string. The attribute can be specified using <see cref="T:Corning.GenSys.Point.CPointAttributes">CPointAttributes Class</see> and the list of valid attributes is returned by <see cref="M:Corning.GenSys.Point.IPointExternal.GetAllAttributes">GetAllAttributes
            Method</see>.</para>
        <para>This method is used by the <see cref="!:CPointServerBase">CPointServerBase Class</see>. If the object also realizes the <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see>, it is easier to use the
            property associated with a point attribute instead of using this method.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">
      <summary>
        <para>Sets the value of a writeable point attribute from an object whose underlying type must be the same as the type of the attribute being accessed which can be
            determined as illustrated in the example. The attribute can be specified using <see cref="T:Corning.GenSys.Point.CPointAttributes">CPointAttributes Class</see> and the list of valid attributes is
            returned by <see cref="M:Corning.GenSys.Point.IPointExternal.GetAllAttributes">GetAllAttributes Method</see>.</para>
        <para>This method is used by the <see cref="!:CPointServerBase">CPointServerBase Class</see>. If the object also realizes the <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see>, it is easier to use
            the property associated with a point attribute instead of using this method.</para>
      </summary>
      <example>
        <code title="SetAttributeValueAsObject Example" description="" lang="CS">
            IPoint iPoint = CPointFactory.CreatePoint(typeof(float), "SamplePoint", "Sample Point", 0.65f);
            // The following two lines shows two ways to specify an attribute
            iPoint.SetAttributeValueAsObject(CPointAttributes.GetPointAttribute("Precision"), 2);
            if (iPoint.Writeable &amp;&amp; CPointAttributes.S.CurrentValue.GetAttribType(iPoint) == typeof(float))
            {
                iPoint.SetAttributeValueAsObject(CPointAttributes.S.CurrentValue, 10.5f);
            }
            // At this point objPointNameValue contains string "SamplePoint"</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.Point.IPointExternal.GetAllAttributes">
      <summary>
        <para>Returns a string array containing the name of all attributes that can be written and/or read. The list depends on the object realizing the
            interface and if the point is disabled or not.</para>
        <para>For a point object realizing the <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see> and is not disabled, the results are: PointType, ValueType, PointName, PointShortName,
            GuiDescription, CurrentValue, Writeable, Hidden, Dynamic, RawType, RawValue, Precision, Increment, ReadAccessLevel, WriteAccessLevel, Units, Disabled,
            AllowedGroups, Groups, Alarmable, FaultDisabled, FaultCount, SetPointValue, ControlLoop, ControlLoopDisable, MinSettableValue, MaxSettableValue, UnitsSlope,
            UnitsOffset, MonChangePercent, MonChangePercentDisable, MonChangeValue, MonChangeValueDisable, LowFaultThreshold, LowLowFaultThreshold, HighFaultThreshold,
            HighHighFaultThreshold, FaultHysteresis</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.IPointExternal.GetAllAttributesCanWrite">
      <summary>Returns a boolean array of the same size as the array returned by <see cref="M:Corning.GenSys.Point.IPointExternal.GetAllAttributes">GetAllAttributes Method</see>. Each element of the returned array indicate
            if the corresponding attribute is readable through the use of <see cref="M:Corning.GenSys.Point.IPointExternal.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject Method</see>
            or <see cref="M:Corning.GenSys.Point.IPointExternal.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see>. It does not give any indication regarding the writeability of the attribute using the
            corresponding <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see> property. Also this information comes from static data common to all objects of this class and does not take
            into account access restriction that might have been imposed on the specific object. For example the attribute CurrentValue is shown as readable and writeable
            but if the object has the <see cref="P:Corning.GenSys.Point.IPoint.Writeable">Writeable Property</see> set to false the CurrentValue attribute cannot be written by
            using <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString Method</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.IPointExternal.GetAllAttributesCanRead">
      <summary>
        <para>Returns a boolean array of the same size as the array returned by <see cref="M:Corning.GenSys.Point.IPointExternal.GetAllAttributes">GetAllAttributes Method</see>. Each element of the returned array
            indicate if the corresponding attribute is readable through the use of <see cref="M:Corning.GenSys.Point.IPointExternal.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject Method</see>
            or <see cref="M:Corning.GenSys.Point.IPointExternal.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see>. It does not give any indication regarding the readability of the attribute using the
            corresponding <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see> property. Also this information comes from static data common to all objects of this class and does not take
            into account access restriction that might have been imposed on the specific object. For example the attribute CurrentValue is shown as readable and writeable
            but if the object has the <see cref="P:Corning.GenSys.Point.IPoint.Writeable">Writeable Property</see> set to false the CurrentValue attribute cannot be written by
            using <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString Method</see>.</para>
        <para>As of 01/28</para>
      </summary>
    </member>
    <member name="T:Corning.GenSys.Point.IPoint">
      <summary>
        <para>This is the interface realized by <see cref="!:CPoint&lt;TValue,TRaw&gt;">CPoint&lt;TValue,TRaw&gt; Class</see> and <see cref="!:CPointProxy&lt;TValue,TRaw&gt;">CPointProxy&lt;TValue,TRaw&gt;
            Class</see>.</para>
        <para>See <see cref="T:Corning.GenSys.Point.IPoint`2">IPoint&lt;TValue,TRaw&gt; Interface</see> for the strongly typed version.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.IPoint.AddGroup(System.String)">
      <summary>Adds a group to the list of groups the point belongs to. If the group name ends with character '.' <see cref="P:Corning.GenSys.Point.IPoint.Groups">Groups</see>[0] is appended as a suffix.
            <see cref="P:Corning.GenSys.Point.IPoint.Groups">Groups</see>[0] is the group automatically created during point creation.</summary>
      <param name="strGroup">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.PointType">
      <summary>returns <em>typeof(<see cref="T:Corning.GenSys.Point.IPoint">IPoint</see>)</em></summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.ValueType">
      <summary>The type of the point's current value</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.RawType">
      <summary>The type of the point's raw value.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.PointName">
      <summary>
        <para>Name of the point. This name should be unique if the point is to be a member of a <see cref="!:CPointsServer">CPointsServer Class</see>. The name can be composed of multiple
            strings separated by the <see cref="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">mc_strNameSeparator Field</see> string to form a path which is used by <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see> to create a hierarchy.</para>
        <para>This property will not change through out the life of the point object and its value is set at construction time.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.PointShortName">
      <summary>If <see cref="P:Corning.GenSys.Point.IPoint.PointName">PointName Property</see> is composed of multiple strings separated by the <see cref="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">mc_strNameSeparator
            Field</see> string, this property returns the string after the last separator. For example if the point name is "Main.Test.MyPoint"
            this property will be "MyPoint".</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.GuiDescription">
      <summary>
        <para>A string which contains the description of the point. It is used by <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User Control</see>.</para>
        <para>This property will not change through out the life of the point object and is set at construction time.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.CurrentValue">
      <summary>
        <para>
          <see cref="P:Corning.GenSys.Point.IPoint`2.CurrentValue">CurrentValue Property</see> is the strongly typed equivalent.</para>
        <para>The current value of the point as an object with an underlying type of <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see>. The relationship between this property and <see cref="P:Corning.GenSys.Point.IPoint.RawValue">RawValue
            Property</see> is defined by the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>Reading this property will first results in a call to the read delegates for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> if
            one was added. If no delegate was added for the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> then the read delegate for
            <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see> is called if one has been added. After a call to a read delegate the current and raw value
            internal field are assigned. Note that if a read delegate is associated to both <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> and
            <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, only the read delegate for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
            Attribule</see> will be called.</para>
        <para>Writing to this property is only allowed if the <see cref="P:Corning.GenSys.Point.IPoint.Dynamic">Dynamic Property</see> is true. Otherwise an exception will be thrown. Writing to this property will
            results in a call to the write delegates (if set at construction time) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> first
            and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see> second. Note that the call to the delegates is performed before the current and raw
            value internal fields are assigned. Therefore the delegates with signature void WriteDelegate(IPoint iPoint, TValue tvalueToWrite, object objParam) have
            access, through the iPoint parameter, to the old current and raw value.</para>
        <para>The following actions will result in an update of the internal current value field and in turn this property.</para>
        <list type="number">
          <item>Writing to this property or <see cref="P:Corning.GenSys.Point.IPoint`2.RawValue">RawValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (set at construction time) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>
                and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either this property or <see cref="P:Corning.GenSys.Point.IPoint.RawValue">RawValue Property</see> or a call to
                <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString Method</see>
                using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>. NOTE: The update of the internal current value field occurs only if
                the value returned by the read delegate is different from the old value of the internal current value field.</item>
        </list>
        <para>
        </para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.CurrentValueCached">
      <summary>
        <para>
          <see cref="P:Corning.GenSys.Point.IPoint`2.CurrentValueCached">CurrentValueCached Property</see> is the strongly typed equivalent.</para>
        <para>This is the same property as <see cref="P:Corning.GenSys.Point.IPoint.CurrentValue">CurrentValue Property</see> except that no read or write delegates are called. It only reads or writes the internal
            memory of the point where the current value is cached.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.RawValue">
      <summary>
        <para>
          <see cref="P:Corning.GenSys.Point.IPoint`2.RawValue">RawValue Property</see> is the strongly typed equivalent.</para>
        <para>The raw value of the point as an object with an underlying type of <see cref="P:Corning.GenSys.Point.IPoint.RawType">RawType</see>. The relationship between this property and
            <see cref="P:Corning.GenSys.Point.IPoint.CurrentValue">CurrentValue Property</see> is defined by the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>Reading this property will first results in a call to the read delegates for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> if
            one was added. If no delegate was added for the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> then the read delegate for
            <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see> is called if one has been added. After a call to a read delegate the current and raw value
            internal field are assigned. Note that if a read delegate is associated to both <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> and
            <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, only the read delegate for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
            Attribule</see> will be called.</para>
        <para>The following actions will result in an update of the internal current value field and in turn this property.</para>
        <list type="number">
          <item>Writing to <see cref="P:Corning.GenSys.Point.IPoint.CurrentValue">CurrentValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (set at construction time) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>
                and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either this property or <see cref="P:Corning.GenSys.Point.IPoint.CurrentValue">CurrentValue
                Property</see> or a call to <see cref="M:Corning.GenSys.Point.IPointExternal.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject Method</see> or
                <see cref="M:Corning.GenSys.Point.IPointExternal.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
                Attribule</see>. NOTE: The update of the the internal current value field occurs only if the value returned by the read delegate
                is different from the old value of the internal current value field.</item>
        </list>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.SetPointValue">
      <summary>
        <para>
          <see cref="P:Corning.GenSys.Point.IPoint`2.SetPointValue">SetPointValue Property</see> is the strongly typed equivalent.</para>
        <para>An object of this class can also represent a controlled value. in that case this property represent where the current value should be controlled to.</para>
        <para>In order to read or write this property <see cref="P:Corning.GenSys.Point.IPoint.ControlLoop">ControlLoop Property</see> must be true otherwise an exception will be thrown.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.MinSettableValue">
      <summary>
        <para>
          <see cref="P:Corning.GenSys.Point.IPoint`2.MinSettableValue">MinSettableValue Property</see> is the strongly typed equivalent.</para>
        <para>The minimum value that <see cref="P:Corning.GenSys.Point.IPoint.CurrentValue">CurrentValue Property</see> can be set to.</para>
        <para>WARNING: It is possible to set this property to a value greater than what is contained in the internal current value field. Doing this will not affect the
            value of the internal current value field which will remain at a lower value than MinSettableValue.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.MaxSettableValue">
      <summary>
        <para>
          <see cref="P:Corning.GenSys.Point.IPoint`2.MaxSettableValue">MaxSettableValue Property</see> is the strongly typed equivalent.</para>
        <para>The maximum value that <see cref="P:Corning.GenSys.Point.IPoint.CurrentValue">CurrentValue Property</see> can be set to.</para>
        <para>WARNING: It is possible to set this property to a value lower than what is contained in the internal current value field. Doing this will not affect the
            value of the internal current value field which will remain at a higher value than MaxSettableValue.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.Dynamic">
      <summary>
        <para>If this value is true the user can expect that the value of the internal current value field can be changed by the software exposing the point.</para>
        <para>This value must be set to true in order to write to <see cref="P:Corning.GenSys.Point.IPoint.CurrentValue">CurrentValue Property</see>, and/or <see cref="P:Corning.GenSys.Point.IPoint.RawValue">RawValue Property</see>.</para>
        <para>NOTE: Even if this property is false, if the point object contains read delegates for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
            Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see> these delegates can modify the internal
            current value field.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.Writeable">
      <summary>
        <para>This property controls the writeability of the points <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue attribute</see>
            via <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> and <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
            Method</see>.</para>
        <para>Not that the <see cref="P:Corning.GenSys.Point.IPoint.CurrentValue">CurrentValue Property</see> writeability is not controlled by this property it is controlled by the <see cref="P:Corning.GenSys.Point.IPoint.Dynamic">Dynamic
            Property</see>.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.Hidden">
      <summary>This value is used by the <see cref="!:CPointServerBase">CPointServerBase Class</see> to determine if the point should be added to the list of point names returned by
            the <see cref="O:Corning.GenSys.Point.CPointServerBase.EnumPoints">EnumPoints Method</see></summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.Alarmable">
      <summary>
        <para>This property is only relevant if TValue realizes the System.Runtime.InteropServices.IComparable interface.</para>
        <para>When set to true the internal current value field will be tested against thresholds and <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault Event</see> will be raised when it goes over
            a threshold. This can be enabled or disabled using the <see cref="P:Corning.GenSys.Point.IPoint.FaultDisabled">FaultDisabled Property</see>.</para>
        <para>Unlike the <see cref="P:Corning.GenSys.Point.IPoint.FaultDisabled">FaultDisabled Property</see> this property is set at construction time and will not change through out the lifetime of the object.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.ControlLoop">
      <summary>
        <para>If set to true the instantiated point object represents a controlled value. In that case <see cref="P:Corning.GenSys.Point.IPoint.SetPointValue">SetPointValue Property</see> represents where
            the <see cref="P:Corning.GenSys.Point.IPoint.CurrentValue">CurrentValue Property</see> should be controlled to.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.ControlLoopDisable">
      <summary>This value is simply stored and not used internally. The intent of this property is to control if the control loop functionality is enabled or disabled. This
            property should be set to true if <see cref="P:Corning.GenSys.Point.IPoint.ControlLoop">ControlLoop Property</see> is false.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.Precision">
      <summary>
        <para>Specifies the number of digits after the decimal point. This value can be used externally to display the current value of the point. The Point object simply
            stores this value and does not use it internally.</para>
        <para>The value of the internal field is set at construction time and does not change through out the life of the object.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.Increment">
      <summary>
        <para>
          <see cref="P:Corning.GenSys.Point.IPoint`2.Increment">Increment Property</see> is the strongly typed equivalent.</para>
        <para>A value that can be used in an up/down control to increment or decrement the current value of the point. The Point object simply stores this value and does
            not use it internally.</para>
        <para>The value of the internal field does not change through out the life of the object and is initialize at construction time.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.ReadAccessLevel">
      <summary>
        <para>This contains the list, contained in the flag enum EAccessLevel, of access levels which are allowed to read from the point. This value is initialized in the
            Point constructor only and will not change through out the life of the Point object. The default value for that property is specified in the base class field
            <see cref="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelReadDefault">CPointBase.ms_eaccesslevelReadDefault</see> and can be accessed via property <see cref="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">ReadAccessLevelDefault Property</see>.</para>
        <para>Note that the point class only stores this value and does not enforce the policy. This value is used and the policy enforced by the <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see>.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.WriteAccessLevel">
      <summary>
        <para>This contains the list, contained in the flag enum EAccessLevel, of access levels which are allowed to write to the point. This value is initialized in the
            Point constructor only and will not change through out the life of the Point object. The default value for that property is specified in the base class field
            <see cref="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelWriteDefault">CPointBase.ms_eaccesslevelReadDefault</see> and can be accessed via property <see cref="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">WriteAccessLevelDefault Property</see>.</para>
        <para>Note that the point class only stores this value and does not enforce the policy. This value is used and the policy enforced by the <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see>.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.Units">
      <summary>A string which contains the units of the value returned by <see cref="P:Corning.GenSys.Point.IPoint.CurrentValue">CurrentValue Property</see></summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.UnitsSlope">
      <summary>
        <para>The slope parameter used for the linear conversion to/from raw value with the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>This is only applicable if <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> and TRaw are of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their
            nullable counterparts.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.UnitsOffset">
      <summary>
        <para>The offset parameter used for the linear conversion to/from raw value with the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>This is only applicable if <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> and TRaw are of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their
            nullable counterparts.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.MonChangePercent">
      <summary>
        <para>If the internal current value field is updated which results in a change in percent by more than the value specified in the MonChangePercent Property, the
            <see cref="E:Corning.GenSys.Point.IPoint.eventPointChanged">eventPointChanged Event</see> is triggered if <see cref="P:Corning.GenSys.Point.IPoint.MonChangePercentDisable">MonChangePercentDisable Property</see> is false. This is only applicable if
            <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> is of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their nullable counterparts.</para>
        <para>This parameter should be greater than 0 except in the following two cases where <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> can be any type:</para>
        <list type="number">
          <item>If this property is set to <see cref="F:Corning.GenSys.Point.CPointBase.mc_nMonChangePercentDifferentValueTrigger">mc_nMonChangePercentDifferentValueTrigger Field</see> (0), whenever the
                internal current value field changes to a value different from the old value, the <see cref="E:Corning.GenSys.Point.IPoint.eventPointChanged">eventPointChanged Event</see> is raised.</item>
          <item>If this property is set to <see cref="F:Corning.GenSys.Point.CPointBase.mc_nMonChangePercentSameValueTrigger">mc_nMonChangePercentSameValueTrigger Field</see> (-6464), whenever the internal
                current value field changes to a value even if it is the same as the old value, the <see cref="E:Corning.GenSys.Point.IPoint.eventPointChanged">eventPointChanged Event</see> is raised.</item>
        </list>
        <para>The following actions will result in an update of the internal current value field.</para>
        <list type="number">
          <item>Writing to this property or <see cref="P:Corning.GenSys.Point.IPoint`2.RawValue">RawValue Property</see>%.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (set at construction time) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>
                and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either this property or <see cref="P:Corning.GenSys.Point.IPoint.RawValue">RawValue Property</see> or a call to
                <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString Method</see>
                using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>. NOTE: The update of the internal current value field occurs only if
                the value returned by the read delegate is different from the old value of the internal current value field.</item>
        </list>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.MonChangePercentDisable">
      <summary>When set to false no <see cref="E:Corning.GenSys.Point.IPoint.eventPointChanged">eventPointChanged Event</see> will be raised based on percent change of the internal current value field.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.MonChangeValue">
      <summary>
        <para>
          <see cref="P:Corning.GenSys.Point.IPoint`2.MonChangeValue">MonChangeValue Property</see> is the strongly typed equivalent.</para>
        <para>If the internal current value field is updated which results in a change such that abs(OldValue-NewValue) is greater or equal to the value specified in the
            MonChangeValue Property, the <see cref="E:Corning.GenSys.Point.IPoint.eventPointChanged">eventPointChanged Event</see> is raised if <see cref="P:Corning.GenSys.Point.IPoint.MonChangeValueDisable">MonChangeValueDisable Property</see> is false. This is
            only applicable if <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> is of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their nullable
            counterparts.</para>
        <para>The following actions will result in an update of the internal current value field.</para>
        <list type="number">
          <item>Writing to this property or <see cref="P:Corning.GenSys.Point.IPoint`2.RawValue">RawValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (set at construction time) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>
                and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either this property or <see cref="P:Corning.GenSys.Point.IPoint.RawValue">RawValue Property</see> or a call to
                <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString Method</see>
                using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>. NOTE: The update of the internal current value field occurs only if
                the value returned by the read delegate is different from the old value of the internal current value field.</item>
        </list>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.MonChangeValueDisable">
      <summary>When set to false no <see cref="E:Corning.GenSys.Point.IPoint.eventPointChanged">eventPointChanged Event</see> will be raised based on value change of the internal current value field.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.LowFaultThreshold">
      <summary>
        <para>
          <see cref="P:Corning.GenSys.Point.IPoint`2.LowFaultThreshold">LowFaultThreshold Property</see> is the strongly typed equivalent.</para>
        <para>If <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> is bool then only <see cref="P:Corning.GenSys.Point.IPoint.HighFaultThreshold">HighFaultThreshold Property</see> is relevant</para>
        <para>This property is only relevant if <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> realizes the System.Runtime.InteropServices.IComparable interface and <see cref="P:Corning.GenSys.Point.IPoint.Alarmable">Alarmable Property</see>
            is true.</para>
        <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.IPoint.FaultDisabled">FaultDisabled Property</see> is false, the point fault condition is evaluated. All
            fault evaluation are performed using a threshold as well as an hysteresis contained in <see cref="P:Corning.GenSys.Point.IPoint.FaultHysteresis">FaultHysteresis Property</see>.</para>
        <para>If the internal current value field is below this threshold and above the <see cref="P:Corning.GenSys.Point.IPoint.LowLowFaultThreshold">LowLowFaultThreshold</see>, the point is placed in
            <see cref="F:Corning.GenSys.Point.EFaultType.Low">Low</see> fault type state. If the internal current value field is above this threshold and below <see cref="P:Corning.GenSys.Point.IPoint.HighFaultThreshold">HighFaultThreshold</see>, the point
            is placed in <see cref="T:Corning.GenSys.Point.EFaultType">None</see>:EFaultType.None% fault type state.</para>
        <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault Event</see> is raised with argument containing the new point
            fault type state.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.LowLowFaultThreshold">
      <summary>
        <para>
          <see cref="P:Corning.GenSys.Point.IPoint`2.LowLowFaultThreshold">LowLowFaultThreshold Property</see> is the strongly typed equivalent.</para>
        <para>If <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> is bool then only <see cref="P:Corning.GenSys.Point.IPoint.HighFaultThreshold">HighFaultThreshold Property</see> is relevant</para>
        <para>This property is only relevant if <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> realizes the System.Runtime.InteropServices.IComparable interface and <see cref="P:Corning.GenSys.Point.IPoint.Alarmable">Alarmable Property</see>
            is true.</para>
        <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.IPoint.FaultDisabled">FaultDisabled Property</see> is false, the point fault condition is evaluated. All
            fault evaluation are performed using a threshold as well as an hysteresis contained in <see cref="P:Corning.GenSys.Point.IPoint.FaultHysteresis">FaultHysteresis Property</see>.</para>
        <para>If the internal current value field is below this threshold the point is placed in <see cref="F:Corning.GenSys.Point.EFaultType.LowLow">LowLow</see> fault type state. If the internal current
            value field is above this threshold and below <see cref="P:Corning.GenSys.Point.IPoint.LowFaultThreshold">LowFaultThreshold</see>, the point is placed in <see cref="T:Corning.GenSys.Point.EFaultType">Low</see>:EFaultType.Low% fault type
            state.</para>
        <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault Event</see> is raised with argument containing the new point
            fault type state.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.HighFaultThreshold">
      <summary>
        <para>
          <see cref="P:Corning.GenSys.Point.IPoint`2.HighFaultThreshold">HighFaultThreshold Property</see> is the strongly typed equivalent.</para>
        <para>If <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> is bool then this is the only relevant threshold. If the current value is equal to the high threshold then the point goes into the
            high fault state and if it is different it goes out of fault state.</para>
        <para>This property is only relevant if <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> realizes the System.Runtime.InteropServices.IComparable interface and <see cref="P:Corning.GenSys.Point.IPoint.Alarmable">Alarmable Property</see>
            is true.</para>
        <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.IPoint.FaultDisabled">FaultDisabled Property</see> is false, the point fault condition is evaluated. All
            fault evaluation are performed using a threshold as well as an hysteresis contained in <see cref="P:Corning.GenSys.Point.IPoint.FaultHysteresis">FaultHysteresis Property</see>.</para>
        <para>If the internal current value field is above this threshold and below the <see cref="P:Corning.GenSys.Point.IPoint.HighHighFaultThreshold">HighHighFaultThreshold</see>, the point is placed in
            <see cref="F:Corning.GenSys.Point.EFaultType.High">High</see> fault type state. If the internal current value field is below this threshold and above <see cref="P:Corning.GenSys.Point.IPoint.LowFaultThreshold">LowFaultThreshold</see>, the point
            is placed in <see cref="T:Corning.GenSys.Point.EFaultType">None</see>:EFaultType.None%</para>
        <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault Event</see> is raised with argument containing the new point
            fault type state.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.HighHighFaultThreshold">
      <summary>
        <para>
          <see cref="P:Corning.GenSys.Point.IPoint`2.HighHighFaultThreshold">HighHighFaultThreshold Property</see> is the strongly typed equivalent.</para>
        <para>If <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> is bool then only <see cref="P:Corning.GenSys.Point.IPoint.HighFaultThreshold">HighFaultThreshold Property</see> is relevant</para>
        <para>This property is only relevant if <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> realizes the System.Runtime.InteropServices.IComparable interface and <see cref="P:Corning.GenSys.Point.IPoint.Alarmable">Alarmable Property</see>
            is true.</para>
        <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.IPoint.FaultDisabled">FaultDisabled Property</see> is false, the point fault condition is evaluated. All
            fault evaluation are performed using a threshold as well as an hysteresis contained in <see cref="P:Corning.GenSys.Point.IPoint.FaultHysteresis">FaultHysteresis Property</see>.</para>
        <para>If the internal current value field is above this threshold the point is placed in <see cref="F:Corning.GenSys.Point.EFaultType.HighHigh">HighHigh</see> fault type state. If the internal current
            value field is below this threshold and above <see cref="P:Corning.GenSys.Point.IPoint.HighFaultThreshold">HighFaultThreshold</see> the point is placed in <see cref="F:Corning.GenSys.Point.EFaultType.High">High</see>.</para>
        <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault Event</see> is raised with argument containing the new point
            fault type state.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.FaultHysteresis">
      <summary>
        <para>
          <see cref="P:Corning.GenSys.Point.IPoint`2.FaultHysteresis">FaultHysteresis Property</see> is the strongly typed equivalent.</para>
        <para>This property is only relevant if <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> is of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their
            nullable counterpart and <see cref="P:Corning.GenSys.Point.IPoint.Alarmable">Alarmable Property</see> is true.</para>
        <para>A value which is added to low fault thresholds or subtracted from high fault thresholds based on the value of the internal current value field.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.FaultDisabled">
      <summary>
        <para>This property is only relevant if <see cref="P:Corning.GenSys.Point.IPoint.ValueType">ValueType</see> realizes the System.Runtime.InteropServices.IComparable interface and <see cref="P:Corning.GenSys.Point.IPoint.Alarmable">Alarmable Property</see>
            is true.</para>
        <para>When set to false no <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault Event</see> is triggered regardless of the value of the current value internal field.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.FaultCount">
      <summary>The internal field access through this property is incremented each time the <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault Event</see> is raised except when it is raised with
            argument <see cref="F:Corning.GenSys.Point.EFaultType.None">None Field</see>. Reading this property will reset the internal field to 0.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.Disabled">
      <summary>
        <para>If this property is true only this property is accessible. Access to any other property results in an exception. Further more <see cref="M:Corning.GenSys.Point.IPointExternal.GetAllAttributes">GetAllAttributes
            Method</see> will return an array with only the string "Disable" and <see cref="M:Corning.GenSys.Point.IPointExternal.GetAllAttributesCanRead">GetAllAttributesCanRead
            Method</see>, <see cref="M:Corning.GenSys.Point.IPointExternal.GetAllAttributesCanWrite">GetAllAttributesCanWrite Method</see> return an array with a single value true.
            Also, <see cref="M:Corning.GenSys.Point.IPointExternal.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject Method</see>, <see cref="M:Corning.GenSys.Point.IPointExternal.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString
            Method</see>, <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject
            Method</see>, <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString Method</see> will only accept
            <see cref="F:Corning.GenSys.Point.CPointAttributes.Disabled">CPointAttributes.S.Disabled</see> for their oPointAttribute parameter. Access to any other method will result in an exception.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.Groups">
      <summary>Contains the list of groups the point belongs to. Note that if the <see cref="P:Corning.GenSys.Point.IPoint.PointName">PointName Property</see> contains at least one separator ('.') then a group is
            added automatically at construction time. The name of the added group is the string preceding the last separator. For example if a point is named
            "My.First.Point" the group "My.First" will be added as the first group this point belongs to, Groups[0].</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint.LastFaultEventArg">
      <summary>A <see cref="T:Corning.GenSys.Point.CAlarmEventArg">CAlarmEventArg Class</see> instance containing the last argument reported the last time the <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault Event</see> was raised.</summary>
    </member>
    <member name="E:Corning.GenSys.Point.IPoint.eventPointChanged">
      <summary>This event is raised whenever <see cref="P:Corning.GenSys.Point.IPoint.CurrentValue">CurrentValue</see> changes following rules defined by <see cref="P:Corning.GenSys.Point.IPoint.MonChangePercent">MonChangePercent</see>
            and <see cref="P:Corning.GenSys.Point.IPoint.MonChangeValue">MonChangeValue</see> properties.</summary>
    </member>
    <member name="E:Corning.GenSys.Point.IPoint.eventFault">
      <summary>This event is raised when the <see cref="P:Corning.GenSys.Point.IPoint.CurrentValue">CurrentValue</see> crosses one of the thresholds.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.IPoint`1">
      <summary>Equivalent to IPoint&lt;TValue, TValue&gt;</summary>
    </member>
    <member name="T:Corning.GenSys.Point.IPoint`2">
      <summary>
        <para>Strongly typed interface derived from <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see>.</para>
        <para>This is the interface realized by <see cref="!:Corning.GenSys.Point.CPoint&lt;TValue,TRaw&gt;">CPoint&lt;TValue,TRaw&gt; Class</see> and <see cref="!:Corning.GenSys.Point.CPointProxy&lt;TValue,TRaw&gt;">CPointProxy&lt;TValue,TRaw&gt;
            Class</see>.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint`2.CurrentValue">
      <summary>See <see cref="P:Corning.GenSys.Point.IPoint`2.CurrentValue">CurrentValue Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint`2.CurrentValueCached">
      <summary>See <see cref="P:Corning.GenSys.Point.IPoint`2.CurrentValueCached">CurrentValueCached Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint`2.Increment">
      <summary>See <see cref="P:Corning.GenSys.Point.IPoint`2.Increment">Increment Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint`2.RawValue">
      <summary>See <see cref="P:Corning.GenSys.Point.IPoint`2.RawValue">RawValue Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint`2.SetPointValue">
      <summary>See <see cref="P:Corning.GenSys.Point.IPoint`2.SetPointValue">SetPointValue Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint`2.MinSettableValue">
      <summary>See <see cref="P:Corning.GenSys.Point.IPoint`2.MinSettableValue">MinSettableValue Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint`2.MaxSettableValue">
      <summary>See <see cref="P:Corning.GenSys.Point.IPoint`2.MaxSettableValue">MaxSettableValue Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint`2.MonChangeValue">
      <summary>See <see cref="P:Corning.GenSys.Point.IPoint`2.MonChangeValue">MonChangeValue Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint`2.LowFaultThreshold">
      <summary>See <see cref="P:Corning.GenSys.Point.IPoint`2.LowFaultThreshold">LowFaultThreshold Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint`2.LowLowFaultThreshold">
      <summary>See <see cref="P:Corning.GenSys.Point.IPoint`2.LowLowFaultThreshold">LowLowFaultThreshold Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint`2.HighFaultThreshold">
      <summary>See <see cref="P:Corning.GenSys.Point.IPoint`2.HighFaultThreshold">HighFaultThreshold Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint`2.HighHighFaultThreshold">
      <summary>See <see cref="P:Corning.GenSys.Point.IPoint`2.HighHighFaultThreshold">HighHighFaultThreshold Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPoint`2.FaultHysteresis">
      <summary>See <see cref="P:Corning.GenSys.Point.IPoint`2.FaultHysteresis">FaultHysteresis Property</see>.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.IPointAttributeDelegate">
      <summary>
        <para>Interface to a point attribute delegate. This is the base interface for <see cref="T:Corning.GenSys.Point.IPointAttributeReadDelegate">IPointAttributeReadDelegate Interface</see> and
            <see cref="T:Corning.GenSys.Point.IPointAttributeWriteDelegate">IPointAttributeWriteDelegate Interface</see>.</para>
        <para>Implemented by <see cref="T:Corning.GenSys.Point.CPointAttributeDelegate`1">CPointAttributeDelegate&lt;TDelegate&gt; Class</see>.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.IPointAttributeDelegate.CheckDelegateType(System.Type,System.Type,System.Boolean)">
      <summary>
        <para>
          <font color="green" size="2" face="Consolas">
            <font color="green" size="2" face="Consolas">
              <font color="green" size="2" face="Consolas">Checks if the
            delegate contained in the class has a signature with parameter types consistent with a point types.</font>
            </font>
          </font>
        </para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointAttributeDelegate.PointAttribute">
      <summary>The point attribute the delegate is linked to.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointAttributeDelegate.Type">
      <summary>The type of the point attribute the delegate is associated to. See <see cref="P:Corning.GenSys.Point.IPointAttribute.AttribType">AttribType Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointAttributeDelegate.Delegate">
      <summary>The delegate. The actual delegate signature is defined in sub classes.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.IPointAttributeDelegate.AttributeDelegateParameters">
      <summary>The delegate parameter.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.IPointAttributeReadDelegate">
      <summary>
        <para>Interface to a point attribute read delegate.</para>
        <para>Implemented by <see cref="T:Corning.GenSys.Point.CPointAttributeReadDelegate`1">CPointAttributeReadDelegate&lt;TAttrib&gt; Class</see>.</para>
      </summary>
    </member>
    <member name="T:Corning.GenSys.Point.IPointAttributeWriteDelegate">
      <summary>
        <para>Interface to a point attribute write delegate.</para>
        <para>Implemented by <see cref="T:Corning.GenSys.Point.CPointAttributeWriteDelegate`1">CPointAttributeWriteDelegate&lt;TAttrib&gt; Class</see></para>
      </summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointAttributeDelegate`1">
      <summary>Abstract class containing a point attribute delegate. This is the base class for <see cref="T:Corning.GenSys.Point.CPointAttributeReadDelegate`1">CPointAttributeReadDelegate&lt;TAttrib&gt;
            Class</see> and <see cref="T:Corning.GenSys.Point.CPointAttributeWriteDelegate`1">CPointAttributeWriteDelegate&lt;TAttrib&gt; Class</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointAttributeDelegate`1.#ctor(Corning.GenSys.Point.CPointAttribute,`0,System.Object)">
      <summary>
            Constructor used by derived classes. 
            </summary>
      <param name="oPointAttribute">
      </param>
      <param name="oDelegate">
      </param>
      <param name="objAttributeDelegateParameters">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointAttributeDelegate`1.CheckDelegateType(System.Type,System.Type,System.Boolean)">
      <summary>Checks if the delegate contained in the class has a signature with parameter types consistent with a point types.</summary>
      <param name="typeValue">
      </param>
      <param name="typeRaw">
      </param>
      <param name="bThrowException">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointAttributeDelegate`1.GetDelegateArgumentType">
      <summary>Abstract method. Gets the type used in the delegate signature</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointAttributeDelegate`1.PointAttribute">
      <summary>The point attribute the delegate is linked to.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointAttributeDelegate`1.Type">
      <summary>The type of the point attribute the delegate is associated to. See <see cref="P:Corning.GenSys.Point.IPointAttribute.AttribType">AttribType Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointAttributeDelegate`1.Delegate">
      <summary>The delegate. The actual delegate signature is defined in sub classes.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointAttributeDelegate`1.AttributeDelegateParameters">
      <summary>The delegate parameter.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointAttributeReadDelegate`1">
      <summary>Class containing a point attribute delegate used during read operations. The signature of the delegate is Func&lt;IPoint, object, TAttrib&gt;</summary>
      <typeparam name="TAttrib">The type of the point attribute the delegate is applied to.</typeparam>
    </member>
    <member name="T:Corning.GenSys.Point.CPointAttributeWriteDelegate`1">
      <summary>Class containing a point attribute delegate used during write operations. The signature of the delegate is Action&lt;TAttrib, IPoint, object&gt;</summary>
      <typeparam name="TAttrib">The type of the point attribute the delegate is applied to.</typeparam>
    </member>
    <member name="F:Corning.GenSys.Point.CPointInputOutputAttributes.S">
      <summary>
            Singleton instance
            </summary>
    </member>
    <member name="T:Corning.GenSys.Point.IPointProxyServer">
      <summary>Interface realized by the <see cref="!:Corning.GenSys.Point.CPointProxyServer">CPointProxyServer Class</see></summary>
      <seealso cref="T:Corning.GenSys.Point.IPointsServerRemote">
      </seealso>
    </member>
    <member name="M:Corning.GenSys.Point.IPointProxyServer.GetPointProxy(System.String,System.Boolean)">
      <summary>
             Returns a point proxy (internal class) as an <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see> which accesses attribute of the remote point named strName.
            </summary>
      <param name="strName">Name of point on the remote point server.</param>
      <param name="bThrowExceptionOnPointNotFound">if set to <c>true</c> the method will throw an exception if the point is not found on the remote point server.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Corning.GenSys.Point.IPointProxyServer.PointServerRemote">
      <summary>
            Gets the point server remote as a <see cref="T:Corning.GenSys.Point.IPointsServerRemote">IPointsServerRemote Interface</see>.
            </summary>
      <value>
            The point server remote.
            </value>
    </member>
    <member name="P:Corning.GenSys.Point.IPointProxyServer.RemoteName">
      <summary>
            Gets the name of the remote point server.
            </summary>
      <value>
            The name of the remote point server.
            </value>
    </member>
    <member name="T:Corning.GenSys.Point.IPointsServerLocal">
      <summary>
        <para>This interface has to be implemented by the data server for local interaction</para>
        <para>WARNING: Using the <see cref="T:Corning.GenSys.Point.IPointsServerRemote">IPointsServerRemote Interface</see> whenever possible is prefered because that interface is carried through WCF
            and therefore allows remote interaction with points.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerLocal.GetPoint(System.String,System.Boolean)">
      <summary>
        <para>Returns the <see cref="T:Corning.GenSys.Point.IPoint">IPoint</see> with name strPointName in the point server. If the point cannot be found null is returned. Realized by <see cref="!:Corning.GenSys.Point.CPointServerBase.GetPoint">GetPoint
            Method</see></para>
      </summary>
      <param name="strPointName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerLocal.AddPoints(System.Collections.Generic.List{Corning.GenSys.Point.IPoint},System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Adds a list of points to node strNodeBreadCrumbName (character node separator is <see cref="!:CHierarchy.CHierarchyNode.ms_strBreadCrumbSeparator">ms_strBreadCrumbSeparator
            Field</see> ('.') ex: NodeParent.MyNode). if parent nodes do not exist they will be created automatically.
            Currently the node hierarchy is only used for settings.</summary>
      <param name="lstiPoint">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerLocal.AddPoints(System.Collections.Generic.List{Corning.GenSys.Point.IPoint})">
      <summary>
            Adds a list of points to the top node.
            Currently the node hierarchy is only used for settings.
            </summary>
      <param name="lstiPoint">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerLocal.AddPoint(Corning.GenSys.Point.IPoint,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>
            Adds a point to node strNodeBreadCrumbName (character node separator is '.' ex: NodeParent.MyNode).
            if a parent node do not exist it will be created automatically.
            Currently the node hierarchy is only used for settings.
            </summary>
      <param name="iPoint">
      </param>
      <param name="strNodeBreadCrumbName">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerLocal.AddPoint(Corning.GenSys.Point.IPoint)">
      <summary>
            Adds a point to the top node.
            Currently the node hierarchy is only used for settings.
            </summary>
      <param name="iPoint">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerLocal.RemovePoint(System.String)">
      <summary>Remove the point with name strPointName if found in the point server</summary>
      <param name="strPointName">The name of the point to be removed</param>
      <returns>The point that was just removed or null if the point was not found in the point server</returns>
    </member>
    <member name="P:Corning.GenSys.Point.IPointsServerLocal.ExtraPointsFromApplySettingsByName">
      <summary>Gets a dictionary containing points that were read from the XML file during a call to ApplySettings but that were not found in the Point Server. These points
            are usually optional points that are added after settings have been applied.</summary>
      <value>
            The name of the extra points from apply settings by.
            </value>
    </member>
    <member name="T:Corning.GenSys.Point.IPointsServerRemote">
      <summary>
            This interface has to be implemented by the data server
            </summary>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerRemote.EnumPoints(System.String[]@)">
      <summary>
            Returns a string list of all of the supported point names.
            </summary>
      <param name="astrPointNames">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerRemote.EnumAttributes(System.String[]@,System.String[]@,System.String[]@)">
      <summary>
            Returns a string list of all of the supported Attribute names.
            </summary>
      <param name="astrAttributeNames">
      </param>
      <param name="astrWritableAttributes">
      </param>
      <param name="astrAttributeType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerRemote.GetPoints(System.String[],System.String[],System.String[]@,System.String[]@)">
      <summary>This function returns an array of strings corresponding to the attributes requested for each Point Name supplied. The order of the PointData returned is as
            follows; all of the attributes for the 1st point in the same order as the astrAttributes list, followed by all of the attributes for the 2nd point, and so on
            for each name in astrPointNames. Realized by <see cref="O:Corning.GenSys.Point.CPointServerBase.GetPoints">GetPoints Method</see>.</summary>
      <param name="astrPointNames">
      </param>
      <param name="astrAttributes">
      </param>
      <param name="astrPointData">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.Length. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerRemote.GetBlobPoint(System.String,System.String,System.Object@,System.String@)">
      <summary>
            Same as above only overloaded for byte [][] to handle points of Image type, etc.
            </summary>
      <param name="strAttribute">
      </param>
      <param name="objPointData">
      </param>
      <param name="strPointName">
      </param>
      <param name="strErrorMessage">String set to null if there are no error or an error string otherwise</param>
      <returns>If false there was an error which would be reported in strErrorMessage</returns>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerRemote.SetPoints(System.String[],System.String[],System.String[],System.String[]@)">
      <summary>
            This function sets the corresponding PointData value to each of the Attributes for a given PointName
            using the same ordering as described in the GetPoints command.   Note:  The system should be able
            to rely that the point attribute values are literally synchronously set in the same order as is
            interpreted by this command.  This allows sequences that depend on other point values being set
            first to occur in the same transaction without requiring multiple commands. 
            </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrAttributes">
      </param>
      <param name="astrPointData">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.Length. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerRemote.SetBlobPoint(System.String,System.String,System.Object,System.String@)">
      <summary>
            Same as above only overloaded for byte [][] to handle setting points of type Image, etc. 
            </summary>
      <param name="strPointName">
      </param>
      <param name="strAttribute">
      </param>
      <param name="objPointData">
      </param>
      <param name="strErrorMessage">String set to null if there are no error or an error string otherwise</param>
      <returns>If false there was an error which would be reported in strErrorMessage</returns>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerRemote.SubscribeFaults(System.String[],System.String[]@)">
      <summary>
            This function registers with the system to be notified asynchronously when there is a change in
            fault status for any PointName in the supplied list.
            </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.Length. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerRemote.UnSubscribeFaults(System.String[],System.String[]@)">
      <summary>
            This function clears any registration with the system regarding fault notifications for each
            PointName supplied in the list.
            </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.Length. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerRemote.SubscribePointChange(System.String[],System.String[],System.String[],System.String[]@)">
      <summary>
            This function registers with the system to be notified asynchronously when there is a change in
            the absolute value of a point that is a) greater than the supplied PointChangePercent or
            b) greater than the PointChangeValue.   If a negative value is supplied for PointChangePercent
            or PointChangeValue than this check is not performed.   If a value of zero is supplied for
            PointChangePercent or PointChangeValue than a notification will be generated EVERY time the value
            of this point is updated (even if it is updated with the same value).   For a string type, any
            positive value will provide an update when the string has changed.
            </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrPointChangePercent">
      </param>
      <param name="astrPointChangeValue">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.Length. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerRemote.UnSubscribePointChange(System.String[],System.String[]@)">
      <summary>
            This function clears any registration with the system regarding fault notifications for each
            PointName supplied in the list.
            </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.Length. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="T:Corning.GenSys.Point.IPointsServerReply">
      <summary>
        <para>An object implementing this interface needs to be supplied to the point server so that it can send asynchronous replies to registered clients.</para>
        <para>Realized by
            classes <see cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF">PointsInterfaceClient_WCF</see>, <see cref="T:Corning.GenSys.Point.CPointProxyServer">CPointProxyServer</see>, <see cref="T:Corning.GenSys.PointServerGui.UCPointServerGui">UCPointServerGui</see>, <see cref="T:Corning.GenSys.Point.CPointserverNotifHandler">CPointserverNotifHandler</see>.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerReply.FaultNotification(System.String[],System.String[],System.String[],System.String[])">
      <summary>
            This function provides an asynchronous notification that a fault change has occurred on a point
            that was previously subscribed to.  Along with the point names, this function also provides the
            associated attribute, value and threshold.
            </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrFaultAttribute">
      </param>
      <param name="astrFaultValue">
      </param>
      <param name="astrFaultThreshold">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.IPointsServerReply.PointChangeNotification(System.String[],System.String[],System.String[],System.String[])">
      <summary>
            This function provides an asynchronous notification that a point value has changed (exceeding the
            specified value or percent change) on a point that was previously subscribed to.  Along with the
            point names, this function also provides the new point value.   The change percent (or change value)
            that caused the PointChangeNotification to occur is also sent with this notification.
            </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrPointValue">
      </param>
      <param name="astrPointChangePercent">
      </param>
      <param name="astrPointChangeValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Camera.ICamera.SetRoi(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
            Sets the region of interrest
            </summary>
      <param name="StartX">
      </param>
      <param name="StartY">
      </param>
      <param name="SizeX">
      </param>
      <param name="SizeY">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Camera.ICamera.GetSingleImage">
      <summary>
            This method is valid only when the camera is not in continuous capture mode. It generate a software 
            trigger and capture a single frame.
            </summary>
      <returns>An object realizing the IImage interface allowing access to the captured frame</returns>
    </member>
    <member name="M:Corning.GenSys.Camera.ICamera.StartContinuousSoftwareCaptureWithEvents(System.Int32,System.Boolean,System.UInt32)">
      <summary>
            Start continuous frame capture with software trigger. Uses the event method for the retreival of frames.
            Whenever a frame is captured it is placed in a circular buffer and a eventFrameReady event is fired and the
            frame is part of the event argument. 
            </summary>
      <param name="nNumBuffers">The number of frame buffer in the circular buffer</param>
      <param name="bAutomaticSoftwareTrigger">If set to true software trigger are sent automatically with a period set
            by parameter unDelayBetweenTriggers_ms
            If set to false software triggers need to be sent by calling method SendSoftwareTrigger</param>
      <param name="unDelayBetweenTriggers_ms">The period at which software triggers are generated. This parameter is
            ignored if bAutomaticSoftwareTrigger is set to false</param>
      <returns>true if successful false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Camera.ICamera.StartContinuousSoftwareCaptureWithQueue(System.Int32,System.Boolean,System.UInt32)">
      <summary>
            Start continuous frame capture with software trigger. Uses the queuing method for the retreival of frames.
            Whenever a frame is captured it is placed in a circular buffer and can be retreived with a call to 
            method GetImageFromQeue.
            <param name="nNumBuffers">The number of frame buffer in the circular buffer</param><param name="bAutomaticSoftwareTrigger">If set to true software trigger are sent automatically with a period set
            by parameter unDelayBetweenTriggers_ms
            If set to false software triggers need to be sent by calling method SendSoftwareTrigger</param><param name="unDelayBetweenTriggers_ms">The period at which software triggers are generated. This parameter is
            ignored if bAutomaticSoftwareTrigger is set to false</param><returns>true if successful false otherwise</returns></summary>
    </member>
    <member name="M:Corning.GenSys.Camera.ICamera.SendSoftwareTrigger">
      <summary>
            Valid only after a call to methods StartContinuousSoftwareCaptureWithEvents or StartContinuousSoftwareCaptureWithQueue
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Camera.ICamera.StartContinuousHardwareCaptureWithEvents(System.Int32)">
      <summary>
            Start continuous frame capture with hardware trigger. Uses the event method for the retreival of frames.
            Whenever a frame is captured it is placed in a circular buffer and a eventFrameReady event is fired and the
            frame is part of the event argument. 
            </summary>
      <param name="nNumBuffers">The number of frame buffer in the circular buffer</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Camera.ICamera.StartContinuousHardwareCaptureWithQueue(System.Int32)">
      <summary>
      </summary>
      <param name="nNumBuffers">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Camera.ICamera.StopContinuousCaptureSync">
      <summary>
            Request the continuous capture to stop and does not return until it has stopped 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Camera.ICamera.GetImageFromQeue(System.UInt32)">
      <summary>
            Valid if the camera is in continuous capture mode using the queuing method for the retreival of frames.
            This method will block for up to unTimeout_ms miliseconds if no frame is available
            </summary>
      <param name="unTimeout_ms">The maximum miliseconds themethod will block</param>
      <returns>The next frame in the circular buffer since the last call to this method or null in case of timeout</returns>
    </member>
    <member name="E:Corning.GenSys.Camera.ICamera.eventFrameReady">
      <summary>
            Valid if the camera is in continuous capture mode using the event method for the retreival of frames.
            In this mode this event is fired each time a frame is captured
            </summary>
    </member>
    <member name="T:Corning.GenSys.DirCleaner.IDirCleaner">
      <summary>Interface realized by the <see cref="!:CDirCleaner">CDirCleaner Class</see></summary>
    </member>
    <member name="M:Corning.GenSys.Image.IImage.GetImageArray(System.Array@,System.Boolean,System.Boolean)">
      <summary>
            Returns a copy of the image frame using the ordering and byte packing options specified
            </summary>
      <param name="arrayOpenCvImage">
      </param>
      <param name="bRowMajorOrder">
      </param>
      <param name="bPacked">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Image.IImage.GetImageAsBitmap(System.Drawing.Bitmap@,System.Boolean)">
      <summary>
            Returns a copy of the frame in the pre allocated bitmap object oBitmap.
            oBitmap should be allocated such that oBitmap.Height = FrameHeight
            and oBitmap.Width =  FrameWidth.
            </summary>
      <param name="oBitmap">
      </param>
      <param name="bRowMajorOrder">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Image.IImage.ReleaseImage">
      <summary>
            This method should be called to return the buffer used to store the frame
            to memory or the buffer pool depending on the buffering system type
            </summary>
    </member>
    <member name="M:Corning.GenSys.Image.IImage.DisplayImageToWindow(System.Object)">
      <summary>
            Displays this image to the handle of the supplied window
            </summary>
      <param name="oWindowToDisplayOn">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Image.IImage.SaveImageToFile(System.String,System.String)">
      <summary>
            Writes out the image to the supplied filename using the format requested with the supplied file type
            </summary>
      <param name="strFileName">
      </param>
      <param name="strFileType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Image.IImage.GetImage">
      <summary>
            Returns a System.Drawing.Image contained in the IImage
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Image.IImage.GetImage(System.Drawing.Imaging.ImageFormat)">
      <summary>
            Returns a System.Drawing.Image contained in the IImage
            </summary>
      <param name="oImageFormat"> Converts to the ImageFormat if necessary</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Image.IImage.SaveImageToFile(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>
            Writes out the image to the supplied filename using the ImageFormat requested.
            </summary>
      <param name="strFileName"> The path and filename of the stored image. </param>
      <param name="oImageFormat">The format of the stored image. JPEG, BMP, PNG etc</param>
      <returns>
      </returns>
    </member>
    <member name="P:Corning.GenSys.Image.IImage.IsDisplayImageToWindowSupported">
      <summary>
            Returns true if this implementation supports displaying the image to a window
            </summary>
      <returns>Returns true if this implementation supports displaying the image to a window</returns>
    </member>
    <member name="P:Corning.GenSys.Image.IImage.IsSaveImageToFileSupported">
      <summary>
            Returns true if this implementation supports saving the image to file
            </summary>
      <returns>Returns true if this implementation supports saving the image to file</returns>
    </member>
    <member name="P:Corning.GenSys.Image.IImage.Frame">
      <summary>
            Returns the internal object containing the frame
            </summary>
    </member>
    <member name="P:Corning.GenSys.Image.IImage.PixelStorageType">
      <summary>
            Returns the data type used to store a single pixel
            </summary>
    </member>
    <member name="P:Corning.GenSys.Image.IImage.ShortArrayCopy">
      <summary>
            Returns a copy of the frame where each pixel is stored in a short
            </summary>
    </member>
    <member name="P:Corning.GenSys.Image.IImage.ByteArrayCopy">
      <summary>
            Returns a copy of the frame where each pixel is stored in a byte
            </summary>
    </member>
    <member name="P:Corning.GenSys.Image.IImage.Height">
      <summary>
            Returns the height of the frame
            </summary>
    </member>
    <member name="P:Corning.GenSys.Image.IImage.Width">
      <summary>
            Returns the width of the frame
            </summary>
    </member>
    <member name="P:Corning.GenSys.Image.IImage.Length">
      <summary>
            Returns the Length of the array containing the frame
            </summary>
    </member>
    <member name="P:Corning.GenSys.Image.IImage.FrameNumber">
      <summary>
            Returns the frame number or null if not available
            </summary>
    </member>
    <member name="P:Corning.GenSys.Image.IImage.TriggerCount">
      <summary>
            Returns the trigger count or null if not available
            </summary>
    </member>
    <member name="P:Corning.GenSys.Image.IImage.MissedFrames">
      <summary>
            Returns the number of nissed frame from the start of aquisition to the time
            the current frame was captured
            MissedFrames = TriggerCount - FrameNumber
            </summary>
    </member>
    <member name="P:Corning.GenSys.Image.IImage.SerialOfCameraThatTookThisImage">
      <summary>
            Stores the serial of the camera  that took this image so consumers of this image can identify where the image came from
            </summary>
    </member>
    <member name="P:Corning.GenSys.Image.IImage.strImageFormat">
      <summary>
            Gets the image format description (preferrably returning one of the standard strings from the ImageTypeString class).
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.FeatureTypeName">
      <summary>
            The name of the feature type detected
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.FeatureType">
      <summary>
            The constant integer value that is always associated with this Feature type (offered to allow faster comparisons)
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.FeatureID">
      <summary>
             A unique ID associated with this particular feature instance
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.Density">
      <summary>
            The percent density of this feature in the range of 0 (min) to 100 (max)
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.Count">
      <summary>
            The count associated with the amount of this feature
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.AssociatedTimeStamp">
      <summary>
            Any timestamp associated with when the image associate with this feature vector was acquired
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.AssociatedCameraSerial">
      <summary>
            The reference of the ICamera object associated with the image used for this processing
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.TriggerCnt">
      <summary>
            The trigger count of the image associated with this image processing
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.FrameNum">
      <summary>
            The frame number of the image associated with this image processing
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.DUTLoc">
      <summary>
            Any location information (if available) associated with the device under test (DUT) position
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.SensorLoc">
      <summary>
            Any location information (if available) associated with the Sensor location
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.BrightnessMean">
      <summary>
            The mean of the brightness
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.BrightnessStdDev">
      <summary>
            The brightness standard deviation
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.BrightnessMode">
      <summary>
            The mean \ most common brightness 
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.BrigthnessAggregate">
      <summary>
            The sum of all of the pixel brightness providing energy information
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.MajorAxis">
      <summary>
            The X,Y pixel endpoints of the longest line that can be drawn through the object
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.MajorAxisAngle">
      <summary>
            Angle between the Major Axis and the x axis of the image in degrees
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.MajorAxisLength">
      <summary>
            The pixel length of the major axis
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.MinorAxis">
      <summary>
            The pixel X,Y endpoints of the shortest line that can be drawn through the object
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.MinorAxisAngle">
      <summary>
            The Angle between the Minor Axis and the x axis of the image in degrees
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.MinorAxisWidth">
      <summary>
            The pixel length of the minor axis (referred to as width of the Feature)
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.Perimeter">
      <summary>
            The perimeter of the feature (in pixels)
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.Area">
      <summary>
            The area of the feature (in square pixels)
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.BoundingBoxArea">
      <summary>
            The area of the bounding box of this feature (in square pixels)
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.Centroid">
      <summary>
            The center of this feature
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.WeightedCentroid">
      <summary>
            The weighted center (i.e. the center of the brightness) of this feature
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.SelectedImage">
      <summary>
             A reference to the image selected for display
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFeature`1.AnnotatedImage">
      <summary>
            A reference to the annotated image selected for display
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IFrameResults.AnnotatedImage">
      <summary>
             A reference to the image selected for display
            </summary>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.Init">
      <summary>
            Performs any required initialization that was not done at construction time but must be done prior to executing any of the below methods.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.SetDisplayWindow(`0)">
      <summary>
            Sets the display window where the image processing graphical results can be displayed.  Note the FeatureVector also have the ability to carry references
            to images (a normal image and a annotated image)
            </summary>
      <param name="oDisplayWindow">The windows display object that will be used for displaying Image processing images.  Note this is a generic to support a variety of display object types</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.GetDisplayImageNames(System.String[]@)">
      <summary>
            Used to get a list of names of all of the images that could be requested to be displayed to the configured window when the DisplayImage method is called
            </summary>
      <param name="astrDisplayImageNames">List of display image names.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.DisplayImage(System.String)">
      <summary>
            Request to display the image associated with the strDisplayImageName to the configured window
            </summary>
      <param name="strDisplayImageName">Name of the image to be displayed</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.EnableAutoDisplayImage(System.Boolean)">
      <summary>
            Enable or disable whether the image should automatically be displayed to the configured window when the ImageProcess method is called 
            </summary>
      <param name="bEnable">Images will automatically be displayed when bEnable is set to true and will not be automatically displayed when bEnable is false</param>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.EnableAnnotations(System.Boolean)">
      <summary>
            Enable drawing of image processing related annotaions to the displayed image 
            </summary>
      <param name="bEnable">Annotation display is enabled when bEnable == true</param>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.SetAnnotationSize(System.Int32)">
      <summary>
            Sets the size (in pixels) of the annotations drawn on any images drawn or included in the feature vector.
            </summary>
      <param name="nSize">
      </param>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.GetCurrentImageWidth">
      <summary>
            Returns the image width in pixels of the displayed image
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.GetCurrentImageHeight">
      <summary>
            Returns the image height in pixels of the displayed image
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.GetCopyOfLastProcessedImage(System.Int32,System.Int32,System.Drawing.Bitmap@)">
      <summary>
             Gets a Bitmap copy of the last processed image that was setup to be displayed downsized to the supplied width \ height parameter
            </summary>
      <param name="nWidth">The width of the Bitmap image to be returned by this function</param>
      <param name="nHeight">The height of the Bitmap image to be returned by this function</param>
      <param name="oLastProcessedImage">The returned bitmap image</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.GetCopyOfLastFullImageAsObject(`0@)">
      <summary>
            Gets a copy of the last full image in the same format as the configured display window (set as a instantiation time parameter)
            </summary>
      <param name="oLastFullImage">A copy of the last image that was configured to be displayed</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.SaveObjectImageToFile(`0,System.String)">
      <summary>
            Saves a supplied display image to the supplied filename in a standard format
            </summary>
      <param name="oDisplayImage">The display image to be saved to file</param>
      <param name="strFileName">The filename that the image will be saved to</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.LoadImageFromFile(System.String,Corning.GenSys.Image.IImage@,System.Boolean)">
      <summary>
            Loads an image from file to the display window and to the image processing buffer for use the next time ImageProcess is called
            </summary>
      <param name="strFileName">The filename to be loaded</param>
      <param name="bLeftJustifiedIf12Bit">Specifies the storage format if the image is 12 bits</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.LoadImageFromFile(System.String,Corning.GenSys.Image.IImage@)">
      <summary>
            Loads an image from file to the display window and to the image processing buffer for use the next time ImageProcess is called
            </summary>
      <param name="strFileName">The filename to be loaded</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.PerformCalibration">
      <summary>
             Used to initiate a calibration based on the supplied ImageProcConfigOptions and the current state of the image processing buffers \ intermediate calculations
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.GetImageProcConfigOptions(Corning.GenSys.Options.IOptions@)">
      <summary>
            Returns an object that can be used to query the list of Image Processing configurable items (as well as the configuration ranges if it numeric or the valid choices
            if it is string based.   This object also provides the methods to get \ set (if supported) the current value of the configurable items.   An example of the types of
            configurable items are thresholds, filter width \ height, etc.
            </summary>
      <param name="oImageProcConfigOptions">The object used to query \ set \ get the options </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.GetImageProcAlgoOptions(Corning.GenSys.Options.IOptions@)">
      <summary>
            Returns an object that can be used to query the list of Image Processing algorithm items (as well as the configuration ranges if it numeric or the valid choices
            if it is string based.   This object also provides the methods to get \ set (if supported) the current value of the configurable items.  An example of the types of 
            algorithms returned might be "derivative Algorithm v1", "Canny Algorithm v2", "v3 Production Algorithm", etc.
            </summary>
      <param name="oImageProcAlgoOptions">The object used to query \ set \ get the options </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.ProcessImage(Corning.GenSys.Image.IImage,System.Boolean,`1[]@,`2@)">
      <summary>
            Used to iniate the image processing routine for the image (which is supplied as a parameter)
            </summary>
      <param name="oImage">The image to do the processing on</param>
      <param name="bDisplayImageToWindow">Displays the image if true;  relies on the AutoDisplayImage setting if false</param>
      <param name="oFeatureVector">The returned results of the image processing</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.CreateFixedImageBuffers(System.Int16,System.Int16,System.Int32,System.Int32)">
      <summary>
            Used to create the image buffers IF they can be created ahead of time and reused (as determined by the method IsFixedBuffersSupported)
            </summary>
      <param name="sNumBuffers">Number of buffers to create</param>
      <param name="nNumBitsPerPixel">The number of bits used to store a pixel</param>
      <param name="nWidth">The width of the buffer</param>
      <param name="nHeight">The height of the buffer</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.GetFixedBufReference(System.Int32,System.Array@)">
      <summary>
            Gets a reference to the selected memory buffer
            </summary>
      <param name="nWhichBuf">Indicates which buffer is to be referenced</param>
      <param name="oBuf">The returned buffer reference</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.IsFixedBuffersSupported">
      <summary>
            Query to see if this implementation supports Fixed Image Buffers
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.GetImageProcSettableLines(System.String[]@,System.Boolean[]@)">
      <summary>
            Get a list of the names of all of the settable lines
            </summary>
      <param name="astrImageProcLines">list of all of the settable lines</param>
      <param name="bIsLinePointsSet">list of bools describing whether the points of the line have been set or not</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.GetImageProcSettablePoints(System.String[]@)">
      <summary>
            Get a list of the names of all of the settable points
            </summary>
      <param name="astrImageProcPoints">List of all of the settable points</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.SetImageLine``1(System.String,Corning.GenSys.ImageProc.CLine{``0})">
      <summary>
            Sets the coordinates of the points associated with the supplied line name
            </summary>
      <typeparam name="T">Used to set the type of the point (non floating point for pixels)</typeparam>
      <param name="strImageProcLine">string name of the line being set</param>
      <param name="oImageCoordLine">Point coordinates of the line</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.SetImagePoint``1(System.String,Corning.GenSys.ImageProc.ICartesionPoint{``0})">
      <summary>
            Sets the coordinates of the point associated with the supplied line name
            </summary>
      <typeparam name="T">Used to set the type of the point (non floating point for pixels)</typeparam>
      <param name="strImageProcPoint">String name of the point being set</param>
      <param name="oImageProcPoint">Coodinates of the point</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.DeleteImageLine``1(System.String)">
      <summary>
            Deletes the point information associated with the line name provided
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="strImageProcLine">Name of the line</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.DeleteImageLineNearPoint``1(Corning.GenSys.ImageProc.ICartesionPoint{``0})">
      <summary>
            Deletes the point information associated with the line closet to the supplied point
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="oImageProcNearPoint">Coordinates of a point closest to the line to be deleted</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.DeleteImagePoint``1(System.String)">
      <summary>
            Deletes the point coordinates associated with the supplied point name
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="strImageProcPoint">Name of the point coordinates to be deleted</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.DeleteImagePointNearPoint``1(Corning.GenSys.ImageProc.ICartesionPoint{``0})">
      <summary>
            Deletes the coordinates of the point that is closest to the supplied point
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="oImageProcNearPoint">Coordinates of a poitn closest to the coordinates of the point to be deleted</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.ConvertMousePointToImageProcPoint``1(Corning.GenSys.ImageProc.ICartesionPoint{``0},Corning.GenSys.ImageProc.ICartesionPoint{``0}@)">
      <summary>
            Converts the supplied screen pixel point coordinates into image processing point coordinates
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="oMousePoint">Coordinates of the screen pixel point</param>
      <param name="oImageProcPoint">Coordinates of the image processing point</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.SetFirstPtAndBeginSecondLinePt``1(Corning.GenSys.ImageProc.ICartesionPoint{``0})">
      <summary>
            Begins the graphical image display annotations associated with drawing a line in real time.  This function is called after the first point of the line is selected 
            and start drawing a line from this set point to the current mouse location.   This line is continuously updated until the SetImageLine or the ClearDrawPt methods are called.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="oFirstPoint">The first point of the line that was selected and all line drawing will draw from</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.ClearDrawPt">
      <summary>
            Stop any line drawing initiated by the method SetFirstPtAndBeginSecondLinePt
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.GetImageProcImageNames(System.String[]@)">
      <summary>
            Gets a list of all of the supported image names that can be displayed or provided with the FeatureVector
            </summary>
      <param name="strImageNames">Array of names or all of the supported images</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.SetImageProcImageNameAsCFeatureImage(System.String)">
      <summary>
            Sets the image reference that is returned as part of the FeatureVector Image Image
            </summary>
      <param name="strImageName">The Image name</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.SetImageProcImageNameAsCFeatureAnnotatedImage(System.String)">
      <summary>
            Sets the image reference that is returned as part of the FeatureVector Annotated Image
            </summary>
      <param name="strImageName">The Image name</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.GetCFeatureImageName(System.String)">
      <summary>
            Gets the image reference that is returned as part of the FeatureVector Image
            </summary>
      <param name="strImageName">The returned image name</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.GetCFeatureAnnotatedImageName(System.String)">
      <summary>
            Gets the image reference that is returned as part of the FeatureVector AnnotatedImage 
            </summary>
      <param name="strImageName">The returned image name</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.ImageProc.IImageProc`4.SaveImageToFile(System.String,System.String,System.Boolean)">
      <summary>
            Saves the requested image to the provided filename
            </summary>
      <param name="strImageName">Requested Image</param>
      <param name="strFileName">Filename to save the image to</param>
      <param name="bLeftJustifiedIf12Bit">Parameter used to indicate the desired bit shifting option associated with saving a 12 bit image</param>
      <returns>
      </returns>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IImageProc`4.Type">
      <summary>
            The role of this interface (ImageProcessing)
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IImageProc`4.Model">
      <summary>
            This parameter should return null for this interface unless there is some type of equipment model information that can be supplied.
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IImageProc`4.Name">
      <summary>
            The name of the class implementing this interface (i.e. CImage_Halcon)
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IImageProc`4.HWVer">
      <summary>
            Any hardware version information associated with the implementation of this interface
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProc.IImageProc`4.SWVer">
      <summary>
            The maintained software version of the implemention of this interface
            </summary>
    </member>
    <member name="T:Corning.GenSys.Logger.ELogLevel">
      <summary>
            Severity level assigned to all log messages
            </summary>
    </member>
    <member name="F:Corning.GenSys.Logger.ELogLevel.Trace">
      <summary>
            (0) The most insignificant log message. Used for debugging
            </summary>
    </member>
    <member name="F:Corning.GenSys.Logger.ELogLevel.Debug">
      <summary>
            (1) Used for debugging
            </summary>
    </member>
    <member name="F:Corning.GenSys.Logger.ELogLevel.Info">
      <summary>
            (2) Use to inform of what the software is doing
            </summary>
    </member>
    <member name="F:Corning.GenSys.Logger.ELogLevel.Warning">
      <summary>
            (3) The lowest error level. Operation can continue
            </summary>
    </member>
    <member name="F:Corning.GenSys.Logger.ELogLevel.Error">
      <summary>
            (4) Continued software useage may be compromised
            </summary>
    </member>
    <member name="F:Corning.GenSys.Logger.ELogLevel.Fatal">
      <summary>
            (5) Fatal error. The software cannot continue to operate and needs to be restarted.
            </summary>
    </member>
    <member name="F:Corning.GenSys.Logger.ELogLevel.Off">
      <summary>
            (6)
            </summary>
    </member>
    <member name="T:Corning.GenSys.Logger.ILogger">
      <summary>Interface used for logging in the source code with various logging levels.  Objects realizing this interface are preferably created by
            the <see cref="!:CLoggerFactory">CLoggerFactory Class</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.Logger.ILogger.Log(Corning.GenSys.Logger.ELogLevel,System.String)">
      <summary>Sends a string to the logger objects along with a logging level. It is expected that the object realizing this interface will send the string to various
            logging targets based on the logging level.</summary>
    </member>
    <member name="M:Corning.GenSys.Logger.ILogger.LogException(Corning.GenSys.Logger.ELogLevel,System.String,System.Exception)">
      <summary>Sends a string to the logger objects along with a logging level and an exception. It is expected that the object realizing this interface will send the
            string and exception to various logging targets based on the logging level.</summary>
    </member>
    <member name="M:Corning.GenSys.Logger.ILogger.AddRichTextBoxTarget(System.String,System.String,System.Int32)">
      <summary>
        <para>Adds a RichTextBox as a target where log messages are displayed.</para>
        <para>This method should be called at the end of the Load event handler of the form containing the RichTextBox.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Logger.ILogger.RemoveAllRichTextBoxTarget">
      <summary>
        <para>Removes all RichTextBox targets where log messages are displayed.</para>
        <para>This method should be called in the OnSystemClosing handler of the main form.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Logger.ILogger.SetRichTextBoxLogLevel(Corning.GenSys.Logger.ELogLevel)">
      <summary>Log messages with a logging level above and equal to eLogLevel will be shown in the RichTextBox.</summary>
    </member>
    <member name="M:Corning.GenSys.Logger.ILogger.GetLogFileDirPaths">
      <summary>Returns a collection of file paths corresponding to log files created.</summary>
    </member>
    <member name="F:Corning.GenSys.Motion.EMotionDeviceState.Connected">
      <summary>Controller connection established but axis are disabled</summary>
    </member>
    <member name="F:Corning.GenSys.Motion.EMotionDeviceState.Enabled">
      <summary>State of axis before homing</summary>
    </member>
    <member name="F:Corning.GenSys.Motion.EMotionDeviceState.Homed">
      <summary>State of axis after homing sequence completed</summary>
    </member>
    <member name="F:Corning.GenSys.Motion.EMotionDeviceState.Ready">
      <summary>State after a successful move</summary>
    </member>
    <member name="F:Corning.GenSys.Motion.ECoordinateSystem.DeviceUnderTest">
      <summary>DUT == Device Under Test (i..e Sheet, Ribbon, etc.)</summary>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxis.SetMotionProfile(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            VBB_QUESTION: Shouldn't it be a double so that it is not possible to not specify a limit?
        </member>
    <member name="M:Corning.GenSys.Motion.IAxis.GetState">
      <summary>
            Retreives the state of the primary group the axis is belongs to.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxis.MoveAbsoluteSynch(Corning.GenSys.Motion.ECoordinateSystem,System.Double)">
      <summary>
            Synchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="dValue">The position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxis.MoveIncrementalSynch(Corning.GenSys.Motion.ECoordinateSystem,System.Double)">
      <summary>
            Synchronous motion by performing an incremental move
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="dValue">The relative amount to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxis.HaltMotion">
      <summary>
            Halts motion on this axis
            </summary>
      <returns>Returns true after the motion has stopped successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxis.ClearFaults">
      <summary>
            Clears faults on this axis
            </summary>
      <returns>Returns true after faults have been cleared. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxis.IsPositionWithinLimits(System.Double)">
      <summary>
      </summary>
      <param name="dPosition">Position in engineering units</param>
      <returns>
      </returns>
    </member>
    <member name="P:Corning.GenSys.Motion.IAxis.MotionAxisMappedType">
      <summary>
            This is what the application thinks the axis is.
            </summary>
    </member>
    <member name="P:Corning.GenSys.Motion.IAxis.MaxPosLimit">
            VBB_QUESTION: Shouldn't it be a double so that it is not possible to not specify a limit?
        </member>
    <member name="M:Corning.GenSys.Motion.IAxisGroup.HaltAllMotionAxis">
      <summary>
            Halts motion on all axes
            </summary>
      <returns>Returns true after the motion has stopped successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxisGroup.HaltMotion(Corning.GenSys.Motion.IAxis)">
      <summary>
            Halts motion on this axis
            </summary>
      <param name="iAxis">Motion is stopped on this Axis</param>///  
            <returns>Returns true after the motion has stopped successfully. Return false otherwise</returns></member>
    <member name="M:Corning.GenSys.Motion.IAxisGroup.ClearFaults">
      <summary>
            Clears faults on all axes
            </summary>
      <returns>Returns true after faults have been cleared. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxisGroup.ClearFaults(Corning.GenSys.Motion.IAxis)">
      <summary>
            Clears faults on this axis
            </summary>
      <param name="iAxis">Faults are cleared on this Axis</param>///  
            <returns>Returns true after faults have been cleared. Return false otherwise</returns></member>
    <member name="M:Corning.GenSys.Motion.IAxisGroup.MoveAbsoluteSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue)">
      <summary>
            Synchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxisGroup.MoveAbsoluteAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue,System.Double)">
      <summary>
            Asynchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxisGroup.MoveAbsoluteSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double)">
      <summary>
            Synchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxisGroup.MoveAbsoluteAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double,System.Double)">
      <summary>
            Asynchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxisGroup.MoveIncrementalSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue)">
      <summary>
            Synchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position offset from the current position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxisGroup.MoveIncrementalAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue,System.Double)">
      <summary>
            Asynchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position offset from the current position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxisGroup.MoveIncrementalSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double)">
      <summary>
            Synchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position offset from the current position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IAxisGroup.MoveIncrementalAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double,System.Double)">
      <summary>
            Asynchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position offset from the current position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="T:Corning.GenSys.Motion.CoordSystemConvertDelegate">
      <summary>Coordinate system conversions have to take place using knowledge outside the IMotion so a delegate must be provided if CoordSystem other than
            ECoordinateSystem.MOTION_AXIS_COORDINATES is used. The nullable double array specifies the axis positions using the order of X, Y, Z, Roll, Pitch, Yaw. A null
            is used to indicate that a particular axis is not applicable for the coordinate system conversion</summary>
      <param name="eFromCoordSystem">
      </param>
      <param name="eToCoordSystem">
      </param>
      <param name="axisgroupvalueFrom">
      </param>
      <param name="axisgroupvalueTo">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IMotion.AddMotionControllers(System.Collections.ObjectModel.Collection{Corning.GenSys.Motion.IMotionController})">
      <summary>
      </summary>
      <param name="colleciMotionController">
      </param>
      <returns>Array containing the name of the motion controllers that where not added because they were already
            contained in the Motion object.
            Returns null if all the controllers were added</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IMotion.MoveAbsoluteSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue)">
      <summary>
            Synchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IMotion.MoveAbsoluteAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue,System.Double)">
      <summary>
            Asynchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IMotion.MoveAbsoluteSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double)">
      <summary>
            Synchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IMotion.MoveAbsoluteAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double,System.Double)">
      <summary>
            Asynchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IMotion.MoveIncrementalSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue)">
      <summary>
            Synchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position offset from the current position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IMotion.MoveIncrementalAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue,System.Double)">
      <summary>
            Asynchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position offset from the current position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IMotion.MoveIncrementalSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double)">
      <summary>
            Synchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position offset from the current position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IMotion.MoveIncrementalAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double,System.Double)">
      <summary>
            Asynchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position offset from the current position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IMotionOLD.MoveAbsoluteSynch(Corning.GenSys.Motion.ECoordinateSystem,System.String,System.Double[])">
      <summary>
            Synchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="strAxisGroupName">
      </param>
      <param name="adAxisValue">The position where to move. The number of elements in the array must match the number of
            axis associated with strAxisGroupName</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IMotionOLD.MoveAbsoluteAsynch(Corning.GenSys.Motion.ECoordinateSystem,System.String,System.Double[],System.Double)">
      <summary>
            Asynchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="strAxisGroupName">
      </param>
      <param name="adAxisValue">The position where to move. The number of elements in the array must match the number of
            axis associated with strAxisGroupName</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IMotionOLD.MoveIncrementalSynch(Corning.GenSys.Motion.ECoordinateSystem,System.String,System.Double[])">
      <summary>
            Synchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="strAxisGroupName">
      </param>
      <param name="adAxisValue">The position offset from the current position where to move. The number of elements in
            the array must must match the number of axis associated with strAxisGroupName</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.IMotionOLD.MoveIncrementalAsynch(Corning.GenSys.Motion.ECoordinateSystem,System.String,System.Double[],System.Double)">
      <summary>
            Asynchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="strAxisGroupName">
      </param>
      <param name="adAxisValue">The position offset from the current position where to move. The number of elements in
            the array must must match the number of axis associated with strAxisGroupName</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.SystemSettings.IObjectSetting.SerializeToString(System.String@)">
      <summary>This method serializes the object realizing the interface to a string.</summary>
      <param name="strSerialization">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.SystemSettings.IObjectSetting.ApplySettingsFromString(System.String)">
      <summary>This method deserializes the string passed to it and use the values of the members of the deserialized object to set the values of the members of the object
            realizing IObjectSettings. Alternatively it is possible to parse the string strSerialization and use the values contained in that string to directly initialize
            he members of the object realizing IObjectSettings.</summary>
      <param name="strSerialization">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Corning.GenSys.SystemSettings.IObjectSetting.ObjectSettingName">
      <summary>
            A name for the object. This is needed when collection of objects are serialize to a single file.
            The name is then used to apply the settings to the correct object. (Not yet implemented)
            </summary>
    </member>
    <member name="T:Corning.GenSys.Threading.ThreadStateEnum">
      <summary>
            Indicates the current Thread State.
            </summary>
    </member>
    <member name="T:Corning.GenSys.Threading.ThreadDelay">
      <summary>
            Specifies whether Action is called Periodically OR again N mSec after a single execution of the Action.
            </summary>
    </member>
    <member name="F:Corning.GenSys.Threading.ThreadDelay.IsFromEndOfActionExecution">
      <summary>
            Action is called again N mSec after a single execution of the Action.
            </summary>
    </member>
    <member name="F:Corning.GenSys.Threading.ThreadDelay.IsPeriodic">
      <summary>
            Action is called at a periodic rate of N mSec. The delay from the end of a single execution to the start of the next one depends on how long the Action takes to execute.
            If the Action execution time is longer than the requested delay, Action is called again after a 1 mSec delay.
            </summary>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler.Start">
      <summary>
            Either creates and starts a new main thread or if the main thread is already running, queues Thread-Start command for when the main thread terminates.
            </summary>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler.Pause">
      <summary>
            Permits the Action currently being executed to finish then doesn't call the Action again until Pause is released with the Start() command.
            </summary>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler.Stop(System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler.Stop(System.Action,System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler.StopThreadAndWaitUntilStopped(System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler.WaitForThreadToStop(System.Object)">
      <summary>
            Waits for the main thread to stop. A timeout is specified to determine how long to wait before.
            </summary>
      <param name="nWaitTimeIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns True if the thread stopped withing the specified time period, otherwise false</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler.SetThreadStopCallbackAction(System.Action)">
      <summary>
            Sets the method which is invoked when the thread stops.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler.SetThreadPriority(System.Threading.ThreadPriority)">
      <summary>
            Sets the thread priority. Stops and restarts the thread if the priority changes. 
            </summary>
      <param name="oThreadPriority">The new thread priority.</param>
      <returns>Returns void</returns>
    </member>
    <member name="P:Corning.GenSys.Threading.IThreadHandler.DelayInterval">
      <summary>
            Sets/Gets the amount of time to wait after a Action completes, while in the "Running" state, before calling the Action again.
            </summary>
    </member>
    <member name="P:Corning.GenSys.Threading.IThreadHandler.ThreadState">
      <summary>
            This routine returns the Thread state.
            </summary>
      <returns>Returns the Thread state.</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`1.Start">
      <summary>
            Either creates and starts a new main thread or if the main thread is already running, queues Thread-Start command for when the main thread terminates.
            </summary>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`1.Pause">
      <summary>
            Permits the Action currently being executed to finish then doesn't call the Action again until Pause is released with the Start() command.
            </summary>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`1.Stop(System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`1.Stop(System.Action,System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`1.Stop(System.Action{`0},`0,System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <param name="oActionObject"> The parameter to pass with the called Action when the thread stops.</param>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`1.StopThreadAndWaitUntilStopped(System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`1.SetThreadStopCallbackAction(System.Action)">
      <summary>
            Sets the method which is invoked when the thread stops.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`1.SetThreadStopCallbackAction(System.Action{`0},`0)">
      <summary>
            Sets the method and its passed parameter which is invoked when the thread stops.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <param name="oActionObject"> The parameter to pass with the called Action when the thread stops.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`1.SetThreadPriority(System.Threading.ThreadPriority)">
      <summary>
            Sets the thread priority. Stops and restarts the thread if the priority changes. 
            </summary>
      <param name="oThreadPriority">The new thread priority.</param>
      <returns>Returns void</returns>
    </member>
    <member name="P:Corning.GenSys.Threading.IThreadHandler`1.DelayInterval">
      <summary>
            Sets/Gets the amount of time to wait after a Action completes, while in the "Running" state, before calling the Action again.
            </summary>
    </member>
    <member name="P:Corning.GenSys.Threading.IThreadHandler`1.ThreadState">
      <summary>
            This routine returns the Thread state.
            </summary>
      <returns>Returns the Thread state.</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`2.Start">
      <summary>
            Either creates and starts a new main thread or if the main thread is already running, queues Thread-Start command for when the main thread terminates.
            </summary>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`2.Pause">
      <summary>
            Permits the Action currently being executed to finish then doesn't call the Action again until Pause is released with the Start() command.
            </summary>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`2.Stop(System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`2.Stop(System.Action,System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`2.Stop(System.Action{`1},`1,System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <param name="oActionObject"> The parameter to pass with the called Action when the thread stops.</param>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`2.StopThreadAndWaitUntilStopped(System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`2.WaitForThreadToStop(System.Object)">
      <summary>
            Waits for the main thread to stop. A timeout is specified to determine how long to wait before.
            </summary>
      <param name="nWaitTimeIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns True if the thread stopped withing the specified time period, otherwise false</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`2.SetThreadStopCallbackAction(System.Action)">
      <summary>
            Sets the method which is invoked when the thread stops.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`2.SetThreadStopCallbackAction(System.Action{`1},`1)">
      <summary>
            Sets the method and its passed parameter which is invoked when the thread stops.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <param name="oActionObject"> The parameter to pass with the called Action when the thread stops.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.IThreadHandler`2.SetThreadPriority(System.Threading.ThreadPriority)">
      <summary>
            Sets the thread priority. Stops and restarts the thread if the priority changes. 
            </summary>
      <param name="oThreadPriority">The new thread priority.</param>
      <returns>Returns void</returns>
    </member>
    <member name="P:Corning.GenSys.Threading.IThreadHandler`2.DelayInterval">
      <summary>
            Sets/Gets the amount of time to wait after a Action completes, while in the "Running" state, before calling the Action again.
            </summary>
    </member>
    <member name="P:Corning.GenSys.Threading.IThreadHandler`2.ThreadState">
      <summary>
            This routine returns the Thread state.
            </summary>
      <returns>Returns the Thread state.</returns>
    </member>
    <member name="T:Corning.GenSys.EthernetIp.EDirection">
      <summary>
            Direction in which the data flows
            </summary>
    </member>
    <member name="F:Corning.GenSys.EthernetIp.EDirection.Input">
      <summary>The data is on the remote device</summary>
    </member>
    <member name="F:Corning.GenSys.EthernetIp.EDirection.Output">
      <summary>The data is stored locally</summary>
    </member>
    <member name="T:Corning.GenSys.EthernetIp.CEtIpAssemblyData">
      <summary>Contains the information necessary to build an EtherNet/IP assembly. It is used by <see cref="!:Corning.GenSys.EthernetIp.CEtIpServerDevice(string,IEnumerable&amp;lt;CEtIpAssemblyData&amp;gt;,bool?)">CEtIpServerDevice
            Constructors</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.EthernetIp.CEtIpAssemblyData.#ctor(System.String,System.Int32,Corning.GenSys.EthernetIp.EDirection,System.Collections.Generic.IEnumerable{Corning.GenSys.EthernetIp.CEtIpTagData})">
      <param name="strName">A unique name for the EtherNet/IP assembly. Note that this is not used by the EtherNet/IP protocol but allows upper software layer to access data by name.</param>
      <param name="nId">The unique ID of the EtherNet/IP assembly. This is what is used by the client along with the IP address of the server to access the data in the assembly.</param>
      <param name="eDirection">The direction of the EtherNet/IP assembly. "Input" if tags composing the EtherNet/IP assembly are tags belonging to the server (this), "Output" if tags
            composing the EtherNet/IP assembly are tags belonging to the client.</param>
      <param name="ienumoEtIpTagData">Collection of tags composing the EtherNet/IP assembly. Collection of instances of <see cref="T:Corning.GenSys.EthernetIp.CEtIpTagData">CEtIpTagData Class</see>.</param>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpAssemblyData.Direction">
      <summary>The direction of the EtherNet/IP assembly. "Input" if tags composing the EtherNet/IP assembly are tags belonging to the server (this), "Output" if tags
            composing the EtherNet/IP assembly are tags belonging to the client. &lt;int&gt;</summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpAssemblyData.Id">
      <summary>The unique ID of the EtherNet/IP assembly. This is what is used by the client along with the IP address of the server to access the data in the assembly.</summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpAssemblyData.Name">
      <summary>The name of the EtherNet/IP assembly. Note that this is not used by the EtherNet/IP protocol but allows upper software layer to access data by name.</summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpAssemblyData.NameWithId">
      <summary>A concatenation of string concatenation of <see cref="P:Corning.GenSys.EthernetIp.CEtIpAssemblyData.Name">Name</see> and <see cref="P:Corning.GenSys.EthernetIp.CEtIpAssemblyData.Id">Id</see> properties.</summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpAssemblyData.EtIpTagDatas">
      <summary>Collection of tags composing the EtherNet/IP assembly. Collection of instances of <see cref="T:Corning.GenSys.EthernetIp.CEtIpTagData">CEtIpTagData Class</see>.</summary>
    </member>
    <member name="T:Corning.GenSys.EthernetIp.EPlcDataType">
      <summary>Data types found in a PLC</summary>
    </member>
    <member name="F:Corning.GenSys.EthernetIp.EPlcDataType.BOOL">
      <summary>Boolean. 1 bit long.</summary>
    </member>
    <member name="F:Corning.GenSys.EthernetIp.EPlcDataType.INT">
      <summary>Integer. 16 bit long.</summary>
    </member>
    <member name="F:Corning.GenSys.EthernetIp.EPlcDataType.DINT">
      <summary>Double integer. 32 bit long.</summary>
    </member>
    <member name="F:Corning.GenSys.EthernetIp.EPlcDataType.REAL">
      <summary>Floating point. 32 bit long.</summary>
    </member>
    <member name="F:Corning.GenSys.EthernetIp.EPlcDataType.STRING">
      <summary>String. Array of 8 bit long characters.</summary>
    </member>
    <member name="T:Corning.GenSys.EthernetIp.CEtIpTagData">
      <summary>Represents an EtherNet/IP tag.</summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpTagData.Direction">
      <summary>
            Specify if it is a local tag when the direction is output or a remote tag when the direction is input
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpTagData.PlcDataType">
      <summary>
            The type of the tag using PLC types 
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpTagData.ArraySize">
      <summary>
            Size of the array. 1 if the tag represents a single element.
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpTagData.Id">
      <summary>
            Id of the tag.
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpTagData.Description">
      <summary>
            Description of the tag
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpTagData.Name">
      <summary>
            Name of the tag. Is unique within an assembly
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpTagData.NameWithId">
      <summary>
            String composed of the tag name and Id separated by a '_' character
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpTagData.Units">
      <summary>
            Units of the tag value if applicable
            </summary>
    </member>
    <member name="T:Corning.GenSys.EthernetIp.IEtIpAssembly">
      <summary>
            Interface to an EtherNet/IP assembly.
            </summary>
    </member>
    <member name="M:Corning.GenSys.EthernetIp.IEtIpAssembly.ReadData(System.Boolean@,System.Byte[]@)">
      <summary>
            Method to read all the data from the EtherNet/IP assembly. Useful for debugging. It is orefered to use the tags to access data.
            </summary>
      <param name="bNewDataReceived">
      </param>
      <param name="abyData">
      </param>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.IEtIpAssembly.Id">
      <summary>
            Unique ID for the EtherNet/IP assembly. This is part of the EtherNet/IP protocol
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.IEtIpAssembly.Name">
      <summary>
            Name of the EtherNet/IP assembly.
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.IEtIpAssembly.NameWithId">
      <summary>
            String composed of the assembly name and Id separated by a '_' character
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.IEtIpAssembly.Direction">
      <summary>
            Direction of the EtherNet/IP assembly. This is part of the EtherNet/IP protocol although the direction can also be set at the tag level
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.IEtIpAssembly.Size_byte">
      <summary>
            Size in bytes of the the EtherNet/IP assembly.
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.IEtIpAssembly.TagInterfaceList">
      <summary>
            List of all the EtherNet/IP tags in the the EtherNet/IP assembly.
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.IEtIpAssembly.Connected">
      <summary>
            Indicates and allow the control of the the EtherNet/IP assembly connection to the server.
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.IEtIpAssembly.AssemblyData">
      <summary>
            The ddata that was used when the EtherNet/IP assembly was created.
            </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.IEtIpAssembly.Item(System.Int32)">
      <summary>
            Indexer to the EtherNet/IP tags using the tag id for index.
            </summary>
      <param name="nTagId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.IEtIpAssembly.Item(System.String)">
      <summary>
            Indexer to the EtherNet/IP tags using the tag name for index.
            </summary>
      <param name="strName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="E:Corning.GenSys.EthernetIp.IEtIpAssembly.OnConnect">
      <summary>
            Event raised when the EtherNet/IP assembly object connects to the server.
            </summary>
    </member>
    <member name="E:Corning.GenSys.EthernetIp.IEtIpAssembly.OnDisconnect">
      <summary>
            Event raised when the EtherNet/IP assembly object is disconnected from the server.
            </summary>
    </member>
    <member name="T:Corning.GenSys.Logger_Dummy.CLogger_Dummy">
      <summary>Identical to the <see cref="!:Logger.CLoggerDefault">CLoggerDefault Class</see>. This class is deprecated.</summary>
    </member>
    <member name="T:Corning.GenSys.Logger_Nlog.CLogger_Nlog">
      <summary>
        <para>This class is a wrapper of the <see cref="!:http://nlog-project.org/">NLog</see> library.</para>
        <para>It realizes the <see cref="T:Corning.GenSys.Logger.ILogger">ILogger Interface</see>.</para>
        <para>The recommended usage is to pass the <see cref="M:Corning.GenSys.Logger_Nlog.CLogger_Nlog.CreateLog(System.String)">CreateLog Method</see> as a parameter of the <see cref="M:Corning.GenSys.Logger.CLoggerFactory.SetLogCreationFunction">SetLogCreationFunction
            Method</see>.</para>
        <para>The use of the NLog implementation also requires that an NLog.config file be added to the project and set the "Copy to Output Directory" to "Copy Always".
            See the example section for a file example.</para>
      </summary>
      <example>
        <code title="NLog.config file example" description="" lang="CS">
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  autoReload="false"
                  internalLogToConsole="true"&gt;
             
                &lt;!--REPLACE AppName WITH YOUR APPLICATION NAME--&gt;
                &lt;variable name="logDirectory" value="${specialfolder:dir=:file=:folder=CommonApplicationData}/Corning Incorporated/AppName/logs/"/&gt;
             
              &lt;targets&gt;
                &lt;!--add your targets here--&gt;
                &lt;target name="LogFile" xsi:type="File" fileName="${logDirectory}Log_${date:format=yyyyMMdd}.log" layout="${longdate} | ${logger} | ${level}  ..  ${message}"/&gt;
                &lt;target name="LogFileTrace" xsi:type="File" fileName="${logDirectory}\LogTrace_${date:format=yyyyMMdd}.log" layout="${longdate} | ${logger} | ${level}  ..  ${message}"/&gt;
                &lt;target name="Console" xsi:type="ColoredConsole" layout="${longdate} | ${logger} | ${level}  ..  ${message}"/&gt;
                &lt;!--DO NOT MODIFY name AND xsi:type IN THE FOLLOWING LINE--&gt;
                &lt;target name="RichLogBuffer" xsi:type="RichBuffer" layout="${longdate}|${logger}| ${level} | ${message}"/&gt;
              &lt;/targets&gt;
             
              &lt;rules&gt;
                &lt;!--add your rules here--&gt;
                &lt;logger name="*" minLevel="Trace" writeTo="LogFileTrace" /&gt;
                &lt;logger name="*" minLevel="Info" writeTo="LogFile" /&gt;
                &lt;!--&lt;logger name="*" minLevel="Trace" writeTo="Console" /&gt;--&gt;
                &lt;!--DO NOT MODIFY writeTo IN THE FOLLOWING LINE--&gt;
                &lt;logger name="*" minLevel="Info" writeTo="RichLogBuffer" /&gt;
              &lt;/rules&gt;
              
              &lt;!--THE RICHTEXTBOX NAME SHOULD BE ADDED IN THE MAIN FORM ONLOAD EVENT HANDLER USING ILogger.AddRichTextBoxTarget.
                  See example:
                  ms_iLogger.AddRichTextBoxTarget("m_richTextBoxLog", "FOwnerOfRichControl", 2000); //Last number=Number of log lines
              --&gt;
             
              &lt;!--TO CREATE A LOGGER FOR A CLASS USING THE CLASS NAME USE THE FOLLOWING LINE:
                  private static ILogger ms_iLogger = CLoggerFactory.CreateLog(MethodBase.GetCurrentMethod().DeclaringType.Name);
              --&gt;
             
              &lt;!--ADD THE FOLLOWING STATIC CONSTRUCTOR TO THE MAIN APP
                  static Program()
                  {
                    CLoggerFactory.SetLogCreationFunction(CLogger_Nlog.CreateLog);
                    ms_iLogger = CLoggerFactory.CreateLog(MethodBase.GetCurrentMethod().DeclaringType.Name);
                    ms_iLogger.Log(ELogLevel.Info, "&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; APPLICATION START &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;");
                  }
              --&gt;
            &lt;/nlog&gt;</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.Logger_Nlog.CLogger_Nlog.#ctor(System.String)">
      <summary>Creates a CLogger_Nlog object realizing the <see cref="T:Corning.GenSys.Logger.ILogger">ILogger Interface</see>. The recommended usage is to pass this method as a parameter of the
            <see cref="!:Logger.CLoggerFactory.SetLogCreationFunction">SetLogCreationFunction Method</see>.
            <para>Parameter strLogName is the name of the logger which is used in the NLog.config file. See example in <see cref="T:Corning.GenSys.Logger_Nlog.CLogger_Nlog">overview</see></para></summary>
    </member>
    <member name="M:Corning.GenSys.Logger_Nlog.CLogger_Nlog.Log(Corning.GenSys.Logger.ELogLevel,System.String)">
      <summary>Realization of <see cref="M:Corning.GenSys.Logger.ILogger.Log(Corning.GenSys.Logger.ELogLevel,System.String)">Log Method</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.Logger_Nlog.CLogger_Nlog.LogException(Corning.GenSys.Logger.ELogLevel,System.String,System.Exception)">
      <summary>Realization of <see cref="M:Corning.GenSys.Logger.ILogger.LogException(Corning.GenSys.Logger.ELogLevel,System.String,System.Exception)">LogException Method</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.Logger_Nlog.CLogger_Nlog.CreateLog(System.String)">
      <summary>
        <para>Static method to create a CLogger_Nlog object realizing the <see cref="T:Corning.GenSys.Logger.ILogger">ILogger Interface</see>. The recommended usage is to pass this method as a
            parameter of the <see cref="!:Logger.CLoggerFactory.SetLogCreationFunction">SetLogCreationFunction Method</see>.</para>
        <para>Parameter strLogName is the name of the logger which is used in the NLog.config file. See example in <see cref="T:Corning.GenSys.Logger_Nlog.CLogger_Nlog">overview</see></para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Logger_Nlog.CLogger_Nlog.AddRichTextBoxTarget(System.String,System.String,System.Int32)">
      <summary>
        <para>Realization of <see cref="M:Corning.GenSys.Logger.ILogger.AddRichTextBoxTarget(System.String,System.String,System.Int32)">AddRichTextBoxTarget Method</see>.</para>
        <para>Adds a RichTextBox as a target where log messages are displayed.</para>
        <para>This method should be called at the end of the Load event handler of the form containing the RichTextBox.</para>
      </summary>
      <param name="strRichControlName">The name of the RichTextBox instance in the source code. Ex. "m_richtextboxLog"</param>
      <param name="nMaxNumLines">The maximum number of lines that should be displayed in the rich text box. (First line in first line out)</param>
    </member>
    <member name="M:Corning.GenSys.Logger_Nlog.CLogger_Nlog.RemoveAllRichTextBoxTarget">
      <summary>
        <para>Realization of <see cref="M:Corning.GenSys.Logger.ILogger.RemoveAllRichTextBoxTarget">RemoveAllRichTextBoxTarget Method</see>.</para>
        <para>Removes all RichTextBox targets where log messages are displayed.</para>
        <para>This method should be called in the OnSystemClosing handler of the main form.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Logger_Nlog.CLogger_Nlog.SetRichTextBoxLogLevel(Corning.GenSys.Logger.ELogLevel)">
      <summary>
        <para>Realization of <see cref="M:Corning.GenSys.Logger.ILogger.SetRichTextBoxLogLevel(Corning.GenSys.Logger.ELogLevel)">SetRichTextBoxLogLevel Method</see>.</para>
        <para>Only works for target which already have a logging rule. WARNING: This call may change the log level of another target if the a logging rule applies to
            other targets besides the intended target to be modified</para>
      </summary>
      <param name="strTargetName">
      </param>
      <param name="eLogLevel">
      </param>
    </member>
    <member name="M:Corning.GenSys.Logger_Nlog.CLogger_Nlog.SSetLogLevelForTarget(System.String,NLog.LogLevel)">
      <summary>
            Only works for target which already have a logging rule.
            WARNING: This call may change the log level of another target if the a logging rule applies to 
                     other targets besides the intended target to be modified
            </summary>
      <param name="strTargetName">
      </param>
      <param name="eLogLevel">
      </param>
    </member>
    <member name="M:Corning.GenSys.Logger_Nlog.CLogger_Nlog.SAddRichTextBoxTarget(System.String,System.String,System.Int32)">
      <summary>
        <para>Adds a RichTextBox as a target where log messages are displayed.</para>
        <para>This method should be called at the end of the Load event handler of the form containing the RichTextBox.</para>
        <para>Called by <see cref="M:Corning.GenSys.Logger_Nlog.CLogger_Nlog.AddRichTextBoxTarget(System.String,System.String,System.Int32)">AddRichTextBoxTarget Method</see>.</para>
      </summary>
      <param name="strRichControlName">The name of the RichTextBox instance in the source code. Ex. "m_richtextboxLog"</param>
      <param name="nMaxNumLines">The maximum number of lines that should be displayed in the rich text box. (First line in first line out)</param>
    </member>
    <member name="M:Corning.GenSys.Logger_Nlog.CLogger_Nlog.GetLogFileDirPaths">
      <summary>
        <para>Realization of <see cref="M:Corning.GenSys.Logger.ILogger.GetLogFileDirPaths">GetLogFileDirPaths Method</see>.</para>
        <para>Returns a collection of file paths corresponding to log files created.</para>
      </summary>
    </member>
    <member name="F:Corning.GenSys.Logger_Nlog.CTargetRichBuffer.ms_lstoLogEventInfoBuffer">
      <summary>
            Buffer containing all log messages received before the rich text box is cabable of displaying them
            </summary>
    </member>
    <member name="T:Corning.GenSys.Logger.CLoggerFactory">
      <summary>
        <para>Static class used to create logger object implementing the <see cref="T:Corning.GenSys.Logger.ILogger">ILogger Interface</see>. Using this factory makes it easy to replace the logger
            implementation as it requires only the line of code where the <see cref="M:Corning.GenSys.Logger.CLoggerFactory.SetLogCreationFunction(System.Func{System.String,Corning.GenSys.Logger.ILogger})">SetLogCreationFunction Method</see> is called to be
            changed.</para>
        <para>The call to the <see cref="M:Corning.GenSys.Logger.CLoggerFactory.SetLogCreationFunction(System.Func{System.String,Corning.GenSys.Logger.ILogger})">SetLogCreationFunction Method</see>needs to be done before any calls to the <see cref="M:Corning.GenSys.Logger.CLoggerFactory.CreateLog(System.String)">CreateLog
            Method</see>. An ideal place for this call is the first line in the Main() method of Program.cs.</para>
        <para>The GensysEasy application will setup all the dependencies and add the following line of code to Program.cs:
            CLoggerFactory.SetLogCreationFunction(Corning.GenSys.Logger_Nlog.CLogger_Nlog.CreateLog); which will set NLog as the default logger implementation.</para>
        <para>IMPORTANT: If the <see cref="M:Corning.GenSys.Logger.CLoggerFactory.SetLogCreationFunction(System.Func{System.String,Corning.GenSys.Logger.ILogger})">SetLogCreationFunction Method</see> is not called then the default creation function used will create
            loggers that will do nothing effectively disabling all logging operations.</para>
        <para>IMPORTANT: When using the NLog implementation (<see cref="T:Corning.GenSys.Logger_Nlog.CLogger_Nlog">CLogger_Nlog Class</see>) which is used by GenSys Easy generated application,
            it is also necessary to create a NLog.config file to unable any logging. An example can be found with the <see cref="T:Corning.GenSys.Logger_Nlog.CLogger_Nlog">CLogger_Nlog Class</see>.</para>
      </summary>
      <example>
        <code title="Logger factory useage example" description="" lang="CS">
            private static ILogger ms_iLogger;
             
            /// &lt;summary&gt;
            /// The main entry point for the application.
            /// &lt;/summary&gt;
            [STAThread]
            static void Main()
            {
                // The following line requires a reference to LoggerFactory as well as Logger_Nlog libraries
                CLoggerFactory.SetLogCreationFunction(Corning.GenSys.Logger_Nlog.CLogger_Nlog.CreateLog);
                ms_iLogger = CLoggerFactory.CreateLog("MyApplication");
                ms_iLogger.Log(ELogLevel.Info, "&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;");
                ms_iLogger.Log(ELogLevel.Info, "&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Application Start &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;");
                ms_iLogger.Log(ELogLevel.Info, "&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;");
            }
             
            class CMyClass1
            {
                public static ILogger ms_iLogger = CLoggerFactory.CreateLog(MethodBase.GetCurrentMethod().DeclaringType.Name);
                // or
                public static ILogger ms_iLogger = CLoggerFactory.CreateLog("CMyClass1");
            }</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.Logger.CLoggerFactory.SetLogCreationFunction(System.Func{System.String,Corning.GenSys.Logger.ILogger})">
      <summary>
        <para>Sets the delegate to be used to when the <see cref="M:Corning.GenSys.Logger.CLoggerFactory.CreateLog(System.String)">CreateLog Method</see> is called. The string parameter of the delegate is expected to be the name of the
            created logger.</para>
        <para>See usage example in the <see cref="T:Corning.GenSys.Logger.CLoggerFactory">overview</see> example.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Logger.CLoggerFactory.CreateLog(System.String)">
      <summary>
        <para>Invoke the delegate passed as parameter of the <see cref="M:Corning.GenSys.Logger.CLoggerFactory.SetLogCreationFunction(System.Func{System.String,Corning.GenSys.Logger.ILogger})">SetLogCreationFunction Method</see> to instantiate a new logger object realizing
            the <see cref="T:Corning.GenSys.Logger.ILogger">ILogger Interface</see>.Parameter strLogName is passed to the invoked delegate. </para>
        <para>See usage example in the <see cref="T:Corning.GenSys.Logger.CLoggerFactory">overview</see> example.</para>
      </summary>
    </member>
    <member name="T:Corning.GenSys.Logger.CLoggerDefault">
      <summary>This is the default logger implementation used by the <see cref="T:Corning.GenSys.Logger.CLoggerFactory">CLoggerFactory Class</see>. All the method calls are stubs and do nothing. Using this
            implementation disables all logging.</summary>
    </member>
    <member name="M:Corning.GenSys.Logger.CLoggerDefault.CreateLog(System.String)">
      <summary>
        <para>Stubbed implementation. The parameter is ignored, it returns a new CLoggerDefault object.</para>
        <para>This static method is the default log creation method used by <see cref="T:Corning.GenSys.Logger.CLoggerFactory">CLoggerFactory Class</see>.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Logger.CLoggerDefault.Log(Corning.GenSys.Logger.ELogLevel,System.String)">
      <summary>Stubbed implementation. Does not do anything.</summary>
    </member>
    <member name="M:Corning.GenSys.Logger.CLoggerDefault.LogException(Corning.GenSys.Logger.ELogLevel,System.String,System.Exception)">
      <summary>Stubbed implementation. Does not do anything.</summary>
    </member>
    <member name="M:Corning.GenSys.Logger.CLoggerDefault.AddRichTextBoxTarget(System.String,System.String,System.Int32)">
      <summary>Stubbed implementation. Does not do anything.</summary>
    </member>
    <member name="M:Corning.GenSys.Logger.CLoggerDefault.RemoveAllRichTextBoxTarget">
      <summary>Stubbed implementation. Does not do anything.</summary>
    </member>
    <member name="M:Corning.GenSys.Logger.CLoggerDefault.SetRichTextBoxLogLevel(Corning.GenSys.Logger.ELogLevel)">
      <summary>Stubbed implementation. Does not do anything.</summary>
    </member>
    <member name="M:Corning.GenSys.Logger.CLoggerDefault.GetLogFileDirPaths">
      <summary>Stubbed implementation. Returns an list containing an empty string ("")</summary>
    </member>
    <member name="M:Corning.GenSys.Motion.CAxisGroup_Base.MoveAbsoluteSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue)">
      <summary>
            Synchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.CAxisGroup_Base.MoveAbsoluteAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue,System.Double)">
      <summary>
            Asynchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.CAxisGroup_Base.MoveAbsoluteSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double)">
      <summary>
            Synchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.CAxisGroup_Base.MoveAbsoluteAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double,System.Double)">
      <summary>
            Asynchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.CAxisGroup_Base.MoveIncrementalSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue)">
      <summary>
            Synchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position offset from the current position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.CAxisGroup_Base.MoveIncrementalAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue,System.Double)">
      <summary>
            Asynchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position offset from the current position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.CAxisGroup_Base.MoveIncrementalSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double)">
      <summary>
            Synchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position offset from the current position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.CAxisGroup_Base.MoveIncrementalAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double,System.Double)">
      <summary>
            Asynchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position offset from the current position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.CMotion.AddMotionControllers(System.Collections.ObjectModel.Collection{Corning.GenSys.Motion.IMotionController})">
      <summary>
      </summary>
      <param name="colleciMotionController">
      </param>
      <returns>Array containing the name of the motionControllers that could not be added.
            null if successful</returns>
    </member>
    <member name="M:Corning.GenSys.Motion.CMotion.AddAxisGroupFromMotionController(System.String,Corning.GenSys.Motion.IAxisGroup)">
      <summary>
            Adds an axis group from a motion controller to the overall groups of CMotion using an
            "absolute" name composed of the motion controller name and axis group name as a prefix.
            This is require to ensure unique axis group and axis group names within CMotion.
            </summary>
      <param name="strMotionControllerName">
      </param>
      <param name="iAxisGroup">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Motion.CMotion.RemoveAxisGroupFromMotionController(System.String,Corning.GenSys.Motion.IAxisGroup)">
      <summary>
            Adds an axis group from a motion controller to the overall groups of CMotion using an
            "absolute" name composed of the motion controller name and axis group name as a prefix.
            This is require to ensure unique axis group and axis group names within CMotion.
            </summary>
      <param name="strMotionControllerName">
      </param>
      <param name="iAxisGroup">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Corning.GenSys.Motion.CMotionController_Base">
      <summary>
            WARNING: All axis groups must be created/added in the constructor
            </summary>
    </member>
    <member name="M:Corning.GenSys.Motion.CMotionController_Base.AddAxisGroup(Corning.GenSys.Motion.CAxisGroup_Base)">
      <summary>
            Create axis groups
            </summary>
    </member>
    <member name="M:Corning.GenSys.Motion_Virtual.CAxisGroup_Virtual.MoveAbsoluteSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue)">
      <summary>
            Synchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion_Virtual.CAxisGroup_Virtual.MoveAbsoluteAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue,System.Double)">
      <summary>
            Asynchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion_Virtual.CAxisGroup_Virtual.MoveAbsoluteSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double)">
      <summary>
            Synchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion_Virtual.CAxisGroup_Virtual.MoveAbsoluteAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double,System.Double)">
      <summary>
            Asynchronous motion to absolute position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion_Virtual.CAxisGroup_Virtual.MoveIncrementalSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue)">
      <summary>
            Synchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position offset from the current position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion_Virtual.CAxisGroup_Virtual.MoveIncrementalAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxisGroupValue,System.Double)">
      <summary>
            Asynchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxisGroupValue">The position offset from the current position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="M:Corning.GenSys.Motion_Virtual.CAxisGroup_Virtual.MoveIncrementalSynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double)">
      <summary>
            Synchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position offset from the current position where to move.</param>
      <returns>Returns true after the motion has completed successfully. Return false otherwise</returns>
    </member>
    <member name="M:Corning.GenSys.Motion_Virtual.CAxisGroup_Virtual.MoveIncrementalAsynch(Corning.GenSys.Motion.ECoordinateSystem,Corning.GenSys.Motion.IAxis,System.Double,System.Double)">
      <summary>
            Asynchronous motion to incremental position
            </summary>
      <param name="eCoordSystem">
      </param>
      <param name="iAxis">
      </param>
      <param name="dValue">The position offset from the current position where to move.</param>
      <returns>If the function is successful it will return a unique non zero identifier which will be used as an argument
            of eventCommandComplete to inform the client of the command completion
            If the function is unsuccessful it wil return 0</returns>
    </member>
    <member name="T:Corning.GenSys.Point.CAlarmRule">
      <summary>
        <para>This is an internal class.</para>
        <para>An alarm rule is a collection of "point rules" linked by OR or AND operators. A point rule is simply a point and a fault type and if a point has a fault of
            the specified type the point rule becomes true. The syntax for a point rule is as follows: [&lt;PointName&gt;,&lt;FaultType&gt;]. For example with a point
            named "Test1" a point rule could look as follows "[Test1,High]". In that example the point rule will be true if the point Test1 has a fault of type
            <see cref="F:Corning.GenSys.Point.EFaultType.High">High</see>. The fault type can also be negated by adding a third element "Not". For example the following point rule "[Test1,None,Not]" will be
            true whenever the point Test1 is in fault state other than <see cref="F:Corning.GenSys.Point.EFaultType.None">None</see>.</para>
        <para>Using point rules the alarm rule can be written using the syntax illustrated in the following examples:</para>
        <para>"OR([Test1,High],[Test1,HighHigh])". In this example the alarm rule will be true when point Test1 has a fault of type High or HighHigh.</para>
        <para>AND(OR([Test1,High],[Test1,HighHigh]),[Test2,None,Not])". In this example the alarm rule will be true when point Test1 has a fault of type High or HighHigh
            and when Test2 is in fault state other than None.</para>
      </summary>
    </member>
    <member name="F:Corning.GenSys.Point.CAlarmRule.m_lstPointFaultsUnresolved">
      <summary>
            List of point faults which do not contain a IPoint reference
            </summary>
    </member>
    <member name="F:Corning.GenSys.Point.CAlarmRule.m_bCanEvaluate">
      <summary>
            Is true when all PointFaults contained in the rule have a reference to an IPoint
            </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmRule.Evaluate(System.Boolean@,System.Boolean@,System.DateTime@,System.Collections.Generic.List{Corning.GenSys.Point.CPointRuleValue}@)">
      <summary>
            If the rule is disabled bActive and bActiveStateChanged will be false but m_bActive will change as necessary
            </summary>
      <param name="bActive">
      </param>
      <param name="bActiveStateChanged">
      </param>
      <param name="datetimeNow">
      </param>
      <param name="lstoPointRuleValues">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmRule.Acknowledge(System.DateTime,System.Boolean)">
      <summary>
      </summary>
      <param name="datetimeAlarmActiveEvent">
      </param>
      <param name="bAcknowledgeAllPrevious">
      </param>
      <returns>true if successfully acknowledged false otherwise</returns>
    </member>
    <member name="T:Corning.GenSys.Point.CAlarmManager">
      <summary>
        <para>An alarm manager contains a collection of references to objects realizing the <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see>. It also contains a collection of <see cref="T:Corning.GenSys.Point.CAlarmRule">CAlarmRule
            Class</see> realizing the <see cref="T:Corning.GenSys.Point.IAlarmRule">IAlarmRule Interface</see> which are evaluated each time a <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault Event</see> is raised on a point
            participating in a rule.</para>
        <para>It realizes the <see cref="T:Corning.GenSys.Point.IAlarmManager">IAlarmManager Interface</see>.</para>
      </summary>
    </member>
    <member name="F:Corning.GenSys.Point.CAlarmManager.m_dictPointFaultByName">
      <summary>
            Dictionary containing the fault values of all points subscribed to which are
            in use 
            </summary>
    </member>
    <member name="F:Corning.GenSys.Point.CAlarmManager.m_hashsetiPointServerLocal">
      <summary>
            List of unique point server used to retreive point reference from point name
            </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.#ctor(System.String)">
      <summary>Creates a new named CAlarmManager object.</summary>
      <param name="strName">The name of the created CAlarmManager object</param>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.AddPointServer(Corning.GenSys.Point.IPointsServerLocal)">
      <summary>Used to add PointServers or PointProxyServers to the AlarmManager.</summary>
      <param name="iPointsServerLocal">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.AddPoints(Corning.GenSys.Point.IPoint[])">
      <summary>Used to add points to the alarm manager.</summary>
      <param name="aiPoint">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.AddPoints(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPoint})">
      <summary>Used to add points to the alarm manager.</summary>
      <param name="ienumPoint">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.AddAlarmRule(System.String,System.String)">
      <summary>
        <para>Adds an alarm rule with a <see cref="F:Corning.GenSys.Point.EAlarmSeverity.Warning">Warning</see> severity along with a name for the alarm rule. The alarm rule name must be unique.
            Adding alarm rules with duplicate names will cause an exception. The actual alarm rule is added as a string which is interpreted by the alarm server. Not that
            the interpretation occurs only when the rule is added. No interpretation is performed after that to keep the code efficient.</para>
        <para>An alarm rule is a collection of "point rules" linked by OR or AND operators. A point rule is simply a point and a fault type and if a point has a fault of
            the specified type the point rule becomes true. The syntax for a point rule is as follows: [&lt;PointName&gt;,&lt;FaultType&gt;]. For example with a point
            named "Test1" a point rule could look as follows "[Test1,High]". In that example the point rule will be true if the point Test1 has a fault of type
            <see cref="F:Corning.GenSys.Point.EFaultType.High">High</see>. The fault type can also be negated by adding a third element "Not". For example the following point rule "[Test1,None,Not]" will be
            true whenever the point Test1 is in fault state other than <see cref="F:Corning.GenSys.Point.EFaultType.None">None</see>.</para>
        <para>Using point rules the alarm rule can be written using the syntax illustrated in the following examples:</para>
        <para>"OR([Test1,High],[Test1,HighHigh])". In this example the alarm rule will be true when point Test1 has a fault of type High or HighHigh.</para>
        <para>AND(OR([Test1,High],[Test1,HighHigh]),[Test2,None,Not])". In this example the alarm rule will be true when point Test1 has a fault of type High or HighHigh
            and when Test2 is in fault state other than None.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.AddAlarmRule(System.String,System.String,Corning.GenSys.Point.EAlarmSeverity,System.String)">
      <summary>
        <para>Adds an alarm rule along with a name for the alarm rule, a description of the alarm rule and an <paramref name="EAlarmSeverity">AlarmSeverity</paramref>. The alarm rule name must be
            unique. Adding alarm rules with duplicate names will cause an exception. The actual alarm rule is added as a string which is interpreted by the alarm server.
            Not that the interpretation occurs only when the rule is added. No interpretation is performed after that to keep the code efficient.</para>
        <para>An alarm rule is a collection of "point rules" linked by OR or AND operators. A point rule is simply a point and a fault type and if a point has a fault of
            the specified type the point rule becomes true. The syntax for a point rule is as follows: [&lt;PointName&gt;,&lt;FaultType&gt;]. For example with a point
            named "Test1" a point rule could look as follows "[Test1,High]". In that example the point rule will be true if the point Test1 has a fault of type
            <see cref="F:Corning.GenSys.Point.EFaultType.High">High</see>. The fault type can also be negated by adding a third element "Not". For example the following point rule "[Test1,None,Not]" will be
            true whenever the point Test1 is in fault state other than <see cref="F:Corning.GenSys.Point.EFaultType.None">None</see>.</para>
        <para>Using point rules the alarm rule can be written using the syntax illustrated in the following examples:</para>
        <para>"OR([Test1,High],[Test1,HighHigh])". In this example the alarm rule will be true when point Test1 has a fault of type High or HighHigh.</para>
        <para>AND(OR([Test1,High],[Test1,HighHigh]),[Test2,None,Not])". In this example the alarm rule will be true when point Test1 has a fault of type High or HighHigh
            and when Test2 is in fault state other than None.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.SetAlarmRuleDisabled(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IAlarmRule},System.Boolean)">
      <summary>
            Upon disabling only acknoledged alarms will be part of the disabled event. For unacknoledged alarms the
            Disabled event will be heldoff until they are acknowledged.
            For enabled alarms all alarms will be part of an enabled event. This event will be followed by a OnAlarm
            event for all the enabled alarms which are in the active state.
            </summary>
      <param name="ienumiAlarmRule">
      </param>
      <param name="bDisable">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.DisableAlarmRules(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IAlarmRule})">
      <summary>Disables a collection of alarm rules. If some of the alarms in the collection were enabled, a <see cref="E:Corning.GenSys.Point.CAlarmManager.OnAlarmDisabled">OnAlarmDisabled Event</see> will be raised with
            the list of newly disabled alarms as argument.</summary>
      <param name="ienumiAlarmRule">Collection of alarm rules to be disabled. A collection realizing IList&lt;IAlarmRule&gt; will be most efficient.</param>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.EnableAlarmRules(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IAlarmRule})">
      <summary>
        <para>Enables a collection of alarm rules. Note that if one of the alarm rules specified cannot be evaluated the alarm rule will remain in the Disabled state. In
            that case the function will return false for that alarm. All newly enabled alarm rules will be evaluated which could lead to the raising of <see cref="E:Corning.GenSys.Point.CAlarmManager.OnAlarm">OnAlarm
            Event</see> for some of the alarm rules.</para>
        <para>Previously if some of the alarms in the collection were disabled, a <see cref="E:Corning.GenSys.Point.CAlarmManager.OnAlarmEnabled">OnAlarmEnabled Event</see> would be raised with the list of newly enabled
            alarms as argument. This behavior is currently disabled.</para>
      </summary>
      <param name="ienumiAlarmRule">Collection of alarm rules to be enabled. A collection realizing IList&lt;IAlarmRule&gt; will be most efficient.</param>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.ForceRuleEvaluation(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IAlarmRule})">
      <summary>Causes the alarm rules passed to the method to be evaluated. This evaluation is usually only triggered by a point fault event on a point linked to an alarm
            rule.</summary>
      <param name="ienumiAlarmRule">Collection of alarm rules to be evaluated.</param>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.ForceAllRuleEvaluation">
      <summary>Forces the evaluation of all alarm rules contained in the alarm manager</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.MakeRule(System.String)">
      <summary>
            Make rule given a string of type command( [name,High], [$RuleName])
            </summary>
      <param name="strRule">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.MakePointRule(System.String)">
      <summary>
            Makes a point rule given a string of type [PointName, Low, Not] or [PointName, HighHigh]
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.GetPoint(System.String)">
      <summary>Gets the <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see> realized by a point object with name strName which is part of one of the PointServers or points referenced by the
            AlarmManager.</summary>
      <param name="strName">Name of the point to be retrieved.</param>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.GetAlarmRules(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>
            Returns all AlarmRules where all of the non null conditional arguments are met
            If all the conditional arguments are null, all the alarms will be returned.
            </summary>
      <param name="bActive">
      </param>
      <param name="bAcknowledged">
      </param>
      <param name="bDisabled">
      </param>
      <param name="bCanEvaluate">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.GetAlarmRules(Corning.GenSys.Point.EAlarmRuleState)">
      <summary>Gets a list of alarm rules contained in the Alarm Manager and with the specified state.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.GetAlarmRule(System.String)">
      <summary>Gets the alarm rule named strAlarmRuleName or null if not found.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.ReferenceUnreferencedPointFaults(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IAlarmRule})">
      <summary>
            This method tries to reference ipoints used in the iAlarmRule which have not yet been referenced.
            This method only deals with iAlarmRules associated with this AlarmManager. Any rule which is not
            associated with this AlarmManager will be ignored. The determination of association is done by
            AlarmRule name only.  
            </summary>
      <param name="ienumiAlarmRules">
      </param>
      <returns>List of iAlarmRules passed that belong to this server and cannot be evaluated</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.ReferenceUnreferencedPointFaults(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            This method tries to reference ipoints used in the AlarmRules which have not yet been referenced.
            This method only deals with AlarmRules associated with this AlarmManager. Any rule which is not
            associated with this AlarmManager will be ignored.
            </summary>
      <param name="ienumiAlarmRules">
      </param>
      <returns>List of iAlarmRules passed that belong to this server and cannot be evaluated</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.ReferenceUnreferencedPointFaultsForAllRules">
      <summary>
            This method tries to reference ipoints used in all this AlarmManager AlarmRules which have not yet been referenced.
            </summary>
      <returns>List of iAlarmRules that belong to this server and cannot be evaluated</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.AcknowledgeAlarmEvents(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.CAlarmEventArg},System.Boolean)">
      <summary>
      </summary>
      <param name="astrAlarmRuleNames">
      </param>
      <returns>List of rules which either have not been found or which have already been acknowledged</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.AcknowledgeAllAlarmEvents">
      <summary>
            All alarm events are acknowledged for all unacknoledged alarm rules
            </summary>
      <param name="astrAlarmRuleNames">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.AcknowledgeAllAlarmEvents(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            For each alarm rule all alarm events are acknowledged
            </summary>
      <param name="astrAlarmRuleNames">
      </param>
      <returns>List of rules which either have not been found or which have already been acknoweledged</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CAlarmManager.RaiseOnAlarmEnabled(System.Collections.Generic.List{Corning.GenSys.Point.CAlarmEventArg})">
      <summary>
        <para>METHOD CURRENTLY NOT IN USE.</para>
        <para>Raises <see cref="E:Corning.GenSys.Point.CAlarmManager.OnAlarmEnabled">OnAlarmEnabled Event</see></para>
      </summary>
    </member>
    <member name="E:Corning.GenSys.Point.CAlarmManager.OnAlarmEnabled">
      <summary>THIS EVENT IS CURRENTLY DISABLED AND WILL NEVER BE RAISED.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointFaultHandler">
      <summary>
            Internal class
            This class contains the fault value of a point as well as a list of rules where this point is used.
            This class is used to determine what rules need to be evaluated when a new fault event is triggered 
            </summary>
    </member>
    <member name="F:Corning.GenSys.Point.CPointFaultHandler.m_oAlarmManager">
      <summary>
            Used to get an IPoint from a point name
            </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointFaultHandler.AddAlarmRule(Corning.GenSys.Point.CAlarmRule)">
      <summary>
            Add an alarm rule that includes this PointFault 
            </summary>
      <param name="iRule">
      </param>
    </member>
    <member name="T:Corning.GenSys.Point.CPointRule">
      <summary>
            Internal class
            The lowest component of a rule. Contains the point on which the rule applies as well as the expected
            fault value which will trigger an alarm.
            </summary>
    </member>
    <member name="T:Corning.GenSys.Point.CRuleBase">
      <summary>
            Base class for a multi-point alarm rule
            </summary>
    </member>
    <member name="T:Corning.GenSys.Point.COrRule">
      <summary>
      </summary>
    </member>
    <member name="T:Corning.GenSys.Point.CAndRule">
      <summary>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManagerInternal.AddPointServer(Corning.GenSys.Point.IPointsServerLocal)">
      <summary>
            Used to add PointServers or PointProxyServers
            </summary>
      <param name="iPointsServerLocal">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManagerInternal.AddPoints(Corning.GenSys.Point.IPoint[])">
      <summary>
            Used to add individual points
            </summary>
      <param name="aiPoint">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.IAlarmManagerInternal.AddPoints(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPoint})">
      <summary>
            Used to add individual points
            </summary>
      <param name="ienumPoint">
      </param>
    </member>
    <member name="T:Corning.GenSys.Point.IRule">
      <summary>
            Internal interface
            </summary>
    </member>
    <member name="T:Corning.GenSys.Point.IRuleInternal">
      <summary>
            Internal interface
            </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CHierarchy`1.CHierarchyNode.GetAllChildElements(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Returns a dictionary of all elements in the hierarchy along with a name composed of the node name and ISettingName separated by the '.' character
            </summary>
      <param name="ienumstrExcludedNodes">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CHierarchy`1.AddNode(System.String)">
      <summary>
            Adds all the nodes necessary
            </summary>
      <param name="strBreadCrumbName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CHierarchy`1.LibraryVersionCheckAndConversion(System.String)">
      <summary>
            If no library version has been found in the XML file then convert the file by changing XML Precision tags from null to -1
            </summary>
      <param name="strXml">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CHierarchy`1.LibraryVersionCheckAndConversion(System.String,System.Boolean@,System.String@)">
      <summary>
            If no library version has been found in the XML file then convert the file by changing XML Precision tags from null to -1
            </summary>
      <param name="strXml">
      </param>
      <param name="bConversionWasRequired">
      </param>
      <param name="strXmlConverted">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CHierarchy`1.PrecisionFixConvertion(System.String)">
      <summary>
            Changes XML Precision tags from null to -1
            </summary>
      <param name="strSettingsXml">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CHierarchy`1.ApplySettingsFromObject(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            For future use
            </summary>
      <param name="strXml">
      </param>
      <param name="ienumstrExcludedNodes">
      </param>
      <param name="ienumstrExcludedPointYaxAttributes">List of field of properties YaxLib name which should not be set</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CHierarchy`1.ApplySettingsFromXml(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.List{`0}@)">
      <summary>
            Applies the settings from XML.
            </summary>
      <param name="strXml">The string XML.</param>
      <param name="ienumstrExcludedNodes">The nodes in the hierarchy to be excluded when applying the settings.</param>
      <param name="ienumstrExcludedPointYaxAttributes">The yaxlib attributes to be excluded when applying the settings.</param>
      <param name="lsttExtra">A list of elements that were read from the XML file but were not used when applying the settings.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Corning.GenSys.Point.CDelegateSignature`1">
      <summary>
            Internal class
            </summary>
      <typeparam name="TDelegateType">
      </typeparam>
    </member>
    <member name="T:Corning.GenSys.Point.CPointBase">
      <summary>
            This is the base class for all the point class. It contains only access levels and constants shared by all point classes
            </summary>
    </member>
    <member name="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">
      <summary>
            This string is used to separate components of a points name. This separation creates something similar to a file path and allows the creation of a point hierarchy.
            A similar string is also used for the separator in the settings hierarchy. See ???
            </summary>
      <value>"."</value>
    </member>
    <member name="F:Corning.GenSys.Point.CPointBase.mc_nMonChangePercentSameValueTrigger">
      <summary>
            This value is the value to which thw MonChangePercent property needs to be set so that, if the current value of the point is set to a value which is the same as the current value, a eventPointChanged event will be fired.
            </summary>
      <value>-6464</value>
    </member>
    <member name="F:Corning.GenSys.Point.CPointBase.mc_nMonChangePercentDifferentValueTrigger">
      <summary>
            This value is the value to which thw MonChangePercent property needs to be set so that an eventPointChanged event will be fired whenever the value of m_tvalueCurrentValue is changed to a new value which is different from the old value.
            </summary>
      <value>0</value>
    </member>
    <member name="F:Corning.GenSys.Point.CPointBase.ms_bAllowWrittingNonWriteablePoints">
      <summary>
            This parameter specifies if the point writeable flag should be inforce or not. Note that writeability test is only performed in the SetAttributeValueAsObject method. A point is always writeable when using the CurrentValue or RawValue properties.
            </summary>
      <value>false</value>
    </member>
    <member name="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelWriteDefault">
      <summary>This contains the list, contained in the flag enum EAccessLevel, of default access levels which are allowed to write to the point. This parameter is used to
            initialize property <see cref="P:Corning.GenSys.Point.CPoint`2.WriteAccessLevel">WriteAccessLevel Property</see> if nothing has been specified in the constructor.
            <para>Value: EAccessLevel.Engineer |EAccessLevel.Admin |EAccessLevel.SuperUser</para></summary>
    </member>
    <member name="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelReadDefault">
      <summary>This contains the list, contained in the flag enum EAccessLevel, of default access levels which are allowed to read from the point. This parameter is used to
            initialize property <see cref="P:Corning.GenSys.Point.CPoint`2.ReadAccessLevel">ReadAccessLevel Property</see> if nothing has been specified in the constructor.
            <para>Value: EAccessLevel.Engineer |EAccessLevel.Admin |EAccessLevel.SuperUser</para></summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointBase.WriteAccessLevelDefault">
      <summary>This contains the list, contained in the flag enum EAccessLevel, of default access levels which are allowed to write to the point. This parameter is used to
            initialize property <see cref="P:Corning.GenSys.Point.CPoint`2.WriteAccessLevel">WriteAccessLevel Property</see> if nothing has been specified in the constructor.
            <para>Value: EAccessLevel.Engineer |EAccessLevel.Admin |EAccessLevel.SuperUser</para></summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">
      <summary>This contains the list, contained in the flag enum EAccessLevel, of default access levels which are allowed to read from the point. This parameter is used to
            initialize property <see cref="P:Corning.GenSys.Point.CPoint`2.ReadAccessLevel">ReadAccessLevel Property</see> if nothing has been specified in the constructor.
            <para>Value: EAccessLevel.Engineer |EAccessLevel.Admin |EAccessLevel.SuperUser</para></summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPoint`1">
      <summary>Equivalent to CPoint&lt;TValue, TValue&gt;</summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPoint`2">
      <summary>
        <para>A Point contains a value of type TValue. If the point support engineering units it also contains a value of type TRaw which is related to the value of type
             TRaw by a linear conversion whoes slope and offset parameters are user settable. IMPORTANT: If the point does not support engineering units TRaw needs to be
             set to the same type as TValue or an exception will be thrown by the constructor.</para>
        <para>This class also allows the internal value to be contained within a user settable range (<see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MinSettableValue</see>,
             <see cref="P:Corning.GenSys.Point.CPoint`2.MaxSettableValue">MaxSettableValue</see>}. Furthermore some limits can be set by the user of the class
             (<see cref="P:Corning.GenSys.Point.CPoint`2.LowLowFaultThreshold">LowLowFaultThreshold</see>, <see cref="P:Corning.GenSys.Point.CPoint`2.LowFaultThreshold">LowFaultThreshold</see>,
             <see cref="P:Corning.GenSys.Point.CPoint`2.HighFaultThreshold">HighFaultThreshold</see>, <see cref="P:Corning.GenSys.Point.CPoint`2.HighHighFaultThreshold">HighHighFaultThreshold</see>) to trigger a <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault
             Event</see> when the internal value is out of the limits.</para>
        <para>The user of the point class can also be informed of changes occuring on the internal value of the point. This is done by setting either
             <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValue">MonChangeValue</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercent">MonChangePercent</see> properties in conjunction with
             <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValueDisable">MonChangeValueDisable</see> and <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercentDisable">MonChangePercentDisable </see> properties.
             Setting those properties will result in a <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged Event</see> being raised when the internal value of the point
             changes.</para>
        <para>An object of this class can also represent a controlled value. in that case the <see cref="P:Corning.GenSys.Point.CPoint`2.SetPointValue">SetPointValue Property</see> represent where
             the current value should be controlled to.</para>
        <para>Further more a "shime" delegate can be added to the read and write of the internal value field at construction time or with the use of
             <see cref="M:Corning.GenSys.Point.CPoint`2.AddReadDelegate(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeReadDelegate})">AddReadDelegate</see> and <see cref="M:Corning.GenSys.Point.CPoint`2.AddWriteDelegate(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeWriteDelegate})">AddWriteDelegate</see> methods. When these delegate have been added,
             they will be called each time the current value field is accessed. This feature is particularly usefull when a Point class is used to access I/O devices. In
             that case read and write delegates can be added to access a specific register when the point is read or written.</para>
        <para>Points can be constructed using a variety of <see cref="M:Corning.GenSys.Point.CPoint`2.#ctor(System.String,System.String,System.Object,System.Object,System.Int32,System.Object,System.Object,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Boolean,System.Boolean,System.Object,System.Object,System.Object,System.Object,System.Object,System.Nullable{Corning.GenSys.Point.EAccessLevel},System.Nullable{Corning.GenSys.Point.EAccessLevel},System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeReadDelegate},System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeWriteDelegate},System.Boolean)">constructors</see>. or by using the <see cref="T:Corning.GenSys.Point.CPointFactory">CPointFactory
             Class</see> which allows the creation of points without using generics.</para>
        <para>Points can also be created using a combination of <see cref="!:Corning.GenSys.SettingAttribute.ASettingAttribute">ASettingAttribute</see> placed on public, protected or private field or
             property of a class and <see cref="O:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint.CreateSettingPoints">CreateSettingPoints Method</see>.</para>
        <para>The Gensys library also support the creation of points in relation to a <see cref="!:Corning.GenSys.EthernetIp.CEtIpServerDevice">CEtIpServerDevice</see> object. These points are created
             using the <see cref="M:Corning.GenSys.EthernetIpHelperPoint.CEthernetIpHelperPoint.CreatePoints">CreatePoints Method</see> which returns one point per EthernetIP input tag.</para>
      </summary>
      <typeparam name="TValue">The type of <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see></typeparam>
      <typeparam name="TRaw">The type of <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see>. If the point does not or cannot use engineering units then TRaw should be the same as TValue</typeparam>
      <example>
        <code title="Point creation example using constructors" description="" groupname="Constructors" lang="CS">
             // &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
             // Point creation using the point constructor
             // &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
             // Creates a point with current value initialized to 67.81d with a min value of -67d and a max value of 81d.
             // It supports engineering units, the value is of type double while the raw value is of integer type. its slope is set to .5 and offset is 0.  It is not alarmable so no fault
             // events will ever be raised. The point
             // is set as Dynamic and therefore its CurrentValue property can be written to. It is also set as Writeable so
             // its CurrentValue property can be written to using the Get and Set attribute value methods.
             //
             CPoint&lt;double, int&gt; m_pointDoubleWriteable =
                         new CPoint&lt;double, int&gt;("PointDoubleWriteable", "Local Point Description", 67.81d,
                                                     -67d, 81d, //Min, Max
                                                     0d, false, true, //SetPoint, ControlLoop, ControlLoopDisabled
                                                     true, true, false, //Dynamic, Writeable, Alarmable
                                                     "strUnits", .5d, 0d, //Units, Slope, Offset
                                                     3.3d, true, //MonChangePercent, DisabledFlag
                                                     4.4d, true, //MonChangeValue, DisabledFlag
                                                     true, //FaultDisabled
                                                     new IPointAttributeReadDelegate[]
                                                         {
                                                             new CPointAttributeReadDelegate&lt;int&gt;(CPointAttributes.S.RawValue,
                                                                 delegate(IPoint iPoint, object objParam)
                                                                         {
                                                                             int nRawValueReturned =  (int)objParam;
                                                                             string strMessage = string.Format(
                                                                                 "Call to ReadDelegate from point &lt;{0}&gt;, returning &lt;{1}&gt; for raw value",
                                                                                 iPoint.PointName, nRawValueReturned);
                                                                             MessageBox.Show(strMessage);
                                                                             return nRawValueReturned;
                                                                         },
                                                                 15),
                                                         },
                                                     new IPointAttributeWriteDelegate[]
                                                         {
                                                             new CPointAttributeWriteDelegate&lt;int&gt;(CPointAttributes.S.RawValue,
                                                                 delegate(int nRawValue, IPoint iPoint, object objParam)
                                                                         {
                                                                             string strMessage = string.Format(
                                                                                 "Call to WriteDelegate from point &lt;{0}&gt;, received raw value {1}",
                                                                                 iPoint.PointName, nRawValue);
                                                                             MessageBox.Show(strMessage);
                                                                         },
                                                                 null),
                                                         });
             // When reading the CurrentValue property the read delegate is called and the raw value is set to 15.
             // The slope and offset being 0.5d and 0 respectively the internal current value field containing 67.81d
             // is now set to 15*0.5+0=7.5d. Also a message box will be displayed.
             Assert.AreEqual(7.5d, m_pointDoubleWriteable.CurrentValue);
            
             // Assigning the CurrentValue property to 5.7 will trigger a call to the write delegate which will display
             // a message box showing that the 11 was assigned to the raw value.
             m_pointDoubleWriteable.CurrentValue = 5.7f;
            
             // Creates a simple int point with no min or max and no attached delegates
             IPoint ipointSimple = CPointFactory.CreatePoint(typeof (int), "SimpleIntergerPoint", "Simple Integer Point", 12, null, null, "mm");
             Assert.AreEqual(false, ipointSimple.Hidden);
             Assert.AreEqual(true, ipointSimple.Writeable);
             Assert.AreEqual(true, ipointSimple.Alarmable);</code>
        <code title="Point creation example using class factory" description="" groupname="Class Factory" lang="CS">
             // &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
             // Point creation using the point factory
             // &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
             // Creates a simple int point with no min or max and no attached delegates
             IPoint ipointSimpleBool = CPointFactory.CreatePoint(typeof(bool), "SimpleBoolPoint1", "Simple boolean Point", true);
             ipointSimpleBool.HighFaultThreshold = false;
             ipointSimpleBool.eventFault += delegate(IPoint iPoint, IFaultEventArg iFaultEventArg)
             {
                 MessageBox.Show(string.Format("Fault event: {0}", iFaultEventArg.FaultType));
             };
             ipointSimpleBool.FaultDisabled = false;
             // The following line will result in a HIGH fault event
             ipointSimpleBool.CurrentValue = false;
             // The following line will result in a NONE fault event
             ipointSimpleBool.CurrentValue = true;
            
             IPoint ipointSimpleInt = CPointFactory.CreatePoint(typeof(int), "SimpleIntPoint1", "Simple integer Point", 5, 1, 0, 0, 100, "%");
            
             // Creation of a point tied to the property of another object. This illustrates how the ASetting attribute is implemented.
             Rectangle oRectangle = new Rectangle(0, 0, 10, 10);
             IPoint ipointWidth = CPointFactory.CreatePoint(typeof(int), "RectangleWidth", "RectangleWidth", 5,
                                                             0, null, // Min, Max
                                                             "mm", true, // Units, Writeable
                                                             EAccessLevel.Operator | EAccessLevel.Admin, EAccessLevel.Admin,
                                                             delegate(object objParam)
                                                             {
                                                                 return oRectangle.Width;
                                                             },
                                                             null,
                                                             delegate(object objValue, object objParam)
                                                             {
                                                                 oRectangle.Width = (int)objValue;
                                                             },
                                                             oRectangle);
            
             // Eventhough the point was initialized with a value of 5, the rectangle width remained unchanged because
             // delegates are not called at construction time.
             Assert.AreEqual(10, oRectangle.Width);
             // The following call results in the setting of the rectangle width to 3
             ipointWidth.CurrentValue = 3;
             Assert.AreEqual(3, oRectangle.Width);
             // Setting the rectangle width to 6 results in the point current value being set to 6.
             // Note that the current value of the point is updated at the time it is read and not
             // when the rextangle property is assigned.
             oRectangle.Width = 6;
             Assert.AreEqual(6, ipointWidth.CurrentValue);</code>
        <code title="Point creation using attributes" description="" groupname="Attributes" lang="CS">
             public static void PointCreationExampleUsingASettingsAttributes()
             {
                 // &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
                 // Point creation using the ASetting attribute
                 // &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
                 CMyClass myclass1 = new CMyClass(-5, 500, 10.5, 56.78f);
                 CMyClass myclass2 = new CMyClass(-60, 60, 30d, 87.89f);
            
                 // The follolwing will create two points named "Main.First.ControledValue", "Main.First.Value"
                 List&lt;IPoint&gt; lstipointFirst = CSettingHelperPoint.CreateSettingPoints("Main.First", myclass1, false);
            
                 // The follolwing will create two points named "Main.Second.ControledValue", "MyOverride.Value"
                 // The second point uses the instance name override.
                 List&lt;IPoint&gt; lstipointSecond = CSettingHelperPoint.CreateSettingPoints("Main.Second", myclass2, true);
            
                 // The first point in the list is attached to property ControledValue
                 Assert.AreEqual("Main.Second.ControledValue", lstipointFirst[0].PointName);
                 // The property the point is attached to was attributed with MinValProperty = "MinValue".
                 // The following line verifies that the point MinSettableValue is indeed equal to the
                 // property MinValue
                 Assert.AreEqual(-5, lstipointFirst[0].MinSettableValue);
                 // The following code illustartes that changing the MinValue property has no effect on
                 // the point MinSettableValue. This is because the property referenced by MinValProperty
                 // in ASetting is used only when the point is created.
                 myclass1.MinValue = 88;
                 Assert.AreEqual(-5, lstipointFirst[0].MinSettableValue);
            
                 // The first point in the list is attached to property ControledValue
                 Assert.AreEqual(10.5, lstipointFirst[0].CurrentValue);
            
                 // The following code shows that changing an attributed field changes what is retreived
                 // using the CyrrentValue property of the associated point.
                 // IMPORTANT: The value of the internal current value field is updated only at the time
                 // the CurrentValue property is read. This is important because the update of the internal
                 // field correspond to when the fault and change event evaluation is performed. Practiacally
                 // this means that changing the class property in such a way that the same change to the
                 // point current value would trigger an event will not result in any event in the associated
                 // point until its current value is queried.
                 myclass1.ControlledValue = 13.65;
                 Assert.AreEqual(13.65, lstipointFirst[0].CurrentValue);
            
                 // Changing the CurrentValue of the point changes the value of the associated property.
                 lstipointFirst[0].CurrentValue = 22.45;
                 Assert.AreEqual(22.45, myclass1.ControlledValue);
             }
            
             class CMyClass
             {
                 public CMyClass(int dMinValue, int dMaxValue, double dControlledValue, float fValue)
                 {
                     m_dMinValue = dMinValue;
                     m_dMaxValue = dMaxValue;
                     m_dControlledValue = dControlledValue;
                     m_fValue = fValue;
                 }
            
                 // Note that ASetting members with a name ending with "Property" can also be initialized with a
                 // field name as illustrated with MaxValProperty
                 [ASetting(Name = "ControledValue", Description = "My controlled Value", Units = "mm",
                             MinValProperty = "MinValue", MaxValProperty = "m_dMaxValue")]
                 public double ControlledValue
                 {
                     get { return m_dControlledValue; }
                     set { m_dControlledValue = value; }
                 }
            
                 public float Value
                 {
                     get { return m_fValue; }
                     set { m_fValue = value; }
                 }
            
                 public double MaxValue
                 {
                     get { return m_dMaxValue; }
                     set { m_dMaxValue = value; }
                 }
            
                 public double MinValue
                 {
                     get { return m_dMinValue; }
                     set { m_dMinValue = (int)value; }
                 }
            
                 private double m_dMinValue;
                 private double m_dMaxValue;
                 private double m_dControlledValue;
            
                 [ASetting(Name = "Value", Description = "My Value", Units = "%",
                             MinVal = 0, MaxVal = 100,
                             ReadAccess = EAccess.Operator | EAccess.Admin, WriteAccess = EAccess.Admin,
                             InstanceNameOverride = "MyOverride")]
                 private float m_fValue;
             }</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.#ctor">
      <summary>
            Empty point constructor that should only be used when the content wil be reassign subsequently.
            </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.#ctor(System.String,System.String,System.Object,System.Object,System.Int32,System.Object,System.Object,System.String,System.Boolean,System.Boolean,System.Nullable{Corning.GenSys.Point.EAccessLevel},System.Nullable{Corning.GenSys.Point.EAccessLevel},System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeReadDelegate},System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeWriteDelegate})">
      <summary>
        <para>Creates a simple point which is not hidden. It will be alarmable although the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is set to true and
            all of the low thresholds are set to the min value of the point type and the high thresholds are set to the max value of the point type.</para>
        <para>The created point will not support engineering units and therefore needs only one type to be defined so TValue and TRaw must be identical. Also, it will not
            support control loop capabilities.</para>
        <para>This constructor is used by <see cref="O:Corning.GenSys.Point.CPointFactory.CreatePoint">CreatePoint Method</see></para>
      </summary>
      <param name="strPointName">Name of the point. This name should be unique if the point is to be a member of a <see cref="T:Corning.GenSys.Point.CPointsServer">CPointsServer Class</see>. The name can be composed of multiple
            strings separated by the <see cref="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">mc_strNameSeparator Field</see> string to form a path which is used by <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see> to create a hierarchy. This Name will not change through out the life of the point object and can be accessed for
            reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.PointName">PointName Property</see></param>
      <param name="strGuiDescription">A string wich contains the description of the point. It is used by <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User Control</see>. This description will not
            change through out the life of the point object and can be accessed for reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.GuiDescription">GuiDescription Property</see></param>
      <param name="objTValueCurrentValue">
        <para>The current value of the point as an object. This parameter should be set to an object whoes underlying type should be convertible to TValue. This value can
            subsequently be changed via the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or the <see cref="M:Corning.GenSys.Point.CPoint`2.SetCurrentValue(`0,System.Boolean)">SetCurrentValue
            Method</see>.</para>
        <para>If the type TValue of the point is not a reference or nullable type and this parameter is set to "null" then the Current Value of the point is set to the
            default value of the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue).</para>
      </param>
      <param name="objTValueIncrement">
        <para>A value that can be used in an up/down control to increment or decrement the current value of the point. The Point object simply stores this value and does
            not use it internally.</para>
        <para>If this parameter is set to "null" the internal field will be set to the conversion of the constant 1L to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType
            Property</see> (TValue). If the conversion is unsuccessful the internal field is set to the default value of TValue.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Increment">Increment
            Property</see>.</para>
      </param>
      <param name="nPrecision">
        <para>Specifies the number of digits after the decimal point. This value can be used externally to display the current value of the point. The Point object simply
            stores this value and does not use it internally.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Precision">Precision
            Property</see>.</para>
      </param>
      <param name="objTValueMinValue">
        <para>The minimum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue). This is only</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MinSettableValue
            Property</see>.</para>
      </param>
      <param name="objTValueMaxValue">
        <para>The maximum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MaxSettableValue
            Property</see>.</para>
      </param>
      <param name="strUnits">
        <para>A string which contains the units of the value returned by <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see></para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Units">Units
            Property</see>.</para>
      </param>
      <param name="bHidden">
        <para>This value is used by the <see cref="T:Corning.GenSys.Point.CPointServerBase">CPointServerBase Class</see> to determine if the point should be added to the list of point names returned by the
            <see cref="O:Corning.GenSys.Point.CPointServerBase.EnumPoints">EnumPoints Method</see></para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.Hidden">Hidden Property</see>.</para>
      </param>
      <param name="bWritable">
        <para>This parameter controls the writeability of the points <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue attribute</see> via
            <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> and <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
            Method</see>.</para>
        <para>Not that the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> writeability is not controlled by this property it is controlled by <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic
            Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.Writeable">Writeable Property</see></para>
      </param>
      <param name="eaccesslevelWrite">
        <para>This contains the list, contained in the flag enum EAccessLevel, of access levels which are allowed to write to the point. The default value for that
            property is specified in the base class field <see cref="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelWriteDefault" /> and can be accessed via property <see cref="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">WriteAccessLevelDefault
            Property</see>.</para>
        <para>Note that the point class only stores this value and does not enforce the policy. This value is used and the policy enforced by the <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see>.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.WriteAccessLevel">WriteAccessLevel
            Property</see></para>
      </param>
      <param name="eaccesslevelRead">
        <para>This contains the list, contained in the flag enum EAccessLevel, of access levels which are allowed to read from the point. The default value for that
            property is specified in the base class field <see cref="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelReadDefault" /> and can be accessed via property <see cref="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">ReadAccessLevelDefault
            Property</see>.</para>
        <para>Note that the point class only stores this value and does not enforce the policy. This value is used and the policy enforced by the <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see>.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.ReadAccessLevel">ReadAccessLevel
            Property</see>.</para>
      </param>
      <param name="aiPointAttributReadeDelegate">A list of delegate that are invoked whenever the point current value is read. See <see cref="M:Corning.GenSys.Point.CPoint`2.AddReadDelegate(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeReadDelegate})">AddReadDelegate Method</see> for an
            example</param>
      <param name="aiPointAttributeWriteDelegate">A list of delegate that are invoked whenever the point current value is written to. See <see cref="M:Corning.GenSys.Point.CPoint`2.AddWriteDelegate(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeWriteDelegate})">AddWriteDelegate Method</see> for
            an example</param>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.#ctor(System.String,System.String,System.Object,System.Object,System.Object,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeReadDelegate},System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeWriteDelegate},System.Boolean)">
      <summary>Creates a point which is not hidden and whoes increment value is set to 1 converted to typeValue if possible and its prescision value is set to -1. It is assigned default read and
            write access levels. All of the low thresholds are set to the min value of the point type and the high thresholds are set to the max value of the point type.</summary>
      <param name="strPointName">Name of the point. This name should be unique if the point is to be a member of a <see cref="T:Corning.GenSys.Point.CPointsServer">CPointsServer Class</see>. The name can be composed of multiple
            strings separated by the <see cref="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">mc_strNameSeparator Field</see> string to form a path which is used by <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see> to create a hierarchy. This Name will not change through out the life of the point object and can be accessed for
            reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.PointName">PointName Property</see></param>
      <param name="strGuiDescription">A string wich contains the description of the point. It is used by <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User Control</see>. This description will not
            change through out the life of the point object and can be accessed for reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.GuiDescription">GuiDescription Property</see></param>
      <param name="objTValueCurrentValue">
        <para>The current value of the point as an object. This parameter should be set to an object whoes underlying type should be convertible to TValue. This value can
            subsequently be changed via the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or the <see cref="M:Corning.GenSys.Point.CPoint`2.SetCurrentValue(`0,System.Boolean)">SetCurrentValue
            Method</see>.</para>
        <para>If the type TValue of the point is not a reference or nullable type and this parameter is set to "null" then the Current Value of the point is set to the
            default value of the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue).</para>
      </param>
      <param name="objTValueMinValue">
        <para>The minimum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue). This is only</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MinSettableValue
            Property</see>.</para>
      </param>
      <param name="objTValueMaxValue">
        <para>The maximum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MaxSettableValue
            Property</see>.</para>
      </param>
      <param name="objTValueSetpointValue">
        <para>An object of this class can also represent a controlled value. In that case this property represent where the current value should be controlled to.</para>
        <para>This value should be set to null if bControlLoop is false..</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.SetPointValue">SetPointValue Property</see></para>
      </param>
      <param name="bControlLoop">
        <para>If set to true the instantiated point object represents a controlled value. In that case <see cref="P:Corning.GenSys.Point.CPoint`2.SetPointValue">SetPointValue</see> represent where
            the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue</see> should be controlled to.</para>
        <para>If this field is set to true, field bDynamic must be set to true or an exception will be thrown.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.ControlLoop">ControlLoop
            Property</see></para>
      </param>
      <param name="bControlLoopDisabled">
        <para>This value is simply stored and not used internally. The intent is to control if the  the control loop funtionality is enabled or disabled. This
            parameter should be set to true if parameter bControlLoop is set to false.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.ControlLoopDisable">ControlLoopDisable Property</see></para>
      </param>
      <param name="bDynamic">
        <para>If this value is set to true the user can expect that the value of the internal current value field can be changed by the software exposing the point.</para>
        <para>This value must be set to true in order to write to <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see>, or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue
            Property</see>.</para>
        <para>NOTE: It does not need to be set to true if the point object contains read delegates (see parameter <em>aiPointAttributReadeDelegate</em>) for
            <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see> even though
            these delegates will modify the internal current value field.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic
            Property</see>.</para>
      </param>
      <param name="bWritable">
        <para>This parameter controls the writeability of the points <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue attribute</see> via
            <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> and <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
            Method</see>.</para>
        <para>Not that the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> writeability is not controlled by this property it is controlled by <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic
            Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.Writeable">Writeable Property</see></para>
      </param>
      <param name="bAlarmable">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface.</para>
        <para>When set to true the internal current value field will be tested agains tresholds and <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Events</see> will be raised when
            it goes over a threshold. This can be enabled or disabled using the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see>.</para>
        <para>Unlike the bFaultDisabled parameter the value of the internal field does not change through out the life of the object. Itcan be retreived via the read
            only <see cref="P:Corning.GenSys.Point.CPoint`2.Alarmable">Alarmable Property</see></para>
      </param>
      <param name="strUnits">
        <para>A string which contains the units of the value returned by <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see></para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Units">Units
            Property</see>.</para>
      </param>
      <param name="dUnitsSlope">
        <para>The slope parameter used for the linear conversion to/from raw value with the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>This is only applicable if TValue and TRaw are of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their nullable
            conterparts.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.UnitsSlope">UnitsSlope Property</see>.</para>
      </param>
      <param name="dUnitsOffset">
        <para>The offset parameter used for the linear conversion to/from raw value with the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>This is only applicable if TValue and TRaw are of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their nullable
            conterparts.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.UnitsSlope">UnitsSlope Property</see></para>
      </param>
      <param name="dMonChangePercent">
        <para>If the internal current value field is updated which results in a change in percent by more than the value specified in the <em>dMonChangePercent</em>
            parameter, the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged Event</see> is triggered if <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercentDisable">MonChangePercentDisable
            Property</see> is false. This is only applicable if TValue is of types sbyte, byte, short, ushort, int, uint, long,
            ulong, float, double or one of their nullable conterparts.</para>
        <para>This parameter should be greater than 0 except in the following two cases where TValue can be any type:</para>
        <list type="number">
          <item>If this parameter is set to <see cref="F:Corning.GenSys.Point.CPointBase.mc_nMonChangePercentDifferentValueTrigger">mc_nMonChangePercentDifferentValueTrigger Field</see> (0), whenever the
                internal current value field changes to a value different from the old value, the <em>dMonChangePercent</em> the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged
                Event</see> is triggered.</item>
          <item>If this parameter is set to <see cref="F:Corning.GenSys.Point.CPointBase.mc_nMonChangePercentSameValueTrigger">mc_nMonChangePercentSameValueTrigger Field</see> (-6464), whenever the internal
                current value field changes to a value even if it is the same as the old value, the <em>dMonChangePercent</em> the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged
                Event</see> is triggered.</item>
        </list>
        <para>The following actions will result in an update of the the internal current value field.</para>
        <list type="number">
          <item>Writing to either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (see parameter <em>aiPointAttributReadeDelegate</em>) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
                Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue
                Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see> or a call to <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject
                Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see> using the
                <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>. NOTE: The update of the the internal current value field occurs only if the
                value returned by the read delegate is different from the old value of the internal current value field.</item>
        </list>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercent">MonChangePercent
            Property</see>.</para>
      </param>
      <param name="bMonPercentChangeDisabled">
        <para>When set to false the change in percent of the internal current value field is not evaluated.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercentDisable">MonChangePercentDisable
            Property</see>.</para>
      </param>
      <param name="objTValueMonChangeValue">
        <para>If the internal current value field is updated which results in a change such that abs(OldValue-NewValue) is greater or equal to the value specified in the
            MonChangeValue Property, the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged Event</see> is raised if <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValue">MonChangeValue
            Property</see> is false. This is only applicable if TValue is of types sbyte, byte, short, ushort, int, uint, long, ulong, float,
            double or one of their nullable conterparts.</para>
        <para>The following actions will result in an update of the the internal current value field.</para>
        <list type="number">
          <item>Writing to either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (see parameter <em>aiPointAttributReadeDelegate</em>) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
                Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue
                Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see> or a call to <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject
                Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see> using the
                <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>. NOTE: The update of the the internal current value field occurs only if the
                value returned by the read delegate is different from the old value of the internal current value field.</item>
        </list>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValue">MonChangeValue Property</see>.</para>
      </param>
      <param name="bMonValueChangeDisabled">
        <para>When set to false the value change of the internal current value field is not evaluated. Therefore no <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged
            Event</see> will be triggered based on value change of the internal current value field.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValue">MonChangeValue Property</see></para>
      </param>
      <param name="bFaultDisabled">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface and parameter bAlarmable is true.</para>
        <para>When set to false no <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered regardless the value of the current value internal field. Also the fault
            evaluation calculation are not performed.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see>.</para>
      </param>
      <param name="aiPointAttributReadeDelegate">A list of delegate that are invoked whenever the point current value is read. See <see cref="M:Corning.GenSys.Point.CPoint`2.AddReadDelegate(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeReadDelegate})">AddReadDelegate Method</see> for an
            example</param>
      <param name="aiPointAttributeWriteDelegate">A list of delegate that are invoked whenever the point current value is written to. See <see cref="M:Corning.GenSys.Point.CPoint`2.AddWriteDelegate(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeWriteDelegate})">AddWriteDelegate Method</see> for
            an example</param>
      <param name="bBypassControlLoopIntegrityCheck">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.#ctor(System.String,System.String,System.Object,System.Object,System.Object,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeReadDelegate},System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeWriteDelegate},System.Boolean)">
      <summary>Creates a point whoes increment value is set to 1 converted to typeValue if possible and its prescision value is set to -1. It is assigned default read and
            write access levels. All of the low thresholds are set to the min value of the point type and the high thresholds are set to the max value of the point type.</summary>
      <param name="strPointName">Name of the point. This name should be unique if the point is to be a member of a <see cref="T:Corning.GenSys.Point.CPointsServer">CPointsServer Class</see>. The name can be composed of multiple
            strings separated by the <see cref="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">mc_strNameSeparator Field</see> string to form a path which is used by <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see> to create a hierarchy. This Name will not change through out the life of the point object and can be accessed for
            reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.PointName">PointName Property</see></param>
      <param name="strGuiDescription">A string wich contains the description of the point. It is used by <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User Control</see>. This description will not
            change through out the life of the point object and can be accessed for reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.GuiDescription">GuiDescription Property</see></param>
      <param name="objTValueCurrentValue">
        <para>The current value of the point as an object. This parameter should be set to an object whoes underlying type should be convertible to TValue. This value can
            subsequently be changed via the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or the <see cref="M:Corning.GenSys.Point.CPoint`2.SetCurrentValue(`0,System.Boolean)">SetCurrentValue
            Method</see>.</para>
        <para>If the type TValue of the point is not a reference or nullable type and this parameter is set to "null" then the Current Value of the point is set to the
            default value of the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue).</para>
      </param>
      <param name="objTValueMinValue">
        <para>The minimum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue). This is only</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MinSettableValue
            Property</see>.</para>
      </param>
      <param name="objTValueMaxValue">
        <para>The maximum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MaxSettableValue
            Property</see>.</para>
      </param>
      <param name="objTValueSetpointValue">
        <para>An object of this class can also represent a controlled value. In that case this property represent where the current value should be controlled to.</para>
        <para>This value should be set to null if bControlLoop is false..</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.SetPointValue">SetPointValue Property</see></para>
      </param>
      <param name="bControlLoop">
        <para>If set to true the instantiated point object represents a controlled value. In that case <see cref="P:Corning.GenSys.Point.CPoint`2.SetPointValue">SetPointValue</see> represent where
            the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue</see> should be controlled to.</para>
        <para>If this field is set to true, field bDynamic must be set to true or an exception will be thrown.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.ControlLoop">ControlLoop
            Property</see></para>
      </param>
      <param name="bControlLoopDisabled">
        <para>This value is simply stored and not used internally. The intent is to control if the  the control loop funtionality is enabled or disabled. This
            parameter should be set to true if parameter bControlLoop is set to false.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.ControlLoopDisable">ControlLoopDisable Property</see></para>
      </param>
      <param name="bDynamic">
        <para>If this value is set to true the user can expect that the value of the internal current value field can be changed by the software exposing the point.</para>
        <para>This value must be set to true in order to write to <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see>, or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue
            Property</see>.</para>
        <para>NOTE: It does not need to be set to true if the point object contains read delegates (see parameter <em>aiPointAttributReadeDelegate</em>) for
            <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see> even though
            these delegates will modify the internal current value field.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic
            Property</see>.</para>
      </param>
      <param name="bWritable">
        <para>This parameter controls the writeability of the points <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue attribute</see> via
            <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> and <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
            Method</see>.</para>
        <para>Not that the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> writeability is not controlled by this property it is controlled by <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic
            Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.Writeable">Writeable Property</see></para>
      </param>
      <param name="bHidden">
        <para>This value is used by the <see cref="T:Corning.GenSys.Point.CPointServerBase">CPointServerBase Class</see> to determine if the point should be added to the list of point names returned by the
            <see cref="O:Corning.GenSys.Point.CPointServerBase.EnumPoints">EnumPoints Method</see></para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.Hidden">Hidden Property</see>.</para>
      </param>
      <param name="bAlarmable">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface.</para>
        <para>When set to true the internal current value field will be tested agains tresholds and <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Events</see> will be raised when
            it goes over a threshold. This can be enabled or disabled using the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see>.</para>
        <para>Unlike the bFaultDisabled parameter the value of the internal field does not change through out the life of the object. Itcan be retreived via the read
            only <see cref="P:Corning.GenSys.Point.CPoint`2.Alarmable">Alarmable Property</see></para>
      </param>
      <param name="strUnits">
        <para>A string which contains the units of the value returned by <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see></para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Units">Units
            Property</see>.</para>
      </param>
      <param name="dUnitsSlope">
        <para>The slope parameter used for the linear conversion to/from raw value with the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>This is only applicable if TValue and TRaw are of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their nullable
            conterparts.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.UnitsSlope">UnitsSlope Property</see>.</para>
      </param>
      <param name="dUnitsOffset">
        <para>The offset parameter used for the linear conversion to/from raw value with the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>This is only applicable if TValue and TRaw are of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their nullable
            conterparts.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.UnitsSlope">UnitsSlope Property</see></para>
      </param>
      <param name="dMonChangePercent">
        <para>If the internal current value field is updated which results in a change in percent by more than the value specified in the <em>dMonChangePercent</em>
            parameter, the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged Event</see> is triggered if <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercentDisable">MonChangePercentDisable
            Property</see> is false. This is only applicable if TValue is of types sbyte, byte, short, ushort, int, uint, long,
            ulong, float, double or one of their nullable conterparts.</para>
        <para>This parameter should be greater than 0 except in the following two cases where TValue can be any type:</para>
        <list type="number">
          <item>If this parameter is set to <see cref="F:Corning.GenSys.Point.CPointBase.mc_nMonChangePercentDifferentValueTrigger">mc_nMonChangePercentDifferentValueTrigger Field</see> (0), whenever the
                internal current value field changes to a value different from the old value, the <em>dMonChangePercent</em> the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged
                Event</see> is triggered.</item>
          <item>If this parameter is set to <see cref="F:Corning.GenSys.Point.CPointBase.mc_nMonChangePercentSameValueTrigger">mc_nMonChangePercentSameValueTrigger Field</see> (-6464), whenever the internal
                current value field changes to a value even if it is the same as the old value, the <em>dMonChangePercent</em> the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged
                Event</see> is triggered.</item>
        </list>
        <para>The following actions will result in an update of the the internal current value field.</para>
        <list type="number">
          <item>Writing to either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (see parameter <em>aiPointAttributReadeDelegate</em>) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
                Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue
                Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see> or a call to <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject
                Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see> using the
                <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>. NOTE: The update of the the internal current value field occurs only if the
                value returned by the read delegate is different from the old value of the internal current value field.</item>
        </list>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercent">MonChangePercent
            Property</see>.</para>
      </param>
      <param name="bMonPercentChangeDisabled">
        <para>When set to false the change in percent of the internal current value field is not evaluated.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercentDisable">MonChangePercentDisable
            Property</see>.</para>
      </param>
      <param name="objTValueMonChangeValue">
        <para>If the internal current value field is updated which results in a change such that abs(OldValue-NewValue) is greater or equal to the value specified in the
            MonChangeValue Property, the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged Event</see> is raised if <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValue">MonChangeValue
            Property</see> is false. This is only applicable if TValue is of types sbyte, byte, short, ushort, int, uint, long, ulong, float,
            double or one of their nullable conterparts.</para>
        <para>The following actions will result in an update of the the internal current value field.</para>
        <list type="number">
          <item>Writing to either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (see parameter <em>aiPointAttributReadeDelegate</em>) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
                Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue
                Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see> or a call to <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject
                Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see> using the
                <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>. NOTE: The update of the the internal current value field occurs only if the
                value returned by the read delegate is different from the old value of the internal current value field.</item>
        </list>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValue">MonChangeValue Property</see>.</para>
      </param>
      <param name="bMonValueChangeDisabled">
        <para>When set to false the value change of the internal current value field is not evaluated. Therefore no <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged
            Event</see> will be triggered based on value change of the internal current value field.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValue">MonChangeValue Property</see></para>
      </param>
      <param name="bFaultDisabled">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface and parameter bAlarmable is true.</para>
        <para>When set to false no <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered regardless the value of the current value internal field. Also the fault
            evaluation calculation are not performed.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see>.</para>
      </param>
      <param name="aiPointAttributReadeDelegate">A list of delegate that are invoked whenever the point current value is read. See <see cref="M:Corning.GenSys.Point.CPoint`2.AddReadDelegate(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeReadDelegate})">AddReadDelegate Method</see> for an
            example</param>
      <param name="aiPointAttributeWriteDelegate">A list of delegate that are invoked whenever the point current value is written to. See <see cref="M:Corning.GenSys.Point.CPoint`2.AddWriteDelegate(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeWriteDelegate})">AddWriteDelegate Method</see> for
            an example</param>
      <param name="bBypassControlLoopIntegrityCheck">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.#ctor(System.String,System.String,System.Object,System.Object,System.Object,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Boolean,System.Boolean,System.Object,System.Object,System.Object,System.Object,System.Object,System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeReadDelegate},System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeWriteDelegate},System.Boolean)">
      <summary>
            Creates a point whoes increment value is set to 1 converted to typeValue if possible and its prescision value is set to -1. It is assigned default read and write access levels.
            </summary>
      <param name="strPointName">Name of the point. This name should be unique if the point is to be a member of a <see cref="T:Corning.GenSys.Point.CPointsServer">CPointsServer Class</see>. The name can be composed of multiple
            strings separated by the <see cref="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">mc_strNameSeparator Field</see> string to form a path which is used by <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see> to create a hierarchy. This Name will not change through out the life of the point object and can be accessed for
            reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.PointName">PointName Property</see></param>
      <param name="strGuiDescription">A string wich contains the description of the point. It is used by <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User Control</see>. This description will not
            change through out the life of the point object and can be accessed for reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.GuiDescription">GuiDescription Property</see></param>
      <param name="objTValueCurrentValue">
        <para>The current value of the point as an object. This parameter should be set to an object whoes underlying type should be convertible to TValue. This value can
            subsequently be changed via the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or the <see cref="M:Corning.GenSys.Point.CPoint`2.SetCurrentValue(`0,System.Boolean)">SetCurrentValue
            Method</see>.</para>
        <para>If the type TValue of the point is not a reference or nullable type and this parameter is set to "null" then the Current Value of the point is set to the
            default value of the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue).</para>
      </param>
      <param name="objTValueMinValue">
        <para>The minimum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue). This is only</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MinSettableValue
            Property</see>.</para>
      </param>
      <param name="objTValueMaxValue">
        <para>The maximum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MaxSettableValue
            Property</see>.</para>
      </param>
      <param name="objTValueSetpointValue">
        <para>An object of this class can also represent a controlled value. In that case this property represent where the current value should be controlled to.</para>
        <para>This value should be set to null if bControlLoop is false..</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.SetPointValue">SetPointValue Property</see></para>
      </param>
      <param name="bControlLoop">
        <para>If set to true the instantiated point object represents a controlled value. In that case <see cref="P:Corning.GenSys.Point.CPoint`2.SetPointValue">SetPointValue</see> represent where
            the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue</see> should be controlled to.</para>
        <para>If this field is set to true, field bDynamic must be set to true or an exception will be thrown.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.ControlLoop">ControlLoop
            Property</see></para>
      </param>
      <param name="bControlLoopDisabled">
        <para>This value is simply stored and not used internally. The intent is to control if the  the control loop funtionality is enabled or disabled. This
            parameter should be set to true if parameter bControlLoop is set to false.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.ControlLoopDisable">ControlLoopDisable Property</see></para>
      </param>
      <param name="bDynamic">
        <para>If this value is set to true the user can expect that the value of the internal current value field can be changed by the software exposing the point.</para>
        <para>This value must be set to true in order to write to <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see>, or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue
            Property</see>.</para>
        <para>NOTE: It does not need to be set to true if the point object contains read delegates (see parameter <em>aiPointAttributReadeDelegate</em>) for
            <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see> even though
            these delegates will modify the internal current value field.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic
            Property</see>.</para>
      </param>
      <param name="bWritable">
        <para>This parameter controls the writeability of the points <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue attribute</see> via
            <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> and <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
            Method</see>.</para>
        <para>Not that the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> writeability is not controlled by this property it is controlled by <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic
            Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.Writeable">Writeable Property</see></para>
      </param>
      <param name="bHidden">
        <para>This value is used by the <see cref="T:Corning.GenSys.Point.CPointServerBase">CPointServerBase Class</see> to determine if the point should be added to the list of point names returned by the
            <see cref="O:Corning.GenSys.Point.CPointServerBase.EnumPoints">EnumPoints Method</see></para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.Hidden">Hidden Property</see>.</para>
      </param>
      <param name="bAlarmable">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface.</para>
        <para>When set to true the internal current value field will be tested agains tresholds and <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Events</see> will be raised when
            it goes over a threshold. This can be enabled or disabled using the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see>.</para>
        <para>Unlike the bFaultDisabled parameter the value of the internal field does not change through out the life of the object. Itcan be retreived via the read
            only <see cref="P:Corning.GenSys.Point.CPoint`2.Alarmable">Alarmable Property</see></para>
      </param>
      <param name="strUnits">
        <para>A string which contains the units of the value returned by <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see></para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Units">Units
            Property</see>.</para>
      </param>
      <param name="dUnitsSlope">
        <para>The slope parameter used for the linear conversion to/from raw value with the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>This is only applicable if TValue and TRaw are of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their nullable
            conterparts.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.UnitsSlope">UnitsSlope Property</see>.</para>
      </param>
      <param name="dUnitsOffset">
        <para>The offset parameter used for the linear conversion to/from raw value with the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>This is only applicable if TValue and TRaw are of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their nullable
            conterparts.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.UnitsSlope">UnitsSlope Property</see></para>
      </param>
      <param name="dMonChangePercent">
        <para>If the internal current value field is updated which results in a change in percent by more than the value specified in the <em>dMonChangePercent</em>
            parameter, the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged Event</see> is triggered if <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercentDisable">MonChangePercentDisable
            Property</see> is false. This is only applicable if TValue is of types sbyte, byte, short, ushort, int, uint, long,
            ulong, float, double or one of their nullable conterparts.</para>
        <para>This parameter should be greater than 0 except in the following two cases where TValue can be any type:</para>
        <list type="number">
          <item>If this parameter is set to <see cref="F:Corning.GenSys.Point.CPointBase.mc_nMonChangePercentDifferentValueTrigger">mc_nMonChangePercentDifferentValueTrigger Field</see> (0), whenever the
                internal current value field changes to a value different from the old value, the <em>dMonChangePercent</em> the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged
                Event</see> is triggered.</item>
          <item>If this parameter is set to <see cref="F:Corning.GenSys.Point.CPointBase.mc_nMonChangePercentSameValueTrigger">mc_nMonChangePercentSameValueTrigger Field</see> (-6464), whenever the internal
                current value field changes to a value even if it is the same as the old value, the <em>dMonChangePercent</em> the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged
                Event</see> is triggered.</item>
        </list>
        <para>The following actions will result in an update of the the internal current value field.</para>
        <list type="number">
          <item>Writing to either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (see parameter <em>aiPointAttributReadeDelegate</em>) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
                Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue
                Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see> or a call to <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject
                Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see> using the
                <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>. NOTE: The update of the the internal current value field occurs only if the
                value returned by the read delegate is different from the old value of the internal current value field.</item>
        </list>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercent">MonChangePercent
            Property</see>.</para>
      </param>
      <param name="bMonPercentChangeDisabled">
        <para>When set to false the change in percent of the internal current value field is not evaluated.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercentDisable">MonChangePercentDisable
            Property</see>.</para>
      </param>
      <param name="objTValueMonChangeValue">
        <para>If the internal current value field is updated which results in a change such that abs(OldValue-NewValue) is greater or equal to the value specified in the
            MonChangeValue Property, the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged Event</see> is raised if <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValue">MonChangeValue
            Property</see> is false. This is only applicable if TValue is of types sbyte, byte, short, ushort, int, uint, long, ulong, float,
            double or one of their nullable conterparts.</para>
        <para>The following actions will result in an update of the the internal current value field.</para>
        <list type="number">
          <item>Writing to either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (see parameter <em>aiPointAttributReadeDelegate</em>) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
                Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue
                Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see> or a call to <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject
                Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see> using the
                <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>. NOTE: The update of the the internal current value field occurs only if the
                value returned by the read delegate is different from the old value of the internal current value field.</item>
        </list>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValue">MonChangeValue Property</see>.</para>
      </param>
      <param name="bMonValueChangeDisabled">
        <para>When set to false the value change of the internal current value field is not evaluated. Therefore no <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged
            Event</see> will be triggered based on value change of the internal current value field.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValue">MonChangeValue Property</see></para>
      </param>
      <param name="bFaultDisabled">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface and parameter bAlarmable is true.</para>
        <para>When set to false no <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered regardless the value of the current value internal field. Also the fault
            evaluation calculation are not performed.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see>.</para>
      </param>
      <param name="objFaultHysteresis">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface and parameter bAlarmable is true.</para>
        <para>A value which is added or subtracted from fault thresholds based on the value of the internal current value field</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">FaultHysteresis Property</see>.</para>
      </param>
      <param name="objHighFaultThreshold">
        <div>
          <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface and parameter bAlarmable is true.</para>
          <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is false, the point fault
                condition is evaluated. All fault evaluation are performed using a threshold as well as an hysteresis contained in
                <see cref="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">FaultHysteresis</see>.</para>
          <para>If the internal current value field is above this threshold and below the <see cref="P:Corning.GenSys.Point.CPoint`2.HighHighFaultThreshold">HighHighFaultThreshold</see>, the point
                is placed in <see cref="F:Corning.GenSys.Point.EFaultType.High">High</see> fault type state. If the internal current value field is below this threshold and above
                <see cref="P:Corning.GenSys.Point.CPoint`2.LowFaultThreshold">LowFaultThreshold</see>, the point is placed in <see cref="T:Corning.GenSys.Point.EFaultType">None</see>:EFaultType.None%</para>
          <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered whose argument
                contains the new point fault type state.</para>
          <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.HighFaultThreshold">HighFaultThreshold
                Property</see>.</para>
        </div>
      </param>
      <param name="objHighHighFaultThreshold">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface and parameter bAlarmable is true.</para>
        <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is false, the point fault condition
            is evaluated. All fault evaluation are performed using a threshold as well as an hysteresis contained in
            <see cref="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">FaultHysteresis</see>.</para>
        <para>If the internal current value field is above this threshold the point is placed in <see cref="F:Corning.GenSys.Point.EFaultType.HighHigh">HighHigh</see> fault type state. If the internal current
            value field is below this threshold and above <see cref="P:Corning.GenSys.Point.CPoint`2.HighFaultThreshold">HighFaultThreshold</see> the point is placed in <see cref="F:Corning.GenSys.Point.EFaultType.High">High</see>.</para>
        <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered whose argument
            contains the new point fault type state.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.HighHighFaultThreshold">HighHighFaultThreshold
            Property</see>.</para>
      </param>
      <param name="objLowFaultThreshold">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface and parameter bAlarmable is true.</para>
        <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is false, the point fault condition
            is evaluated. All fault evaluation are performed using a threshold as well as an hysteresis contained in
            <see cref="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">FaultHysteresis</see>.</para>
        <para>If the internal current value field is below this threshold and above the <see cref="P:Corning.GenSys.Point.CPoint`2.LowLowFaultThreshold">LowLowFaultThreshold</see>, the point is
            placed in <see cref="F:Corning.GenSys.Point.EFaultType.Low">Low</see> fault type state. If the internal current value field is above this threshold and below
            <see cref="P:Corning.GenSys.Point.CPoint`2.HighFaultThreshold">HighFaultThreshold</see>, the point is placed in <see cref="T:Corning.GenSys.Point.EFaultType">None</see>:EFaultType.None% fault type state.</para>
        <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered whose argument
            contains the new point fault type state.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.LowFaultThreshold">LowFaultThreshold
            Property</see>.</para>
      </param>
      <param name="objLowLowFaultThreshold">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface and parameter bAlarmable is true.</para>
        <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is false, the point fault condition
            is evaluated. All fault evaluation are performed using a threshold as well as an hysteresis contained in
            <see cref="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">FaultHysteresis</see>.</para>
        <para>If the internal current value field is below this threshold the point is placed in <see cref="F:Corning.GenSys.Point.EFaultType.LowLow">LowLow</see> fault type state. If the internal current
            value field is above this threshold and below <see cref="P:Corning.GenSys.Point.CPoint`2.LowFaultThreshold">LowFaultThreshold</see>, the point is placed in
            <see cref="T:Corning.GenSys.Point.EFaultType">Low</see>:EFaultType.Low% fault type state.</para>
        <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered whose argument
            contains the new point fault type state.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.LowLowFaultThreshold">LowLowFaultThreshold
            Property</see>.</para>
      </param>
      <param name="aiPointAttributReadeDelegate">A list of delegate that are invoked whenever the point current value is read. See <see cref="M:Corning.GenSys.Point.CPoint`2.AddReadDelegate(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeReadDelegate})">AddReadDelegate Method</see> for an
            example</param>
      <param name="aiPointAttributeWriteDelegate">A list of delegate that are invoked whenever the point current value is written to. See <see cref="M:Corning.GenSys.Point.CPoint`2.AddWriteDelegate(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeWriteDelegate})">AddWriteDelegate Method</see> for
            an example</param>
      <param name="bBypassControlLoopIntegrityCheck">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.#ctor(System.String,System.String,System.Object,System.Object,System.Int32,System.Object,System.Object,System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Double,System.Double,System.Double,System.Boolean,System.Object,System.Boolean,System.Boolean,System.Object,System.Object,System.Object,System.Object,System.Object,System.Nullable{Corning.GenSys.Point.EAccessLevel},System.Nullable{Corning.GenSys.Point.EAccessLevel},System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeReadDelegate},System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeWriteDelegate},System.Boolean)">
      <summary>
            Main Point constructor called by all other Point constructors
            </summary>
      <param name="strPointName">Name of the point. This name should be unique if the point is to be a member of a <see cref="T:Corning.GenSys.Point.CPointsServer">CPointsServer Class</see>. The name can be composed of multiple
            strings separated by the <see cref="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">mc_strNameSeparator Field</see> string to form a path which is used by <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see> to create a hierarchy. This Name will not change through out the life of the point object and can be accessed for
            reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.PointName">PointName Property</see></param>
      <param name="strGuiDescription">A string wich contains the description of the point. It is used by <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User Control</see>. This description will not
            change through out the life of the point object and can be accessed for reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.GuiDescription">GuiDescription Property</see></param>
      <param name="objTValueCurrentValue">
        <para>The current value of the point as an object. This parameter should be set to an object whoes underlying type should be convertible to TValue. This value can
            subsequently be changed via the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or the <see cref="M:Corning.GenSys.Point.CPoint`2.SetCurrentValue(`0,System.Boolean)">SetCurrentValue
            Method</see>.</para>
        <para>If the type TValue of the point is not a reference or nullable type and this parameter is set to "null" then the Current Value of the point is set to the
            default value of the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue).</para>
      </param>
      <param name="objTValueIncrement">
        <para>A value that can be used in an up/down control to increment or decrement the current value of the point. The Point object simply stores this value and does
            not use it internally.</para>
        <para>If this parameter is set to "null" the internal field will be set to the conversion of the constant 1L to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType
            Property</see> (TValue). If the conversion is unsuccessful the internal field is set to the default value of TValue.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Increment">Increment
            Property</see>.</para>
      </param>
      <param name="nPrecision">
        <para>Specifies the number of digits after the decimal point. This value can be used externally to display the current value of the point. The Point object simply
            stores this value and does not use it internally.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Precision">Precision
            Property</see>.</para>
      </param>
      <param name="objTValueMinValue">
        <para>The minimum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue). This is only</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MinSettableValue
            Property</see>.</para>
      </param>
      <param name="objTValueMaxValue">
        <para>The maximum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MaxSettableValue
            Property</see>.</para>
      </param>
      <param name="objTValueSetpointValue">
        <para>An object of this class can also represent a controlled value. In that case this property represent where the current value should be controlled to.</para>
        <para>This value should be set to null if bControlLoop is false..</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.SetPointValue">SetPointValue Property</see></para>
      </param>
      <param name="bControlLoop">
        <para>If set to true the instantiated point object represents a controlled value. In that case <see cref="P:Corning.GenSys.Point.CPoint`2.SetPointValue">SetPointValue</see> represent where
            the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue</see> should be controlled to.</para>
        <para>If this field is set to true, field bDynamic must be set to true or an exception will be thrown.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.ControlLoop">ControlLoop
            Property</see></para>
      </param>
      <param name="bControlLoopDisabled">
        <para>This value is simply stored and not used internally. The intent is to control if the  the control loop funtionality is enabled or disabled. This
            parameter should be set to true if parameter bControlLoop is set to false.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.ControlLoopDisable">ControlLoopDisable Property</see></para>
      </param>
      <param name="bDynamic">
        <para>If this value is set to true the user can expect that the value of the internal current value field can be changed by the software exposing the point.</para>
        <para>This value must be set to true in order to write to <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see>, or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue
            Property</see>.</para>
        <para>NOTE: It does not need to be set to true if the point object contains read delegates (see parameter <em>aiPointAttributReadeDelegate</em>) for
            <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see> even though
            these delegates will modify the internal current value field.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic
            Property</see>.</para>
      </param>
      <param name="bWritable">
        <para>This parameter controls the writeability of the points <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue attribute</see> via
            <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> and <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
            Method</see>.</para>
        <para>Not that the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> writeability is not controlled by this property it is controlled by <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic
            Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.Writeable">Writeable Property</see></para>
      </param>
      <param name="bHidden">
        <para>This value is used by the <see cref="T:Corning.GenSys.Point.CPointServerBase">CPointServerBase Class</see> to determine if the point should be added to the list of point names returned by the
            <see cref="O:Corning.GenSys.Point.CPointServerBase.EnumPoints">EnumPoints Method</see></para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.Hidden">Hidden Property</see>.</para>
      </param>
      <param name="bAlarmable">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface.</para>
        <para>When set to true the internal current value field will be tested agains tresholds and <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Events</see> will be raised when
            it goes over a threshold. This can be enabled or disabled using the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see>.</para>
        <para>Unlike the bFaultDisabled parameter the value of the internal field does not change through out the life of the object. Itcan be retreived via the read
            only <see cref="P:Corning.GenSys.Point.CPoint`2.Alarmable">Alarmable Property</see></para>
      </param>
      <param name="strUnits">
        <para>A string which contains the units of the value returned by <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see></para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Units">Units
            Property</see>.</para>
      </param>
      <param name="dUnitsSlope">
        <para>The slope parameter used for the linear conversion to/from raw value with the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>This is only applicable if TValue and TRaw are of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their nullable
            conterparts.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.UnitsSlope">UnitsSlope Property</see>.</para>
      </param>
      <param name="dUnitsOffset">
        <para>The offset parameter used for the linear conversion to/from raw value with the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>This is only applicable if TValue and TRaw are of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their nullable
            conterparts.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.UnitsSlope">UnitsSlope Property</see></para>
      </param>
      <param name="dMonChangePercent">
        <para>If the internal current value field is updated which results in a change in percent by more than the value specified in the <em>dMonChangePercent</em>
            parameter, the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged Event</see> is triggered if <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercentDisable">MonChangePercentDisable
            Property</see> is false. This is only applicable if TValue is of types sbyte, byte, short, ushort, int, uint, long,
            ulong, float, double or one of their nullable conterparts.</para>
        <para>This parameter should be greater than 0 except in the following two cases where TValue can be any type:</para>
        <list type="number">
          <item>If this parameter is set to <see cref="F:Corning.GenSys.Point.CPointBase.mc_nMonChangePercentDifferentValueTrigger">mc_nMonChangePercentDifferentValueTrigger Field</see> (0), whenever the
                internal current value field changes to a value different from the old value, the <em>dMonChangePercent</em> the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged
                Event</see> is triggered.</item>
          <item>If this parameter is set to <see cref="F:Corning.GenSys.Point.CPointBase.mc_nMonChangePercentSameValueTrigger">mc_nMonChangePercentSameValueTrigger Field</see> (-6464), whenever the internal
                current value field changes to a value even if it is the same as the old value, the <em>dMonChangePercent</em> the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged
                Event</see> is triggered.</item>
        </list>
        <para>The following actions will result in an update of the the internal current value field.</para>
        <list type="number">
          <item>Writing to either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (see parameter <em>aiPointAttributReadeDelegate</em>) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
                Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue
                Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see> or a call to <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject
                Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see> using the
                <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>. NOTE: The update of the the internal current value field occurs only if the
                value returned by the read delegate is different from the old value of the internal current value field.</item>
        </list>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercent">MonChangePercent
            Property</see>.</para>
      </param>
      <param name="bMonPercentChangeDisabled">
        <para>When set to false the change in percent of the internal current value field is not evaluated.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercentDisable">MonChangePercentDisable
            Property</see>.</para>
      </param>
      <param name="objTValueMonChangeValue">
        <para>If the internal current value field is updated which results in a change such that abs(OldValue-NewValue) is greater or equal to the value specified in the
            MonChangeValue Property, the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged Event</see> is raised if <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValue">MonChangeValue
            Property</see> is false. This is only applicable if TValue is of types sbyte, byte, short, ushort, int, uint, long, ulong, float,
            double or one of their nullable conterparts.</para>
        <para>The following actions will result in an update of the the internal current value field.</para>
        <list type="number">
          <item>Writing to either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (see parameter <em>aiPointAttributReadeDelegate</em>) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
                Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue
                Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see> or a call to <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject
                Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see> using the
                <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>. NOTE: The update of the the internal current value field occurs only if the
                value returned by the read delegate is different from the old value of the internal current value field.</item>
        </list>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValue">MonChangeValue Property</see>.</para>
      </param>
      <param name="bMonValueChangeDisabled">
        <para>When set to false the value change of the internal current value field is not evaluated. Therefore no <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged
            Event</see> will be triggered based on value change of the internal current value field.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValue">MonChangeValue Property</see></para>
      </param>
      <param name="bFaultDisabled">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface and parameter bAlarmable is true.</para>
        <para>When set to false no <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered regardless the value of the current value internal field. Also the fault
            evaluation calculation are not performed.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see>.</para>
      </param>
      <param name="objFaultHysteresis">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface and parameter bAlarmable is true.</para>
        <para>A value which is added or subtracted from fault thresholds based on the value of the internal current value field</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">FaultHysteresis Property</see>.</para>
      </param>
      <param name="objHighFaultThreshold">
        <div>
          <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface and parameter bAlarmable is true.</para>
          <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is false, the point fault
                condition is evaluated. All fault evaluation are performed using a threshold as well as an hysteresis contained in
                <see cref="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">FaultHysteresis</see>.</para>
          <para>If the internal current value field is above this threshold and below the <see cref="P:Corning.GenSys.Point.CPoint`2.HighHighFaultThreshold">HighHighFaultThreshold</see>, the point
                is placed in <see cref="F:Corning.GenSys.Point.EFaultType.High">High</see> fault type state. If the internal current value field is below this threshold and above
                <see cref="P:Corning.GenSys.Point.CPoint`2.LowFaultThreshold">LowFaultThreshold</see>, the point is placed in <see cref="T:Corning.GenSys.Point.EFaultType">None</see>:EFaultType.None%</para>
          <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered whose argument
                contains the new point fault type state.</para>
          <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.HighFaultThreshold">HighFaultThreshold
                Property</see>.</para>
        </div>
      </param>
      <param name="objHighHighFaultThreshold">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface and parameter bAlarmable is true.</para>
        <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is false, the point fault condition
            is evaluated. All fault evaluation are performed using a threshold as well as an hysteresis contained in
            <see cref="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">FaultHysteresis</see>.</para>
        <para>If the internal current value field is above this threshold the point is placed in <see cref="F:Corning.GenSys.Point.EFaultType.HighHigh">HighHigh</see> fault type state. If the internal current
            value field is below this threshold and above <see cref="P:Corning.GenSys.Point.CPoint`2.HighFaultThreshold">HighFaultThreshold</see> the point is placed in <see cref="F:Corning.GenSys.Point.EFaultType.High">High</see>.</para>
        <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered whose argument
            contains the new point fault type state.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.HighHighFaultThreshold">HighHighFaultThreshold
            Property</see>.</para>
      </param>
      <param name="objLowFaultThreshold">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface and parameter bAlarmable is true.</para>
        <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is false, the point fault condition
            is evaluated. All fault evaluation are performed using a threshold as well as an hysteresis contained in
            <see cref="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">FaultHysteresis</see>.</para>
        <para>If the internal current value field is below this threshold and above the <see cref="P:Corning.GenSys.Point.CPoint`2.LowLowFaultThreshold">LowLowFaultThreshold</see>, the point is
            placed in <see cref="F:Corning.GenSys.Point.EFaultType.Low">Low</see> fault type state. If the internal current value field is above this threshold and below
            <see cref="P:Corning.GenSys.Point.CPoint`2.HighFaultThreshold">HighFaultThreshold</see>, the point is placed in <see cref="T:Corning.GenSys.Point.EFaultType">None</see>:EFaultType.None% fault type state.</para>
        <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered whose argument
            contains the new point fault type state.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.LowFaultThreshold">LowFaultThreshold
            Property</see>.</para>
      </param>
      <param name="objLowLowFaultThreshold">
        <para>This parameter is only relevent if TValue realizes the System.Runtime.InteropServices.IComparable interface and parameter bAlarmable is true.</para>
        <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is false, the point fault condition
            is evaluated. All fault evaluation are performed using a threshold as well as an hysteresis contained in
            <see cref="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">FaultHysteresis</see>.</para>
        <para>If the internal current value field is below this threshold the point is placed in <see cref="F:Corning.GenSys.Point.EFaultType.LowLow">LowLow</see> fault type state. If the internal current
            value field is above this threshold and below <see cref="P:Corning.GenSys.Point.CPoint`2.LowFaultThreshold">LowFaultThreshold</see>, the point is placed in
            <see cref="T:Corning.GenSys.Point.EFaultType">Low</see>:EFaultType.Low% fault type state.</para>
        <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered whose argument
            contains the new point fault type state.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.LowLowFaultThreshold">LowLowFaultThreshold
            Property</see>.</para>
      </param>
      <param name="eaccesslevelRead">
        <para>This contains the list, contained in the flag enum EAccessLevel, of access levels which are allowed to read from the point. The default value for that
            property is specified in the base class field <see cref="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelReadDefault" /> and can be accessed via property <see cref="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">ReadAccessLevelDefault
            Property</see>.</para>
        <para>Note that the point class only stores this value and does not enforce the policy. This value is used and the policy enforced by the <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see>.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.ReadAccessLevel">ReadAccessLevel
            Property</see>.</para>
      </param>
      <param name="eaccesslevelWrite">
        <para>This contains the list, contained in the flag enum EAccessLevel, of access levels which are allowed to write to the point. The default value for that
            property is specified in the base class field <see cref="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelWriteDefault" /> and can be accessed via property <see cref="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">WriteAccessLevelDefault
            Property</see>.</para>
        <para>Note that the point class only stores this value and does not enforce the policy. This value is used and the policy enforced by the <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see>.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.WriteAccessLevel">WriteAccessLevel
            Property</see></para>
      </param>
      <param name="aiPointAttributReadeDelegate">A list of delegate that are invoked whenever the point current value is read. See <see cref="M:Corning.GenSys.Point.CPoint`2.AddReadDelegate(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeReadDelegate})">AddReadDelegate Method</see> for an
            example</param>
      <param name="aiPointAttributeWriteDelegate">A list of delegate that are invoked whenever the point current value is written to. See <see cref="M:Corning.GenSys.Point.CPoint`2.AddWriteDelegate(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeWriteDelegate})">AddWriteDelegate Method</see> for
            an example</param>
      <param name="bBypassControlLoopIntegrityCheck">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.GetTypedValueFromObject``1(System.Object,``0,``0@)">
      <summary>
      </summary>
      <typeparam name="T">
      </typeparam>
      <param name="objTValue">
      </param>
      <param name="tValueIfNull">
      </param>
      <param name="tValue">
      </param>
      <returns>Returns false if objTValueMaxValue is null</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.AddReadDelegate(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeReadDelegate})">
      <summary>Adds a collection of new read delegates for the specified attributes. Not that in the current implementation only delegates
             for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue attribute</see><see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue attribute</see> are
             invoked.</summary>
      <example>
        <code title="AddReadDelegate Example" description="In this example a read delegate is added to a point for the CurrentValue and RawValue attributes. This delegate assigns the attibute to a constant value and displays a message when it is called. This kind of delegate can be usefull for debugging." lang="C#">
             private static T ReadDelegate&lt;T&gt;(IPoint iPoint, object objParam)
             {
                 string[] astrParam = (string[])objParam;
                 T tReturned = (T)Convert.ChangeType(astrParam[1], typeof(T));
                 string strMessage = string.Format("Call to ReadDelegate from point &lt;{0}&gt;, attribute &lt;{3}&gt; returning &lt;{1}&gt; value contained in objParam[1] &lt;{2}&gt;", iPoint.PointName, tReturned, astrParam[1], astrParam[0]);
                 MessageBox.Show(strMessage);
                 return tReturned;
             }
            
             private void AddReadDelegateExample()
             {
                 CPoint&lt;TValue, TRaw&gt; oPoint = new CPoint&lt;TValue, TRaw&gt;("SamplePoint", "Sample Point");
                 oPoint.AddReadDelegate(new IPointAttributeReadDelegate[]
                                         {
                                             new CPointAttributeReadDelegate&lt;double&gt;(CPointAttributes.S.RawValue,
                                                                                     ReadDelegate&lt;double&gt;, new[] {"_RawValue", "15.67"}),
                                             new CPointAttributeReadDelegate&lt;double&gt;(CPointAttributes.S.CurrentValue,
                                                                                     ReadDelegate&lt;double&gt;, new[] {"_CurrentValue", "81.81"})
                                         });
             }</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.AddWriteDelegate(System.Collections.Generic.IEnumerable{Corning.GenSys.Point.IPointAttributeWriteDelegate})">
      <summary>Adds a collection of new write delegates for the specified attributes. Not that in the current implementation only delegates
             for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue attribute</see><see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue attribute</see> are
             invoked.</summary>
      <example>
        <para>
          <font size="2" face="Consolas">
            <font size="2" face="Consolas">
            </font>
          </font>
        </para>
        <code title="AddWriteDelegate Example" description="In this example a write delegate is added to a point for the CurrentValue and RawValue attributes. This delegate displays a message when it is called showing  the value that was written to the attibute. This kind of delegate can be usefull for debugging." lang="C#">
             private static void WriteDelegate&lt;T&gt;(T tData, IPoint iPoint, object objParam)
             {
                 string[] astrParam = (string[])objParam;
                 string strMessage = string.Format("Call to WriteDelegate from point &lt;{0}&gt;, attribute &lt;{3}&gt; with value &lt;{1}&gt; and parameter &lt;{2}&gt;", iPoint.PointName, tData, astrParam[1], astrParam[0]);
                 MessageBox.Show(strMessage);
             }
            
             private void AddWriteDelegateExample()
             {
                 CPoint&lt;TValue, TRaw&gt; oPoint = new CPoint&lt;TValue, TRaw&gt;("SamplePoint", "Sample Point");
                 oPoint.AddWriteDelegate(new IPointAttributeWriteDelegate[]
                                         {
                                             new CPointAttributeWriteDelegate&lt;double&gt;(CPointAttributes.S.RawValue,
                                                                                     WriteDelegate&lt;double&gt;, new []{"_RawValue","Delegate parameter for raw value point LocalServerPoint1"}),
                                             new CPointAttributeWriteDelegate&lt;double&gt;(CPointAttributes.S.CurrentValue,
                                                                                     WriteDelegate&lt;double&gt;, new []{"_SetPointRawValue","Delegate parameter for raw set point point LocalServerPoint1"})
                                         });
             }</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">
      <summary>
        <para>Returns the value of a point attribute as a string. The attribute can be specified using <see cref="T:Corning.GenSys.Point.CPointAttributes">CPointAttributes Class</see> and the list of valid
            attributes is returned by <see cref="M:Corning.GenSys.Point.CPoint`2.GetAllAttributes">GetAllAttributes Method</see>.</para>
        <para>This method is used by the <see cref="T:Corning.GenSys.Point.CPointServerBase">CPointServerBase Class</see>. It is easier to use the property associated with a point attribute instead of using
            this method.</para>
      </summary>
      <example>
        <code title="GetAttributeValueAsString Example" description="The following example illustrates the use of the GetAttributeValueAsString method with two ways of specifying the attribute parameter." lang="C#">
            public static void GetAttributeValueAsStringExample()
            {
                CPoint&lt;float, int&gt; oPoint = new CPoint&lt;float, int&gt;("SamplePoint", "Sample Point");
                // The following two lines shows two ways to specify an attribute
                string strPointNameValue = oPoint.GetAttributeValueAsString(CPointAttributes.GetPointAttribute("PointName"));
                strPointNameValue = oPoint.GetAttributeValueAsString(CPointAttributes.S.PointName);
                // At this point strPointNameValue contains string "SamplePoint"
            }</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">
      <summary>
        <para>Returns the value of a point attribute as an object whose underlying type depends on the attribute being accessed and can be determined as illustrated in
            the example. The attribute can be specified using <see cref="T:Corning.GenSys.Point.CPointAttributes">CPointAttributes Class</see> and the list of valid attributes is returned by <see cref="M:Corning.GenSys.Point.CPoint`2.GetAllAttributes">GetAllAttributes
            Method</see>.</para>
        <para>This method is used by the <see cref="T:Corning.GenSys.Point.CPointServerBase">CPointServerBase Class</see>. It is easier to use the property associated with a point attribute instead of using
            this method.</para>
      </summary>
      <example>
        <code title="GetAttributeValueAsObject Example" description="The following example illustrates the use of the GetAttributeValueAsObject method with two ways of specifying the attribute parameter. It also illustrate a method to get the underlying type of the returned object." lang="C#">
            CPoint&lt;float, int&gt; oPoint = new CPoint&lt;float, int&gt;("SamplePoint", "Sample Point");
            // The following two lines shows two ways to specify an attribute
            object objPointNameValue = oPoint.GetAttributeValueAsObject(CPointAttributes.GetPointAttribute("PointName"));
            object objCurrentValueValue = oPoint.GetAttributeValueAsObject(CPointAttributes.S.CurrentValue);
            Type typeCurrentValueAttribute = CPointAttributes.S.CurrentValue.GetAttribType(oPoint);
            // At this point objPointNameValue contains string "SamplePoint"
            // objCurrentValueValue contains 0f and typeCurrentValueAttribute contains typeof(float)</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">
      <summary>
        <para>Sets the value of a writeable point attribute from a string. This call will succeed only if the type of the attribute being accessed can be deserialized
            from a string. The attribute can be specified using <see cref="T:Corning.GenSys.Point.CPointAttributes">CPointAttributes Class</see> and the list of valid attributes is returned by <see cref="M:Corning.GenSys.Point.CPoint`2.GetAllAttributes">GetAllAttributes
            Method</see>.</para>
        <para>This method is used by the <see cref="T:Corning.GenSys.Point.CPointServerBase">CPointServerBase Class</see>. It is easier to use the property associated with a point attribute instead of using
            this method.</para>
      </summary>
      <example>
        <code title="SetAttributeValueAsString Example" description="" lang="CS">
            CPoint&lt;float, int&gt; oPoint = new CPoint&lt;float, int&gt;("SamplePoint", "Sample Point");
            // The following two lines shows two ways to specify an attribute
            oPoint.SetAttributeValueAsString(CPointAttributes.GetPointAttribute("Precision"), "2");
            if (oPoint.Writeable)
            {
                oPoint.SetAttributeValueAsString(CPointAttributes.S.PointName, "10.5");
            }
            // At this point strPointNameValue contains string "SamplePoint"</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">
      <summary>
        <para>Sets the value of a writeable point attribute from an object whose underlying type must be the same as the type of the attribute being accessed which can be
            determined as illustrated in the example. The attribute can be specified using <see cref="T:Corning.GenSys.Point.CPointAttributes">CPointAttributes Class</see> and the list of valid attributes is
            returned by <see cref="M:Corning.GenSys.Point.CPoint`2.GetAllAttributes">GetAllAttributes Method</see>.</para>
        <para>This method is used by the <see cref="T:Corning.GenSys.Point.CPointServerBase">CPointServerBase Class</see>. It is easier to use the property associated with a point attribute instead of using
            this method.</para>
      </summary>
      <example>
        <code title="SetAttributeValueAsObject Example" description="" lang="CS">
            CPoint&lt;float, int&gt; oPoint = new CPoint&lt;float, int&gt;("SamplePoint", "Sample Point");
            // The following two lines shows two ways to specify an attribute
            oPoint.SetAttributeValueAsObject(CPointAttributes.GetPointAttribute("Precision"), 2);
            if (oPoint.Writeable &amp;&amp; CPointAttributes.S.CurrentValue.GetAttribType(oPoint) == typeof(float))
            {
                oPoint.SetAttributeValueAsObject(CPointAttributes.S.CurrentValue, 10.5f);
            }
            // At this point objPointNameValue contains string "SamplePoint"</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.GetAllAttributes">
      <summary>
        <para>Returns a string array containing the name of all attributes that can be written and/or read. The list depends on the
            <see cref="P:Corning.GenSys.Point.CPoint`2.PointType">PointType</see> and if the point is disabled or not.</para>
        <para>For a point of type CPoint&lt;TValue,TRaw&gt; which is not disabled, the results are: PointType, ValueType, PointName, PointShortName, GuiDescription,
            CurrentValue, Writeable, Hidden, Dynamic, RawType, RawValue, Precision, Increment, ReadAccessLevel, WriteAccessLevel, Units, Disabled, AllowedGroups, Groups,
            Alarmable, FaultDisabled, FaultCount, SetPointValue, ControlLoop, ControlLoopDisable, MinSettableValue, MaxSettableValue, UnitsSlope, UnitsOffset,
            MonChangePercent, MonChangePercentDisable, MonChangeValue, MonChangeValueDisable, LowFaultThreshold, LowLowFaultThreshold, HighFaultThreshold,
            HighHighFaultThreshold, FaultHysteresis</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.GetAllAttributesCanWrite">
      <summary>Returns a boolean array of the same size as the array returned by <see cref="M:Corning.GenSys.Point.CPoint`2.GetAllAttributes">GetAllAttributes Method</see>. Each element of the returned
            array indicate if the corresponding attribute is writeable through the use of <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see>
            or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString Method</see>. It does not give any indication regarding the readability of the attribute
            using the corresponding property. Also this information comes from static data common to all objects of this class and does not take into account access
            restriction that might have been imposed on the specific object. For example the attribute CurrentValue is shown as readable and writeable but if the object
            has the <see cref="P:Corning.GenSys.Point.CPoint`2.Writeable">Writeable Property</see> set to false the CurrentValue attribute cannot be written to using <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject
            Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString Method</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.GetAllAttributesCanRead">
      <summary>
        <para>Returns a boolean array of the same size as the array returned by <see cref="M:Corning.GenSys.Point.CPoint`2.GetAllAttributes">GetAllAttributes Method</see>. Each element of the
            returned array indicate if the corresponding attribute is readeable through the use of <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject
            Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see>. It does not give any
            indication regarding the readability of the attribute using the corresponding property. Also this information comes from static data common to all objects of
            this class and does not take into account access restriction that might have been imposed on the specific object. For example the attribute CurrentValue is
            shown as readable and writeable but if the object has the <see cref="P:Corning.GenSys.Point.CPoint`2.Writeable">Writeable Property</see> set to false the CurrentValue attribute cannot be
            written to using <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
            Method</see>.</para>
        <para>As of 01/28</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.SGetAllAttributes">
      <summary>Returns an array of strings with values: PointType, ValueType, PointName, PointShortName, GuiDescription, CurrentValue, Writeable, Hidden, Dynamic,
            RawType, RawValue, Precision, Increment, ReadAccessLevel, WriteAccessLevel, Units, Disabled, AllowedGroups, Groups, Alarmable, FaultDisabled, FaultCount,
            SetPointValue, ControlLoop, ControlLoopDisable, MinSettableValue, MaxSettableValue, UnitsSlope, UnitsOffset, MonChangePercent, MonChangePercentDisable,
            MonChangeValue, MonChangeValueDisable, LowFaultThreshold, LowLowFaultThreshold, HighFaultThreshold, HighHighFaultThreshold, FaultHysteresis.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.SupportEngineeringUnit(System.Boolean,System.Boolean)">
      <summary>
            Check if Engineering units are supported and enabled
            </summary>
      <param name="bBypassSlopCheck">
      </param>
      <param name="bThrowException">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.GetSetPointWithDelegate">
      <summary>
            Gets the current value from hardware if delegate exists
            </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.GetCurrentValueWithDelegate">
      <summary>
            Gets the current value from hardware if delegate exists
            </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.CopyPointDelegatesFromPoint(Corning.GenSys.Point.CPoint{`0,`1})">
      <summary>
            Copy all Read and Write delegates for all attributes from oPoint to this.
            </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.SerializeToXML(System.String@)">
      <summary>Serializes the point to a XML string.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.SerializeToFile(System.String)">
      <summary>Serializes the point to a XML file.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.ApplySettingsFromObject(System.Object,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Realization of <see cref="T:Corning.GenSys.Point.ISettingApplierFromObject">ISettingApplierFromObject Interface</see>.</summary>
      <param name="objSettings">
      </param>
      <param name="ienumstrExcludedMembers">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.ApplySettingsFromXml(System.String)">
      <summary>
        <para>Used internally by the <see cref="T:Corning.GenSys.Point.CHierarchy`1">CHierarchy&lt;T&gt; Class</see> to apply settings read from a xml string.</para>
        <para>Note that all fields are assigned except for the PointName.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.ApplySettingsFromFile(System.String)">
      <summary>
        <para>Used internally by the <see cref="T:Corning.GenSys.Point.CHierarchy`1">CHierarchy&lt;T&gt; Class</see> to apply settings read from a file.</para>
        <para>Note that all fields are assigned except for the PointName.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.CreateFromXml(System.String,System.String)">
      <summary>Creates a new point based on a XML string that was previously created by calling the <see cref="M:Corning.GenSys.Point.CPoint`2.SerializeToXML(System.String@)">SerializeToXML Method</see>. The name
            of the newly created point can be optionally specified otherwise the name contained in the XML string is used.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.CreateFromFile(System.String,System.String)">
      <summary>Creates a new point based on a XML file that was previously created by calling the <see cref="M:Corning.GenSys.Point.CPoint`2.SerializeToFile(System.String)">SerializeToFile Method</see>. The name
            of the newly created point can be optionally specified otherwise the name contained in the XML file is used.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.AddGroup(System.String)">
      <summary>
        <para>Adds a group to the list of groups the point belongs to. If the group name ends with character '.', the string <see cref="P:Corning.GenSys.Point.CPoint`2.Groups">Groups</see>[0]
            is appended as a suffix. m_<see cref="P:Corning.GenSys.Point.CPoint`2.Groups">Groups</see>[0] is the group automatically created during point creation. See <see cref="P:Corning.GenSys.Point.CPoint`2.Groups">Groups
            Property</see></para>
        <para>Note that a point can only be added to a group that belongs to <see cref="P:Corning.GenSys.Point.CPoint`2.AllowedGroups">AllowedGroups Property</see></para>
      </summary>
      <param name="strGroup">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.Add``3(``1,``2)">
      <summary>
            Returns tA + tB
            </summary>
      <typeparam name="TOut">
      </typeparam>
      <typeparam name="TA">
      </typeparam>
      <typeparam name="TB">
      </typeparam>
      <param name="tA">
      </param>
      <param name="tB">
      </param>
      <returns> tA + tB </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.Subtract``3(``1,``2)">
      <summary>
            Returns tA - tB
            </summary>
      <typeparam name="TOut">
      </typeparam>
      <typeparam name="TA">
      </typeparam>
      <typeparam name="TB">
      </typeparam>
      <param name="tA">
      </param>
      <param name="tB">
      </param>
      <returns> tA - tB </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPoint`2.Compare``2(``0,``1,System.Double,System.Boolean)">
      <summary>if tA &lt; tB returns -1<br />
            if tA = tB returns 0<br />
            if tA &gt; tB returns 1</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.LastFaultEventArg">
      <summary>A <see cref="T:Corning.GenSys.Point.CAlarmEventArg">CAlarmEventArg Class</see> instance containing the last argument reported the last time the <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> was
            raised.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.SettingsName">
      <summary>
        <para>This property realizes part of <see cref="T:Corning.GenSys.Point.ISettingsName">ISettingsName Interface</see> and returns <see cref="P:Corning.GenSys.Point.CPoint`2.PointName">PointName Property</see>.</para>
        <para>This property is used when the point is used to store a setting.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.PointType">
      <summary>returns <em>typeof(<see cref="T:Corning.GenSys.Point.IPoint">IPoint</see>)</em> which is the interface realized by <see cref="T:Corning.GenSys.Point.CPoint`2">CPoint&lt;TValue,TRaw&gt;</see></summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.ValueType">
      <summary>The type of the point's current value (TValue)</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.RawType">
      <summary>The type of the point's raw value (TRaw)</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.PointShortName">
      <summary>If <see cref="P:Corning.GenSys.Point.CPoint`2.PointName">PointName Property</see> is composed of multiple strings separated by the <see cref="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">mc_strNameSeparator
            Field</see> string, this property returns the string after the last separator. For example if the point name is "Main.Test.MyPoint"
            this property will be "MyPoint".</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.PointName">
      <summary>
        <para>Name of the point. This name should be unique if the point is to be a member of a <see cref="T:Corning.GenSys.Point.CPointsServer">CPointsServer Class</see>. The name can be composed of multiple
            strings separated by the <see cref="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">mc_strNameSeparator Field</see> string to form a path which is used by <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see> to create a hierarchy.</para>
        <para>This property will not change through out the life of the point object and its value is set at construction time.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.GuiDescription">
      <summary>
        <para>A string which contains the description of the point. It is used by <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User Control</see>.</para>
        <para>This property will not change through out the life of the point object and is set at construction time.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.CurrentValue">
      <summary>
        <para>The current value of the point with a type of TValue. The relationship between this property and <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">Rawalue Property</see> is defined
            by the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>Reading this property will first results in a call to the read delegates for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> if
            one was added. If no delegate was added for the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> then the read delegate for
            <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see> is called if one has been added. After a call to a read delegate the current and raw value
            internal field are assigned. Note that if a read delegate is associated to both <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> and
            <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, only the read delegate for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
            Attribule</see> will be called.</para>
        <para>Writing to this property is only allowed if <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic Property</see> is true. Otherwise an exception will be thrown. Writing to this
            property will results in a call to the write delegates (if set at construction time) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
            Attribule</see> first and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see> second. Note that the call to the
            delegates is performed before the current and raw value internal fields are assigned. Therefore the delegates with signature void WriteDelegate(IPoint iPoint,
            TValue tvalueToWrite, object objParam) have access, through the iPoint parameter, to the old current and raw value.</para>
        <para>The following actions will result in an update of the internal current value field and in turn this property.</para>
        <list type="number">
          <item>Writing to this property or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (set at construction time) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>
                and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either this property or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue
                Property</see> or a call to <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject Method</see> or
                <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
                Attribule</see>. NOTE: The update of the internal current value field occurs only if the value returned by the read delegate is
                different from the old value of the internal current value field.</item>
        </list>
        <para>
        </para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.CurrentValueCached">
      <summary>
        <para>This is the same property as <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> except that no read or write delegates are called. It only reads or writes the internal
            memory of the point where the current value is cached.</para>
        <para>
        </para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.Increment">
      <summary>
        <para>A value that can be used in an up/down control to increment or decrement the current value of the point. The Point object simply stores this value and does
            not use it internally.</para>
        <para>The value of the internal field does not change through out the life of the object and is initialize at construction time.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.RawValue">
      <summary>
        <para>The raw value of the point with a type of TRaw. The relationship between this property and <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> is
            defined by the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>Reading this property will first results in a call to the read delegates for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> if
            one was added. If no delegate was added for the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> then the read delegate for
            <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see> is called if one has been added. After a call to a read delegate the current and raw value
            internal field are assigned. Note that if a read delegate is assotiated to both <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see> and
            <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, only the read delegate for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
            Attribule</see> will be called.</para>
        <para>Writing to this property is only allowed if <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic Property</see> is true. Otherwise an exception will be thrown. NO DELEGATES WILL
            BE CALLED WHEN WRITING TO THIS PROPERTY.</para>
        <para>The following actions will result in an update of the internal current value field and in turn this property.</para>
        <list type="number">
          <item>Writing to this property <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (set at construction time) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>
                and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either this property or <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue
                Property</see> or a call to <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject Method</see> or
                <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
                Attribule</see>. NOTE: The update of the the internal current value field occurs only if the value returned by the read delegate
                is different from the old value of the internal current value field.</item>
        </list>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.SetPointValue">
      <summary>
        <para>An object of this class can also represent a controlled value. in that case this property represent where the current value should be controlled
            to.</para>
        <para>In order to read or write this property <see cref="P:Corning.GenSys.Point.CPoint`2.ControlLoop">ControlLoop Property</see> must be true otherwise an exception will be thrown.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">
      <summary>
        <para>The minimum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to.</para>
        <para>WARNING: It is possible to set this property to a value greater than what is contained in the internal current value field. Doing this will not affect the
            value of the internal current value field which will remain at a lower value than MinSettableValue.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.MaxSettableValue">
      <summary>
        <para>The maximum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to.</para>
        <para>WARNING: It is possible to set this property to a value lower than what is contained in the internal current value field. Doing this will not affect the
            value of the internal current value field which will remain at a higher value than MaxSettableValue.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.Dynamic">
      <summary>
        <para>If this value is set to true the user can expect that the value of the internal current value field can be changed by the software exposing the point.</para>
        <para>This value must be set to true in order to write to <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see>, or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue
            Property</see>.</para>
        <para>NOTE: It does not need to be set to true if the point object contains read delegates for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
            Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see> even though these delegates will modify the
            internal current value field.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.Writeable">
      <summary>
        <para>This property controls the writeability of the points <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue attribute</see> via
            <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> and <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
            Method</see>.</para>
        <para>Not that the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> writeability is not controlled by this property it is controlled by the <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic
            Property</see>.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.Hidden">
      <summary>This value is used by the <see cref="T:Corning.GenSys.Point.CPointServerBase">CPointServerBase Class</see> to determine if the point should be added to the list of point names returned by
            the <see cref="O:Corning.GenSys.Point.CPointServerBase.EnumPoints">EnumPoints Method</see></summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.Alarmable">
      <summary>
        <para>This property is only relevant if TValue realizes the System.Runtime.InteropServices.IComparable interface.</para>
        <para>When set to true the internal current value field will be tested against thresholds and <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Events</see> will be raised
            when it goes over a threshold. This can be enabled or disabled using the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see>.</para>
        <para>Unlike the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> this property is set at construction time and will not change through out the lifetime
            of the object.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.ControlLoop">
      <summary>
        <para>If set to true the instantiated point object represents a controlled value. In that case <see cref="P:Corning.GenSys.Point.CPoint`2.SetPointValue">SetPointValue</see>
            represent where the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue</see> should be controlled to.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.ControlLoopDisable">
      <summary>This value is simply stored and not used internally. The intent of this property is to control if the control loop functionality is enabled or disabled. This
            property should be set to true if <see cref="P:Corning.GenSys.Point.CPoint`2.ControlLoop">ControlLoop Property</see> is false.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.Precision">
      <summary>
        <para>Specifies the number of digits after the decimal point. This value can be used externally to display the current value of the point. The Point object simply
            stores this value and does not use it internally.</para>
        <para>The value of the internal field is set at construction time and does not change through out the life of the object.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.ReadAccessLevel">
      <summary>
        <para>This contains the list, contained in the flag enum EAccessLevel, of access levels which are allowed to read from the point. This value is initialized in the
            Point constructor only and will not change through out the life of the Point object. The default value for that property is specified in the base class field
            <see cref="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelReadDefault" /> and can be accessed via property <see cref="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">ReadAccessLevelDefault Property</see>.</para>
        <para>Note that the point class only stores this value and does not enforce the policy. This value is used and the policy enforced by the <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see>.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.WriteAccessLevel">
      <summary>
        <para>This contains the list, contained in the flag enum EAccessLevel, of access levels which are allowed to write to the point. This value is initialized in the
            Point constructor only and will not change through out the life of the Point object. The default value for that property is specified in the base class field
            <see cref="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelWriteDefault" /> and can be accessed via property <see cref="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">WriteAccessLevelDefault Property</see>.</para>
        <para>Note that the point class only stores this value and does not enforce the policy. This value is used and the policy enforced by the <see cref="!:Corning.GenSys.PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see>.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.Units">
      <summary>A string which contains the units of the value returned by <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see></summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.UnitsSlope">
      <summary>
        <para>The slope parameter used for the linear conversion to/from raw value with the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>This is only applicable if TValue and TRaw are of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their nullable
            counterparts.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.UnitsOffset">
      <summary>
        <para>The offset parameter used for the linear conversion to/from raw value with the following equation: <em>CurrentValue = RawValue * Slope + Offset</em></para>
        <para>This is only applicable if TValue and TRaw are of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their nullable
            counterparts.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.MonChangePercent">
      <summary>
        <para>If the internal current value field is updated which results in a change in percent by more than the value specified in the MonChangePercent Property, the
            <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged Event</see> is triggered if <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangePercentDisable">MonChangePercentDisable Property</see>
            is false. This is only applicable if TValue is of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their nullable
            counterparts.</para>
        <para>This parameter should be greater than 0 except in the following two cases where TValue can be any type:</para>
        <list type="number">
          <item>If this property is set to <see cref="F:Corning.GenSys.Point.CPointBase.mc_nMonChangePercentDifferentValueTrigger">mc_nMonChangePercentDifferentValueTrigger Field</see> (0), whenever the
                internal current value field changes to a value different from the old value, the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged Event</see> is
                triggered.</item>
          <item>If this property is set to <see cref="F:Corning.GenSys.Point.CPointBase.mc_nMonChangePercentSameValueTrigger">mc_nMonChangePercentSameValueTrigger Field</see> (-6464), whenever the internal
                current value field changes to a value even if it is the same as the old value, the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged Event</see> is
                triggered.</item>
        </list>
        <para>The following actions will result in an update of the internal current value field.</para>
        <list type="number">
          <item>Writing to either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (see parameter <em>aiPointAttributReadeDelegate</em>) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
                Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue
                Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see> or a call to <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject
                Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see> using the
                <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>. NOTE: The update of the the internal current value field occurs only if the
                value returned by the read delegate is different from the old value of the internal current value field.</item>
        </list>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.MonChangePercentDisable">
      <summary>When set to false the change in percent of the internal current value field is not evaluated. Therefore no <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged
            Event</see> will be triggered based on percent change of the internal current value field.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.MonChangeValue">
      <summary>
        <para>If the internal current value field is updated which results in a change such that abs(OldValue-NewValue) is greater or equal to the value specified in the
            MonChangeValue Property, the <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged Event</see> is raised if <see cref="P:Corning.GenSys.Point.CPoint`2.MonChangeValueDisable">MonChangeValueDisable
            Property</see> is false. This is only applicable if TValue is of types sbyte, byte, short, ushort, int, uint, long, ulong,
            float, double or one of their nullable counterparts.</para>
        <para>The following actions will result in an update of the internal current value field.</para>
        <list type="number">
          <item>Writing to either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see>.</item>
          <item>Calling <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
                Method</see> using the <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see></item>
          <item>If the point object contains read delegates (see parameter <em>aiPointAttributReadeDelegate</em>) for <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue
                Attribule</see> and/or <see cref="F:Corning.GenSys.Point.CPointAttributes.RawValue">CPointAttributes.S.RawValue Attribule</see>, a read of either <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue
                Property</see> or <see cref="P:Corning.GenSys.Point.CPoint`2.RawValue">RawValue Property</see> or a call to <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject
                Method</see> or <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString Method</see> using the
                <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue Attribule</see>. NOTE: The update of the the internal current value field occurs only if the
                value returned by the read delegate is different from the old value of the internal current value field.</item>
        </list>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.MonChangeValueDisable">
      <summary>When set to false the value change of the internal current value field is not evaluated. Therefore no <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged
            Event</see> will be triggered based on value change of the internal current value field.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.LowFaultThreshold">
      <summary>
        <para>If TValue is bool then only <see cref="P:Corning.GenSys.Point.CPoint`2.HighFaultThreshold">HighFaultThreshold Property</see> is relevant</para>
        <para>This property is only relevant if TValue realizes the System.Runtime.InteropServices.IComparable interface and <see cref="P:Corning.GenSys.Point.CPoint`2.Alarmable">Alarmable
            Property</see> is true.</para>
        <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is false, the point fault condition
            is evaluated. All fault evaluation are performed using a threshold as well as an hysteresis contained in
            <see cref="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">FaultHysteresis</see>.</para>
        <para>If the internal current value field is below this threshold and above the <see cref="P:Corning.GenSys.Point.CPoint`2.LowLowFaultThreshold">LowLowFaultThreshold</see>, the point is
            placed in <see cref="F:Corning.GenSys.Point.EFaultType.Low">Low</see> fault type state. If the internal current value field is above this threshold and below
            <see cref="P:Corning.GenSys.Point.CPoint`2.HighFaultThreshold">HighFaultThreshold</see>, the point is placed in <see cref="T:Corning.GenSys.Point.EFaultType">None</see>:EFaultType.None% fault type state.</para>
        <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered whose argument
            contains the new point fault type state.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.LowLowFaultThreshold">
      <summary>
        <para>If TValue is bool then only <see cref="P:Corning.GenSys.Point.CPoint`2.HighFaultThreshold">HighFaultThreshold Property</see> is relevant</para>
        <para>This property is only relevant if TValue realizes the System.Runtime.InteropServices.IComparable interface and <see cref="P:Corning.GenSys.Point.CPoint`2.Alarmable">Alarmable
            Property</see> is true.</para>
        <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is false, the point fault condition
            is evaluated. All fault evaluation are performed using a threshold as well as an hysteresis contained in
            <see cref="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">FaultHysteresis</see>.</para>
        <para>If the internal current value field is below this threshold the point is placed in <see cref="F:Corning.GenSys.Point.EFaultType.LowLow">LowLow</see> fault type state. If the internal current
            value field is above this threshold and below <see cref="P:Corning.GenSys.Point.CPoint`2.LowFaultThreshold">LowFaultThreshold</see>, the point is placed in
            <see cref="T:Corning.GenSys.Point.EFaultType">Low</see>:EFaultType.Low% fault type state.</para>
        <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered whose argument
            contains the new point fault type state.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.HighFaultThreshold">
      <summary>
        <para>If TValue is bool then this is the only relevant threshold. If the current value is equal to the high threshold then the point goes into the high fault
            state and if it is different it goes out of fault state.</para>
        <para>This property is only relevant if TValue realizes the System.Runtime.InteropServices.IComparable interface and <see cref="P:Corning.GenSys.Point.CPoint`2.Alarmable">Alarmable
            Property</see> is true.</para>
        <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is false, the point fault condition
            is evaluated. All fault evaluation are performed using a threshold as well as an hysteresis contained in
            <see cref="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">FaultHysteresis</see>.</para>
        <para>If the internal current value field is above this threshold and below the <see cref="P:Corning.GenSys.Point.CPoint`2.HighHighFaultThreshold">HighHighFaultThreshold</see>, the point is
            placed in <see cref="F:Corning.GenSys.Point.EFaultType.High">High</see> fault type state. If the internal current value field is below this threshold and above
            <see cref="P:Corning.GenSys.Point.CPoint`2.LowFaultThreshold">LowFaultThreshold</see>, the point is placed in <see cref="T:Corning.GenSys.Point.EFaultType">None</see>:EFaultType.None%</para>
        <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered whose argument
            contains the new point fault type state.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.HighHighFaultThreshold">
      <summary>
        <para>If TValue is bool then only <see cref="P:Corning.GenSys.Point.CPoint`2.HighFaultThreshold">HighFaultThreshold Property</see> is relevant</para>
        <para>This property is only relevant if TValue realizes the System.Runtime.InteropServices.IComparable interface and <see cref="P:Corning.GenSys.Point.CPoint`2.Alarmable">Alarmable
            Property</see> is true.</para>
        <para>Whenever the internal current value field is updated and if <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is false, the point fault condition
            is evaluated. All fault evaluation are performed using a threshold as well as an hysteresis contained in
            <see cref="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">FaultHysteresis</see>.</para>
        <para>If the internal current value field is above this threshold the point is placed in <see cref="F:Corning.GenSys.Point.EFaultType.HighHigh">HighHigh</see> fault type state. If the internal current
            value field is below this threshold and above <see cref="P:Corning.GenSys.Point.CPoint`2.HighFaultThreshold">HighFaultThreshold</see> the point is placed in <see cref="F:Corning.GenSys.Point.EFaultType.High">High</see>.</para>
        <para>After each evaluation of the point fault state, if the state has changed a <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered whose argument
            contains the new point fault type state.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.FaultHysteresis">
      <summary>
        <para>This property is only relevant if TValue is of types sbyte, byte, short, ushort, int, uint, long, ulong, float, double or one of their nullable counterpart
            and <see cref="P:Corning.GenSys.Point.CPoint`2.Alarmable">Alarmable Property</see> is true.</para>
        <para>A value which is added to low fault thresholds or subtracted from high fault thresholds based on the value of the internal current value field.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">
      <summary>
        <para>This property is only relevant if TValue realizes the System.Runtime.InteropServices.IComparable interface and <see cref="P:Corning.GenSys.Point.CPoint`2.Alarmable">Alarmable
            Property</see> is true.</para>
        <para>When set to false no <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is triggered regardless the value of the current value internal field. Also the fault
            evaluation calculation are not performed.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.Disabled">
      <summary>
        <para>If this property is true only this property is accessible. Access to any other property results in an exception. Further more <see cref="M:Corning.GenSys.Point.CPoint`2.GetAllAttributes">GetAllAttributes
            Method</see> will return an array with only the string "Disable" and <see cref="M:Corning.GenSys.Point.CPoint`2.GetAllAttributesCanRead">GetAllAttributesCanRead
            Method</see>, <see cref="M:Corning.GenSys.Point.CPoint`2.GetAllAttributesCanWrite">GetAllAttributesCanWrite Method</see> return an array with a
            single value true. Also, <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject Method</see>, <see cref="M:Corning.GenSys.Point.CPoint`2.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString
            Method</see>, <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see>,
            <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString Method</see> will only accept <see cref="F:Corning.GenSys.Point.CPointAttributes.Disabled">CPointAttributes.S.Disabled</see> for
            their oPointAttribute parameter. Access to any other method will result in an exception.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.FaultCount">
      <summary>The internal field access through this property is incremented each time the <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Event</see> is raised except when it is
            raised with argument <see cref="F:Corning.GenSys.Point.EFaultType.None">None Field</see>. Reading this property will reset the internal field to 0.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.AllowedGroups">
      <summary>Contains a list of string representing the list of groups the point can belong to. Note that if the <see cref="P:Corning.GenSys.Point.CPoint`2.PointName">PointName Property</see> contains
            at least one separator ('.') then a group is added automatically at construction time. The name of the added group is the string preceding the last separator.
            For example if a point is named "My.First.Point" the group "My.First" will be added as the first allowed group.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPoint`2.Groups">
      <summary>Contains the list of groups the point belongs to. Note that if the <see cref="P:Corning.GenSys.Point.CPoint`2.PointName">PointName Property</see> contains at least one separator ('.')
            then a group is added automatically at construction time. The name of the added group is the string preceding the last separator. For example if a point is
            named "My.First.Point" the group "My.First" will be added as the first group this point belongs to.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointLogger">
      <summary>This class just holds the logger reference. Rather than trying to set a logger for each CPoint&lt;TValue, TRaw&gt; combination, this logger reference is
            copied into the ms_iLogger of the class the system automatically creates.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointAttributeReadDelegateFactory">
      <summary>
        <para>Class allowing the use of a Func&lt;object, object&gt; delegate for a CPointAttributeReadDelegate.</para>
        <para>The parameters are expected to be as follows: objAttributeValue = funcObjectDelegate(objParam)</para>
      </summary>
      <typeparam name="TAttrib">
      </typeparam>
    </member>
    <member name="M:Corning.GenSys.Point.CPointAttributeReadDelegateFactory.Create(Corning.GenSys.Point.CPointAttribute,System.Func{System.Object,System.Object},System.Object,System.Type)">
      <summary>Creates an object realizing the <see cref="T:Corning.GenSys.Point.IPointAttributeReadDelegate">IPointAttributeReadDelegate Interface</see>.</summary>
      <param name="oPointAttribute">
      </param>
      <param name="funcObjectDelegate">
      </param>
      <param name="objAttributeDelegateParameters">
      </param>
      <param name="typeValue">In most cases the type of the attribute is obtained from oPointAttribute.AttribType. But in the case where the
            attribute is CurrentValue, RawValue, MinValue... the type is part of the point instance and is therefore not known. In that case the type
            of the attribute needs to be passed in the typeValue to prevent a NullReference exception</param>
      <returns>
      </returns>
    </member>
    <member name="T:Corning.GenSys.Point.IPointAttributeReadDelegateFactory">
      <summary>
            Allows the use of a single delegate to be shared among many CPointAttributeReadDelegate
            </summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointAttributeReadDelegateFactory`1">
      <summary>
        <para>Class allowing the use of a Func&lt;object, object&gt; delegate for a CPointAttributeReadDelegate.</para>
        <para>The parameters are expected to be as follows: objAttributeValue = funcObjectDelegate(objParam)</para>
        <para>It realizes <see cref="T:Corning.GenSys.Point.IPointAttributeReadDelegate">IPointAttributeReadDelegate Interface</see></para>
      </summary>
      <typeparam name="TAttrib">
      </typeparam>
    </member>
    <member name="T:Corning.GenSys.Point.CPointAttributeWriteDelegateFactory">
      <summary>
        <para>Class allowing the use of a Action&lt;object, object&gt; delegate for a CPointAttributeWriteDelegate.</para>
        <para>The parameters are expected to be as follows: actionObjectDelegate(objAttributeValue, objParam)</para>
        <para>It realizes <see cref="T:Corning.GenSys.Point.IPointAttributeWriteDelegate">IPointAttributeWriteDelegate Interface</see></para>
      </summary>
      <typeparam name="TAttrib">
      </typeparam>
    </member>
    <member name="M:Corning.GenSys.Point.CPointAttributeWriteDelegateFactory.Create(Corning.GenSys.Point.CPointAttribute,System.Action{System.Object,System.Object},System.Object,System.Type)">
      <summary>Creates an object realizing the <see cref="T:Corning.GenSys.Point.IPointAttributeWriteDelegate">IPointAttributeWriteDelegate Interface</see>.</summary>
      <param name="oPointAttribute">
      </param>
      <param name="actionObjectDelegate">
      </param>
      <param name="objAttributeDelegateParameters">
      </param>
      <param name="typeValue">In most cases the type of the attribute is obtained from oPointAttribute.AttribType. But in the case where the
            attribute is CurrentValue, RawValue, MinValue... the type is part of the point instance and is therefore not known. In that case the type
            of the attribute needs to be passed in the typeValue to prevent a NullReference exception</param>
      <returns>
      </returns>
    </member>
    <member name="T:Corning.GenSys.Point.IPointAttributeWriteDelegateFactory">
      <summary>
            Allows the use of a single delegate to be shared among many CPointAttributeWriteDelegate
            </summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointAttributeWriteDelegateFactory`1">
      <summary>
        <para>Class allowing the use of an Action&lt;object, object&gt; delegate for a CPointAttributeWriteDelegate.</para>
        <para>The parameters are expected to be as follows: actionObjectDelegate(objAttributeValue, objParam)</para>
      </summary>
      <typeparam name="TAttrib">
      </typeparam>
    </member>
    <member name="T:Corning.GenSys.Point.CPointFactory">
      <summary>
            Allows the creation of points without the use of generics.
            </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointFactory.CreatePoint(System.Type,System.String,System.String,System.Object,System.Object,System.Int32,System.Object,System.Object,System.String,System.Nullable{Corning.GenSys.Point.EAccessLevel},System.Nullable{Corning.GenSys.Point.EAccessLevel},System.Func{System.Object,System.Object},System.Object,System.Action{System.Object,System.Object},System.Object)">
      <summary>
        <para>Creates a simple point which is writeable and not hidden. It will be alarmable although the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is
            set to true and all of the low thresholds are set to the min value of the point type and the high thresholds are set to the max value of the point type.</para>
        <para>The created point will not support engineering units and therefore needs only one type to be defined. Also, it will not support control loop
            capabilities.</para>
      </summary>
      <param name="typeValue">The value type of the point to be created. The created point will be of type CPoint&lt;typeValue, typeValue&gt;. This can be retreived with the
            readonly <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</param>
      <param name="strPointName">Name of the point. This name should be unique if the point is to be a member of a <see cref="T:Corning.GenSys.Point.CPointsServer">CPointsServer Class</see>. The name can be composed of multiple
            strings separated by the <see cref="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">mc_strNameSeparator Field</see> string to form a path which is used by <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see> to create a hierarchy. This Name will not change through out the life of the point object and can be accessed for
            reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.PointName">PointName Property</see></param>
      <param name="strGuiDescription">A string wich contains the description of the point. It is used by <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User Control</see>. This description will not
            change through out the life of the point object and can be accessed for reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.GuiDescription">GuiDescription Property</see></param>
      <param name="objTValueCurrentValue">
        <para>The current value of the point as an object. This parameter should be set to an object whoes underlying type should be convertible to TValue. This value can
            subsequently be changed via the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or the <see cref="M:Corning.GenSys.Point.CPoint`2.SetCurrentValue(`0,System.Boolean)">SetCurrentValue
            Method</see>.</para>
        <para>If the type TValue of the point is not a reference or nullable type and this parameter is set to "null" then the Current Value of the point is set to the
            default value of the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue).</para>
      </param>
      <param name="objTValueIncrement">
        <para>A value that can be used in an up/down control to increment or decrement the current value of the point. The Point object simply stores this value and does
            not use it internally.</para>
        <para>If this parameter is set to "null" the internal field will be set to the conversion of the constant 1L to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType
            Property</see> (TValue). If the conversion is unsuccessful the internal field is set to the default value of TValue.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Increment">Increment
            Property</see>.</para>
      </param>
      <param name="nPrecision">
        <para>Specifies the number of digits after the decimal point. This value can be used externally to display the current value of the point. The Point object simply
            stores this value and does not use it internally.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Precision">Precision
            Property</see>.</para>
      </param>
      <param name="objTValueMinValue">
        <para>The minimum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue). This is only</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MinSettableValue
            Property</see>.</para>
      </param>
      <param name="objTValueMaxValue">
        <para>The maximum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MaxSettableValue
            Property</see>.</para>
      </param>
      <param name="strUnits">
        <para>A string which contains the units of the value returned by <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see></para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Units">Units
            Property</see>.</para>
      </param>
      <param name="eaccesslevelWrite">
        <para>This contains the list, contained in the flag enum EAccessLevel, of access levels which are allowed to write to the point. The default value for that
            property is specified in the base class field <see cref="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelWriteDefault" /> and can be accessed via property <see cref="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">WriteAccessLevelDefault
            Property</see>.</para>
        <para>Note that the point class only stores this value and does not enforce the policy. This value is used and the policy enforced by the <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see>.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.WriteAccessLevel">WriteAccessLevel
            Property</see></para>
      </param>
      <param name="eaccesslevelRead">
        <para>This contains the list, contained in the flag enum EAccessLevel, of access levels which are allowed to read from the point. The default value for that
            property is specified in the base class field <see cref="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelReadDefault" /> and can be accessed via property <see cref="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">ReadAccessLevelDefault
            Property</see>.</para>
        <para>Note that the point class only stores this value and does not enforce the policy. This value is used and the policy enforced by the <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see>.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.ReadAccessLevel">ReadAccessLevel
            Property</see>.</para>
      </param>
      <param name="funcReadValue">
        <para>A function that takes an object parameter to which objParamRead will be passed and that returns an object which will be used to set the internal current
            value of the point whenever this value is read. Not that the undelying type of the returned object has to be of the same type as parameter typeValue
            (TValue).</para>
        <para>CurrentValue = funcRead(objParamRead)</para>
      </param>
      <param name="objParamRead">Parameter used when function in parameter funcReadValue is called.</param>
      <param name="actionWriteValue">
        <para>An action that takes two object parameters. The first parameter will contain the current value of the point and the second parameter will contain the object
            passed to parametr objParamWrite. This action will be called whenever the point current value is written to.</para>
        <para>actionWriteValue(CurrentValue, objParamWrite)</para>
      </param>
      <param name="objParamWrite">The parameter used when action passed in parameter actionWriteValue is called. This correspond to the second parameter of the action, the first parameter
            of the action being the point current value.</param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointFactory.CreatePoint(System.Type,System.String,System.String,System.Object,System.Object,System.Object,System.String,System.Func{System.Object,System.Object},System.Object,System.Action{System.Object,System.Object},System.Object)">
      <summary>
        <para>Creates a simple point which is writeable and not hidden and is assigned default read and write access levels. Its increment value is set to 1 converted to
            typeValue if possible and its prescision value is set to -1.  It will be alarmable although the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled
            Property</see> is set to true and all of the low thresholds are set to the min value of the point type and the high thresholds are
            set to the max value of the point type.</para>
        <para>The created point will not support engineering units and therefore needs only one type to be defined. Also, it will not support control loop
            capabilities.</para>
      </summary>
      <param name="typeValue">The value type of the point to be created. The created point will be of type CPoint&lt;typeValue, typeValue&gt;. This can be retreived with the
            readonly <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</param>
      <param name="strPointName">Name of the point. This name should be unique if the point is to be a member of a <see cref="T:Corning.GenSys.Point.CPointsServer">CPointsServer Class</see>. The name can be composed of multiple
            strings separated by the <see cref="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">mc_strNameSeparator Field</see> string to form a path which is used by <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see> to create a hierarchy. This Name will not change through out the life of the point object and can be accessed for
            reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.PointName">PointName Property</see></param>
      <param name="strGuiDescription">A string wich contains the description of the point. It is used by <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User Control</see>. This description will not
            change through out the life of the point object and can be accessed for reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.GuiDescription">GuiDescription Property</see></param>
      <param name="objTValueCurrentValue">
        <para>The current value of the point as an object. This parameter should be set to an object whoes underlying type should be convertible to TValue. This value can
            subsequently be changed via the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or the <see cref="M:Corning.GenSys.Point.CPoint`2.SetCurrentValue(`0,System.Boolean)">SetCurrentValue
            Method</see>.</para>
        <para>If the type TValue of the point is not a reference or nullable type and this parameter is set to "null" then the Current Value of the point is set to the
            default value of the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue).</para>
      </param>
      <param name="objTValueMinValue">
        <para>The minimum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue). This is only</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MinSettableValue
            Property</see>.</para>
      </param>
      <param name="objTValueMaxValue">
        <para>The maximum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MaxSettableValue
            Property</see>.</para>
      </param>
      <param name="strUnits">
        <para>A string which contains the units of the value returned by <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see></para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Units">Units
            Property</see>.</para>
      </param>
      <param name="funcReadValue">
        <para>A function that takes an object parameter to which objParamRead will be passed and that returns an object which will be used to set the internal current
            value of the point whenever this value is read. Not that the undelying type of the returned object has to be of the same type as parameter typeValue
            (TValue).</para>
        <para>CurrentValue = funcRead(objParamRead)</para>
      </param>
      <param name="objParamRead">Parameter used when function in parameter funcReadValue is called.</param>
      <param name="actionWriteValue">
        <para>An action that takes two object parameters. The first parameter will contain the current value of the point and the second parameter will contain the object
            passed to parametr objParamWrite. This action will be called whenever the point current value is written to.</para>
        <para>actionWriteValue(CurrentValue, objParamWrite)</para>
      </param>
      <param name="objParamWrite">The parameter used when action passed in parameter actionWriteValue is called. This correspond to the second parameter of the action, the first parameter
            of the action being the point current value.</param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointFactory.CreatePoint(System.Type,System.String,System.String,System.Object,System.Object,System.Object,System.String,System.Boolean,System.Func{System.Object,System.Object},System.Object,System.Action{System.Object,System.Object},System.Object)">
      <summary>
        <para>Creates a simple point which is not hidden and is assigned default read and write access levels. Its increment value is set to 1 converted to
            typeValue if possible and its prescision value is set to -1.  It will be alarmable although the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled
            Property</see> is set to true and all of the low thresholds are set to the min value of the point type and the high thresholds are
            set to the max value of the point type.</para>
        <para>The created point will not support engineering units and therefore needs only one type to be defined. Also, it will not support control loop
            capabilities.</para>
      </summary>
      <param name="typeValue">The value type of the point to be created. The created point will be of type CPoint&lt;typeValue, typeValue&gt;. This can be retreived with the
            readonly <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</param>
      <param name="strPointName">Name of the point. This name should be unique if the point is to be a member of a <see cref="T:Corning.GenSys.Point.CPointsServer">CPointsServer Class</see>. The name can be composed of multiple
            strings separated by the <see cref="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">mc_strNameSeparator Field</see> string to form a path which is used by <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see> to create a hierarchy. This Name will not change through out the life of the point object and can be accessed for
            reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.PointName">PointName Property</see></param>
      <param name="strGuiDescription">A string wich contains the description of the point. It is used by <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User Control</see>. This description will not
            change through out the life of the point object and can be accessed for reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.GuiDescription">GuiDescription Property</see></param>
      <param name="objTValueCurrentValue">
        <para>The current value of the point as an object. This parameter should be set to an object whoes underlying type should be convertible to TValue. This value can
            subsequently be changed via the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or the <see cref="M:Corning.GenSys.Point.CPoint`2.SetCurrentValue(`0,System.Boolean)">SetCurrentValue
            Method</see>.</para>
        <para>If the type TValue of the point is not a reference or nullable type and this parameter is set to "null" then the Current Value of the point is set to the
            default value of the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue).</para>
      </param>
      <param name="objTValueMinValue">
        <para>The minimum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue). This is only</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MinSettableValue
            Property</see>.</para>
      </param>
      <param name="objTValueMaxValue">
        <para>The maximum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MaxSettableValue
            Property</see>.</para>
      </param>
      <param name="strUnits">
        <para>A string which contains the units of the value returned by <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see></para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Units">Units
            Property</see>.</para>
      </param>
      <param name="bWritable">
        <para>This parameter controls the writeability of the points <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue attribute</see> via
            <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> and <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
            Method</see>.</para>
        <para>Not that the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> writeability is not controlled by this property it is controlled by <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic
            Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.Writeable">Writeable Property</see></para>
      </param>
      <param name="funcReadValue">
        <para>A function that takes an object parameter to which objParamRead will be passed and that returns an object which will be used to set the internal current
            value of the point whenever this value is read. Not that the undelying type of the returned object has to be of the same type as parameter typeValue
            (TValue).</para>
        <para>CurrentValue = funcRead(objParamRead)</para>
      </param>
      <param name="objParamRead">Parameter used when function in parameter funcReadValue is called.</param>
      <param name="actionWriteValue">
        <para>An action that takes two object parameters. The first parameter will contain the current value of the point and the second parameter will contain the object
            passed to parametr objParamWrite. This action will be called whenever the point current value is written to.</para>
        <para>actionWriteValue(CurrentValue, objParamWrite)</para>
      </param>
      <param name="objParamWrite">The parameter used when action passed in parameter actionWriteValue is called. This correspond to the second parameter of the action, the first parameter
            of the action being the point current value.</param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointFactory.CreatePoint(System.Type,System.String,System.String,System.Object,System.Object,System.Object,System.String,System.Boolean,System.Nullable{Corning.GenSys.Point.EAccessLevel},System.Nullable{Corning.GenSys.Point.EAccessLevel},System.Func{System.Object,System.Object},System.Object,System.Action{System.Object,System.Object},System.Object)">
      <summary>
        <para>Creates a simple point which is not hidden and is assigned default read and write access levels. Its increment value is set to 1 converted to
            typeValue if possible and its prescision value is set to -1.  It will be alarmable although the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled
            Property</see> is set to true and all of the low thresholds are set to the min value of the point type and the high thresholds are
            set to the max value of the point type.</para>
        <para>The created point will not support engineering units and therefore needs only one type to be defined. Also, it will not support control loop
            capabilities.</para>
      </summary>
      <param name="typeValue">The value type of the point to be created. The created point will be of type CPoint&lt;typeValue, typeValue&gt;. This can be retreived with the
            readonly <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</param>
      <param name="strPointName">Name of the point. This name should be unique if the point is to be a member of a <see cref="T:Corning.GenSys.Point.CPointsServer">CPointsServer Class</see>. The name can be composed of multiple
            strings separated by the <see cref="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">mc_strNameSeparator Field</see> string to form a path which is used by <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see> to create a hierarchy. This Name will not change through out the life of the point object and can be accessed for
            reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.PointName">PointName Property</see></param>
      <param name="strGuiDescription">A string wich contains the description of the point. It is used by <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User Control</see>. This description will not
            change through out the life of the point object and can be accessed for reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.GuiDescription">GuiDescription Property</see></param>
      <param name="objTValueCurrentValue">
        <para>The current value of the point as an object. This parameter should be set to an object whoes underlying type should be convertible to TValue. This value can
            subsequently be changed via the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or the <see cref="M:Corning.GenSys.Point.CPoint`2.SetCurrentValue(`0,System.Boolean)">SetCurrentValue
            Method</see>.</para>
        <para>If the type TValue of the point is not a reference or nullable type and this parameter is set to "null" then the Current Value of the point is set to the
            default value of the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue).</para>
      </param>
      <param name="objTValueMinValue">
        <para>The minimum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue). This is only</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MinSettableValue
            Property</see>.</para>
      </param>
      <param name="objTValueMaxValue">
        <para>The maximum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MaxSettableValue
            Property</see>.</para>
      </param>
      <param name="strUnits">
        <para>A string which contains the units of the value returned by <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see></para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Units">Units
            Property</see>.</para>
      </param>
      <param name="bWritable">
        <para>This parameter controls the writeability of the points <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue attribute</see> via
            <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> and <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
            Method</see>.</para>
        <para>Not that the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> writeability is not controlled by this property it is controlled by <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic
            Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.Writeable">Writeable Property</see></para>
      </param>
      <param name="eaccesslevelWrite">
        <para>This contains the list, contained in the flag enum EAccessLevel, of access levels which are allowed to write to the point. The default value for that
            property is specified in the base class field <see cref="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelWriteDefault" /> and can be accessed via property <see cref="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">WriteAccessLevelDefault
            Property</see>.</para>
        <para>Note that the point class only stores this value and does not enforce the policy. This value is used and the policy enforced by the <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see>.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.WriteAccessLevel">WriteAccessLevel
            Property</see></para>
      </param>
      <param name="eaccesslevelRead">
        <para>This contains the list, contained in the flag enum EAccessLevel, of access levels which are allowed to read from the point. The default value for that
            property is specified in the base class field <see cref="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelReadDefault" /> and can be accessed via property <see cref="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">ReadAccessLevelDefault
            Property</see>.</para>
        <para>Note that the point class only stores this value and does not enforce the policy. This value is used and the policy enforced by the <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see>.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.ReadAccessLevel">ReadAccessLevel
            Property</see>.</para>
      </param>
      <param name="funcReadValue">
        <para>A function that takes an object parameter to which objParamRead will be passed and that returns an object which will be used to set the internal current
            value of the point whenever this value is read. Not that the undelying type of the returned object has to be of the same type as parameter typeValue
            (TValue).</para>
        <para>CurrentValue = funcRead(objParamRead)</para>
      </param>
      <param name="objParamRead">Parameter used when function in parameter funcReadValue is called.</param>
      <param name="actionWriteValue">
        <para>An action that takes two object parameters. The first parameter will contain the current value of the point and the second parameter will contain the object
            passed to parametr objParamWrite. This action will be called whenever the point current value is written to.</para>
        <para>actionWriteValue(CurrentValue, objParamWrite)</para>
      </param>
      <param name="objParamWrite">The parameter used when action passed in parameter actionWriteValue is called. This correspond to the second parameter of the action, the first parameter
            of the action being the point current value.</param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointFactory.CreatePoint(System.Type,System.String,System.String,System.Object,System.Object,System.Int32,System.Object,System.Object,System.String,System.Boolean,System.Nullable{Corning.GenSys.Point.EAccessLevel},System.Nullable{Corning.GenSys.Point.EAccessLevel},System.Func{System.Object,System.Object},System.Object,System.Action{System.Object,System.Object},System.Object)">
      <summary>
        <para>Creates a simple point which is not hidden. It will be alarmable although the <see cref="P:Corning.GenSys.Point.CPoint`2.FaultDisabled">FaultDisabled Property</see> is set to true and
            all of the low thresholds are set to the min value of the point type and the high thresholds are set to the max value of the point type.</para>
        <para>The created point will not support engineering units and therefore needs only one type to be defined. Also, it will not support control loop
            capabilities.</para>
      </summary>
      <param name="typeValue">The value type of the point to be created. The created point will be of type CPoint&lt;typeValue, typeValue&gt;. This can be retreived with the
            readonly <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</param>
      <param name="strPointName">Name of the point. This name should be unique if the point is to be a member of a <see cref="T:Corning.GenSys.Point.CPointsServer">CPointsServer Class</see>. The name can be composed of multiple
            strings separated by the <see cref="F:Corning.GenSys.Point.CPointBase.mc_strNameSeparator">mc_strNameSeparator Field</see> string to form a path which is used by <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see> to create a hierarchy. This Name will not change through out the life of the point object and can be accessed for
            reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.PointName">PointName Property</see></param>
      <param name="strGuiDescription">A string wich contains the description of the point. It is used by <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User Control</see>. This description will not
            change through out the life of the point object and can be accessed for reading via the <see cref="P:Corning.GenSys.Point.CPoint`2.GuiDescription">GuiDescription Property</see></param>
      <param name="objTValueCurrentValue">
        <para>The current value of the point as an object. This parameter should be set to an object whoes underlying type should be convertible to TValue. This value can
            subsequently be changed via the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> or the <see cref="M:Corning.GenSys.Point.CPoint`2.SetCurrentValue(`0,System.Boolean)">SetCurrentValue
            Method</see>.</para>
        <para>If the type TValue of the point is not a reference or nullable type and this parameter is set to "null" then the Current Value of the point is set to the
            default value of the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue).</para>
      </param>
      <param name="objTValueIncrement">
        <para>A value that can be used in an up/down control to increment or decrement the current value of the point. The Point object simply stores this value and does
            not use it internally.</para>
        <para>If this parameter is set to "null" the internal field will be set to the conversion of the constant 1L to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType
            Property</see> (TValue). If the conversion is unsuccessful the internal field is set to the default value of TValue.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Increment">Increment
            Property</see>.</para>
      </param>
      <param name="nPrecision">
        <para>Specifies the number of digits after the decimal point. This value can be used externally to display the current value of the point. The Point object simply
            stores this value and does not use it internally.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Precision">Precision
            Property</see>.</para>
      </param>
      <param name="objTValueMinValue">
        <para>The minimum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see> (TValue). This is only</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MinSettableValue
            Property</see>.</para>
      </param>
      <param name="objTValueMaxValue">
        <para>The maximum value that <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> can be set to. This parameter should be set to an object whoes
            underlying type is convertible to the type in the <see cref="P:Corning.GenSys.Point.CPoint`2.ValueType">ValueType Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.MinSettableValue">MaxSettableValue
            Property</see>.</para>
      </param>
      <param name="strUnits">
        <para>A string which contains the units of the value returned by <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see></para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.Units">Units
            Property</see>.</para>
      </param>
      <param name="bWritable">
        <para>This parameter controls the writeability of the points <see cref="F:Corning.GenSys.Point.CPointAttributes.CurrentValue">CPointAttributes.S.CurrentValue attribute</see> via
            <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> and <see cref="M:Corning.GenSys.Point.CPoint`2.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString
            Method</see>.</para>
        <para>Not that the <see cref="P:Corning.GenSys.Point.CPoint`2.CurrentValue">CurrentValue Property</see> writeability is not controlled by this property it is controlled by <see cref="P:Corning.GenSys.Point.CPoint`2.Dynamic">Dynamic
            Property</see>.</para>
        <para>The value of the internal field can be set or retreived after construction via the <see cref="P:Corning.GenSys.Point.CPoint`2.Writeable">Writeable Property</see></para>
      </param>
      <param name="eaccesslevelWrite">
        <para>This contains the list, contained in the flag enum EAccessLevel, of access levels which are allowed to write to the point. The default value for that
            property is specified in the base class field <see cref="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelWriteDefault" /> and can be accessed via property <see cref="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">WriteAccessLevelDefault
            Property</see>.</para>
        <para>Note that the point class only stores this value and does not enforce the policy. This value is used and the policy enforced by the <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see>.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.WriteAccessLevel">WriteAccessLevel
            Property</see></para>
      </param>
      <param name="eaccesslevelRead">
        <para>This contains the list, contained in the flag enum EAccessLevel, of access levels which are allowed to read from the point. The default value for that
            property is specified in the base class field <see cref="F:Corning.GenSys.Point.CPointBase.ms_eaccesslevelReadDefault" /> and can be accessed via property <see cref="P:Corning.GenSys.Point.CPointBase.ReadAccessLevelDefault">ReadAccessLevelDefault
            Property</see>.</para>
        <para>Note that the point class only stores this value and does not enforce the policy. This value is used and the policy enforced by the <see cref="!:PointServerGui.UCPointsEditor">UCPointsEditor User
            Control</see>.</para>
        <para>The value of the internal field does not change through out the life of the object and can be retreived via the read only <see cref="P:Corning.GenSys.Point.CPoint`2.ReadAccessLevel">ReadAccessLevel
            Property</see>.</para>
      </param>
      <param name="funcReadValue">
        <para>A function that takes an object parameter to which objParamRead will be passed and that returns an object which will be used to set the internal current
            value of the point whenever this value is read. Not that the undelying type of the returned object has to be of the same type as parameter typeValue
            (TValue).</para>
        <para>CurrentValue = funcRead(objParamRead)</para>
      </param>
      <param name="objParamRead">Parameter used when function in parameter funcReadValue is called.</param>
      <param name="actionWriteValue">
        <para>An action that takes two object parameters. The first parameter will contain the current value of the point and the second parameter will contain the object
            passed to parametr objParamWrite. This action will be called whenever the point current value is written to.</para>
        <para>actionWriteValue(CurrentValue, objParamWrite)</para>
      </param>
      <param name="objParamWrite">The parameter used when action passed in parameter actionWriteValue is called. This correspond to the second parameter of the action, the first parameter
            of the action being the point current value.</param>
    </member>
    <member name="F:Corning.GenSys.Point.CPointInputOutput`2.m_trawRangeRaw">
      <summary>
            m_trawRangeRaw[0]=Min  m_trawRangeRaw[1]=Max
            </summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointsServer">
      <summary>This class contains a collection of points with unique names. It allows subscription to point fault and change events. It also the serialization and
            deserialization to XML string of all point designated as setting point within a hierarchy specified at the time the point is added. this class is also the
            basis for remote point access as it implements <see cref="T:Corning.GenSys.Point.IPointsServerRemote">IPointsServerRemote Interface</see></summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointServerBase">
      <summary>This class contains a collection of points with unique names. It allows subscription to point fault and change events. It also the serialization and
            deserialization to XML string of all point designated as setting point within a hierarchy specified at the time the point is added. this class is also the
            basis for remote point access as it implements <see cref="T:Corning.GenSys.Point.IPointsServerRemote">IPointsServerRemote Interface</see> and consumes objects realizing <see cref="T:Corning.GenSys.Point.IPointsServerReply">IPointsServerReply
            Interface</see> added with <see cref="M:Corning.GenSys.Point.CPointServerBase.AddReplyObject(Corning.GenSys.Point.IPointsServerReply)">AddReplyObject Method</see> or <see cref="M:Corning.GenSys.Point.CPointServerBase.SetReplyObject(Corning.GenSys.Point.IPointsServerReply)">SetReplyObject Method</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.SetReplyObject(Corning.GenSys.Point.IPointsServerReply)">
      <summary>
            Clears the list of reply object and adds the iCmdReply as the only reply object. The reply objects are the objects to which point fault and point change events are sent for point subscribed to.
            </summary>
      <param name="iCmdReply">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.AddReplyObject(Corning.GenSys.Point.IPointsServerReply)">
      <summary>
            Adds the iCmdReply as to the list of reply objects. The reply objects are the objects to which point fault and point change events are sent for point subscribed to.
            </summary>
      <param name="iCmdReply">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.AddPoints(System.Collections.Generic.List{Corning.GenSys.Point.IPoint},System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Adds a collection of points to the internal point collection. It places them in the specified node of the internal hierarchy which is currently used for the
            creation of the XML file when the Point server is serialized. The third parameter specifies if the points added are settings points i.e. if the points will be
            written to the XML file when the Point server is serialized.</summary>
      <param name="lstiPoint">The points to be added to the point server.</param>
      <param name="strNodeBreadCrumbName">Specifies the node of the internal hierarchy where the added points should be placed. This internal hierarchy is currently used for the creation of the XML
            file when the Point Server is serialized. Therefore bIsSetting should be set to "true" for this parameter to have any effect. This parameter is an empty string
            by defaults.</param>
      <param name="bIsSetting">
        <para>If true, the points added are designated as a setting points and will take part in the serialization/deserialization process.</para>
        <para>it is false by default.</para>
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.AddPoints(System.Collections.Generic.List{Corning.GenSys.Point.IPoint})">
      <summary>Implementation of IPointsServerLocal. Calls the AddPoints Method with strNodeBreadCrumbName = "" and bIsSetting = false.</summary>
      <param name="lstiPoint">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.AddPoint(Corning.GenSys.Point.IPoint,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>Adds a point to the internal point collection. It places it in the specified node of the internal hierarchy which is currently used for the creation of
            the XML file when the Point server is serialized. The third parameter specifies if the point added is a settings point i.e. if the point will be written to the
            XML file when the Point server is serialized.</summary>
      <param name="iPoint">The point to be added to the point server.</param>
      <param name="strNodeBreadCrumbName">Specifies the node of the internal hierarchy where the added point should be placed. This internal hierarchy is currently used for the creation of the XML file
            when the Point Server is serialized. Therefore bIsSetting should be set to "true" for this parameter to have any effect. This parameter is an empty string by
            defaults.</param>
      <param name="bIsSetting">
        <para>If true, the point added is designated as a setting point and will take part in the serialization/deserialization process.</para>
        <para>it is false by default.</para>
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.AddPoint(Corning.GenSys.Point.IPoint)">
      <summary>Implementation of IPointsServerLocal. Calls the AddPoint Method with strNodeBreadCrumbName = "" and bIsSetting = false.</summary>
      <param name="iPoint">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.RemovePoint(System.String)">
      <summary>Remove the point with name strPointName if found in the point server</summary>
      <param name="strPointName">The name of the point to be removed</param>
      <returns>The point that was just removed or null if the point was not found in the point server</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.UpdateInternalPointValues(Corning.GenSys.Point.IPoint,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Update the internal point with the same name as ipointUpdate if found in the point server</summary>
      <param name="ipointUpdate">The point from which values are copied</param>
      <returns>The internal point that was just updated</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.ReplaceInternalPoint(Corning.GenSys.Point.IPoint,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>replace the internal point with the same name as ipointNew if found in the point server</summary>
      <param name="ipointNew">The point from which values are copied</param>
      <param name="bCopyInternalPointsValuesToNewPoint">If true update the values of ipointNew with the values of the internal point already in the point server</param>
      <param name="ienumstrExcludedMembers">
      </param>
      <returns>ipointNew if the relacement occured or null no existing point with the same name was found</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.EnumPoints(System.String[]@,System.String[],System.Boolean,System.Boolean)">
      <summary>Returns a string array, in parameter astrPointNames, of point names contained in the point server. Various filter can be applied for the query. The list of return point names can be
            restricted to a specified list of group, the list can include disabled point or only points which are alarmable.</summary>
      <param name="astrPointNames">A string array of point names contained in the point server</param>
      <param name="astrGroups">If this parameter is set to null the name of all the points in the point server are queried. Otherwise only the point names in the specified group list are queried. Default value is null</param>
      <param name="bIncludeDisabledPoints">When set to true the method will also return disabled point names. Default value is false</param>
      <param name="bIncludeOnlyAlarmablePoints">If this parameter is set to true the list of point names returned is restricted to alarmable points only. Default value is false</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.EnumPoints(System.String[]@)">
      <summary>Returns a string array, in parameter astrPointNames, of all the none disabled point names contained in the point server. Implementation of IPointsServeRemote.</summary>
      <param name="astrPointNames">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.EnumAttributes(System.String[]@,System.String[]@,System.String[]@)">
      <summary>
            Returns a string array of all of the supported Attribute names, a string array of the writeable attribute names, a string array containing the attributes type 
            </summary>
      <param name="astrAttributeNames">A string array of all of the supported Attribute names</param>
      <param name="astrWritableAttributes">A string array of the writeable attribute names</param>
      <param name="astrAttributeType">A string array containing the attributes type. The size of this array is the same as what is returned in astrAttributeNames</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.EnumAttributesInternal(System.Type)">
      <summary>For internal use.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.GetPoints(System.String[],System.String[],System.String[]@,System.String[]@)">
      <summary>
        <para>This method returns an array of strings, in parameter astrPointData, corresponding to the attributes requested in astrAttributes for each Point Name
            supplied. The order of the PointData returned is as follows; all of the attributes for the 1st point in the same order as the astrAttributes list, followed by
            all of the attributes for the 2nd point, and so on for each name in astrPointNames. This method calls the <see cref="M:Corning.GenSys.Point.IPointExternal.GetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsString
            Method</see> for each point/attribute combination.</para>
        <para>Realization of <see cref="M:Corning.GenSys.Point.IPointsServerRemote.GetPoints(System.String[],System.String[],System.String[]@,System.String[]@)">GetPoints Method</see></para>
      </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrAttributes">
      </param>
      <param name="astrPointData">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.ValuesLength. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.GetBlobPoint(System.String,System.String,System.Object@,System.String@)">
      <summary>Get point attribute strAttribute using the <see cref="M:Corning.GenSys.Point.IPointExternal.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject Method</see> for point named strPointName.</summary>
      <param name="strPointName">
      </param>
      <param name="strAttribute">
      </param>
      <param name="objPointData">
      </param>
      <param name="strErrorMessage">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.GetPoints(System.String[],System.String[],System.Byte[][]@,System.String[]@)">
      <summary>Same as the other overload except that the data is exchanged as byte [][] instead of string[]. This is to handle points of Image type, etc. Also, unlike
            the other overload, this method calls the <see cref="M:Corning.GenSys.Point.IPointExternal.GetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute)">GetAttributeValueAsObject Method</see> for each point/attribute combination.</summary>
      <param name="astrPointNames">
      </param>
      <param name="astrAttributes">
      </param>
      <param name="aacPointData">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.ValuesLength. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.SetPoints(System.String[],System.String[],System.String[],System.String[]@)">
      <summary>
        <para>This method sets the attributes requested in astrAttributes for each Point Name supplied in astrPointNames using the data in astrPointData. The order
            of the PointData is as follows; all of the attributes for the 1st point in the same order as the astrAttributes list, followed by all of the attributes for the
            2nd point, and so on for each name in astrPointNames. This allows sequences that depend on other point values being set first to occur in the same transaction
            without requiring multiple commands. This method calls the <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsString(Corning.GenSys.Point.CPointAttribute,System.String)">SetAttributeValueAsString Method</see> for each
            point/attribute combination.</para>
        <para>Realization of <see cref="M:Corning.GenSys.Point.IPointsServerRemote.SetPoints(System.String[],System.String[],System.String[],System.String[]@)">SetPoints Method</see></para>
      </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrAttributes">
      </param>
      <param name="astrPointData">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.ValuesLength. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.SetBlobPoint(System.String,System.String,System.Object,System.String@)">
      <summary>Set point attribute strAttribute using the <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> for point named strPointName.</summary>
      <param name="strPointName">Name of point to set</param>
      <param name="strAttribute">Name of the attribute to set</param>
      <param name="objPointData">
      </param>
      <param name="strErrorMessage">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.SetPoints(System.String[],System.String[],System.Byte[][],System.String[]@)">
      <summary>
        <para>Same as the other overload except that the data is exchanged as byte [][] instead of string[]. This is to handle points of Image type, etc. Also,
            unlike the other overload, this method calls the <see cref="M:Corning.GenSys.Point.IPointExternal.SetAttributeValueAsObject(Corning.GenSys.Point.CPointAttribute,System.Object)">SetAttributeValueAsObject Method</see> for each point/attribute
            combination.</para>
      </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrAttributes">
      </param>
      <param name="aacPointData">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.ValuesLength. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.GetPointsAsXml(System.String[],System.String[],System.String)">
      <summary>
            NOT IMPLEMENTED
            This function is similar to the GetPoints function only it returns the results as structured XML.
            Note, there is a variant of this call that allows the attributes returned to be specified rather
            than returning the values of all attributes.
            </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrAttributes">
      </param>
      <param name="strXmlPointData">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.GetPointsAsXml(System.String[],System.String[],System.String[]@)">
      <summary>
            NOT IMPLEMENTED 
            This function is similar to the GetPoints function only it returns the results as structured XML.
            Note, there is a variant of this call that allows the attributes returned to be specified rather
            than returning the values of all attributes.
            </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrXmlPointData">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.ValuesLength. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.SubscribeFaults(System.String[],System.String[]@)">
      <summary>
            This function registers with the system to be notified asynchronously when there is a change in
            fault status for any PointName in the supplied list.
            </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.ValuesLength. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.UnSubscribeFaults(System.String[],System.String[]@)">
      <summary>
            This function clears any registration with the system regarding fault notifications for each
            PointName supplied in the list.
            </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.ValuesLength. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.SubscribePointChange(System.String[],System.String[],System.String[],System.String[]@)">
      <summary>
            This function registers with the system to be notified asynchronously when there is a change in
            the absolute value of a point that is a) greater than the supplied PointChangePercent or
            b) greater than the PointChangeValue.   If a negative value is supplied for PointChangePercent
            or PointChangeValue than this check is not performed.   If a value of zero is supplied for
            PointChangePercent or PointChangeValue than a notification will be generated EVERY time the value
            of this point is updated (even if it is updated with the same value).   For a string type, any
            positive value will provide an update when the string has changed.
            </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrPointChangePercent">
      </param>
      <param name="astrPointChangeValue">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.ValuesLength. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.UnSubscribePointChange(System.String[],System.String[]@)">
      <summary>
            This function clears any registration with the system regarding fault notifications for each
            PointName supplied in the list.
            </summary>
      <param name="astrPointNames">
      </param>
      <param name="astrErrorMessages">String array of size astrPointNames.ValuesLength. Array element set to
             null if there are no error or an error string otherwise </param>
      <returns>If false there was an error in the overall call or on a specific point operation which would
             be reported in astrErrorMessages</returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.GetPoint(System.String,System.Boolean)">
      <summary>Returns the <see cref="T:Corning.GenSys.Point.IPoint">IPoint</see> with name strPointName in the point server. If the point cannot be found null is returned. Realization of <see cref="M:Corning.GenSys.Point.IPointsServerLocal.GetPoint(System.String,System.Boolean)">GetPoint
            Method</see></summary>
      <param name="strPointName">
      </param>
      <param name="bThrowExceptionOnPointNotFound">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.iPoint_eventPointChanged(Corning.GenSys.Point.IPoint,System.Object)">
      <summary>
            Event handler for point change events
            Currently bubling up events to the ICmdReply interface
            May need to implement a buffering/filtering mechanism 
            </summary>
      <param name="ipointSender">
      </param>
      <param name="objEventArg">Unused</param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.iPoint_eventFault(Corning.GenSys.Point.IPoint,Corning.GenSys.Point.IFaultEventArg)">
      <summary>
            Event handler for point fault events
            May need to implement a buffering/filtering mechanism 
            </summary>
      <param name="ipointSender">
      </param>
      <param name="objEventArg">Will probably carry faults attribute</param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.GetPointForAttribute(System.String,System.String,System.String@)">
      <summary>Locates the IPoint with name strPointName in the point server and checks that the specified attribute is valid. If the attribute is valid the located
            IPoint is returned. If the point cannot be found or the attribute is not valid null is returned</summary>
      <param name="strPointName">
      </param>
      <param name="strAttributeName">
      </param>
      <param name="strErrorString">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.GetPoints``1(System.String[],System.String[],``0[]@,System.String[]@)">
      <summary>
      </summary>
      <typeparam name="TAttrib">
      </typeparam>
      <param name="astrPointNames">
      </param>
      <param name="astrAttributes">
      </param>
      <param name="atattribPointData">
      </param>
      <param name="astrErrorMessages">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.SerializeToXml(System.String@)">
      <summary>WARNING: Use the <see cref="M:Corning.GenSys.Point.CPointServerBase.SerializeToString(System.String@)">SerializeToString Method</see> instead because this method is not compatible with the <see cref="M:Corning.GenSys.Point.CPointServerBase.DeserializeFromFile(System.String)">DeserializeFromFile
            Method</see>.<br />
            Serializes the content of the point server to an XML string using YaxLib.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.RetreiveSettingsAsXml">
      <summary>Serializes the settings points in the point server as an XML string.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.ApplySettingsFromXml(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
      <summary>
        <para>IMPORTANT: When using this method it is important that all the points that are in the XML file have been added to the Point Server with the expected
            hierarchy node. If a point is found in the XML file and is not found in the point server it will be ignored.</para>
        <para>This method updates the points in the point server at the time of the call with values found in the XML file. It also allows the caller to skip specified
            hierarchy nodes and / or point attributes from the update process.</para>
      </summary>
      <param name="strXml">The XML string containing previously serialized data from a point server.</param>
      <param name="ienumstrExcludedNodes">Collection of string containing hierarchy node names to be skipped during the update process</param>
      <param name="ienumstrExcludedPointYaxAttributes">Collection of string containing point attribute names to be skipped during the update process. For example a point attribute name can be obtain by
            using: <see cref="F:Corning.GenSys.Point.CPointAttributes.S">CPointAttributes.S Field</see>.CurrentValue.Name</param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.SerializeToFile(System.String)">
      <summary>Serializes the content of the point server to an XML string, creates a new file, writes the XML string to the file, and then closes the file. If the target file already exists, it is overwritten.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.DeserializeFromFile(System.String)">
      <summary>This method calls <see cref="M:Corning.GenSys.Point.CPointServerBase.ApplySettingsFromXml(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">ApplySettingsFromXml Method</see> and read the XML string from a file. No node or attributes are excluded.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.SerializeToString(System.String@)">
      <summary>
            IObjectSetting interface implementation
            </summary>
      <param name="strSerialization">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointServerBase.ApplySettingsFromString(System.String)">
      <summary>
            IObjectSetting interface implementation
            </summary>
      <param name="strSerialization">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Corning.GenSys.Point.CPointServerBase.Name">
      <summary>Returns the name of the point server. Implementation of <see cref="P:Corning.GenSys.Point.IPointsServerRemote.Name">IPointsServerRemote.Name Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointServerBase.ObjectSettingName">
      <summary>Returns the name of the point server. Implementation of <see cref="P:Corning.GenSys.Point.ISettingsName.SettingsName">ISettingsName.SettingsName Property</see>.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointServerBase.ExtraPointsFromApplySettingsByName">
      <summary>Gets a dictionary containing points that were read from the XML file during a call to ApplySettings but that were not found in the Point Server. These points
            are usually optional points that are added after settings have been applied.</summary>
      <value>
            The name of the extra points from apply settings by.
            </value>
    </member>
    <member name="T:Corning.GenSys.Point.CPointLocator">
      <summary>Contains a reference to an IPoint along with the information if a client has subscribed to its <see cref="E:Corning.GenSys.Point.CPoint`2.eventPointChanged">eventPointChanged Event</see>
            or <see cref="E:Corning.GenSys.Point.CPoint`2.eventFault">eventFault Events</see> as well as the internal hierarchy (tree structure) node where the point is attached to.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointLocator.HierarchyNode">
      <summary>
            Not used
            </summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointProxyServer">
      <summary>
        <para>This class contains an <see cref="T:Corning.GenSys.Point.IPointsServerRemote">IPointsServerRemote Interface</see> allowing it to communicate with a remote point server. It also contains a
            collection of point proxies where a point proxy is an internal class realizing the <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see> allowing the user to interact with a remote point
            as if it were a local point. CPointProxyServer realizes the <see cref="T:Corning.GenSys.Point.IPointsServerRemote">IPointsServerRemote Interface</see> as well as the <see cref="T:Corning.GenSys.Point.IPointsServerLocal">IPointsServerLocal
            Interface</see> from the remote server. It also realizes the <see cref="T:Corning.GenSys.Point.IPointProxyServer">IPointProxyServer Interface</see> which contains method <see cref="M:Corning.GenSys.Point.CPointProxyServer.GetPointProxy(System.String,System.Boolean)">GetPointProxy
            Method</see> allowing the retrieval of an internal point proxy in the form of a <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see>. Note that when a
            <see cref="T:Corning.GenSys.Point.CPointProxyServer">CPointProxyServer Class</see> is obtained from <see cref="!:CSystemNetworker">CSystemNetworker Class</see>, fault and point change notifications are propagated to
            the point proxy server and in turn to the point proxies. Therefore the <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault</see> and <see cref="E:Corning.GenSys.Point.IPoint.eventPointChanged">eventPointChanged</see> events
            of a point proxy are fully functional and will be raised whenever the remote point raises these events.</para>
        <para>IMPORTANT: The internal point proxy class that can be obtained from the point proxy server uses
            the <see cref="M:Corning.GenSys.Point.IPointsServerRemote.SetBlobPoint(System.String,System.String,System.Object,System.String@)">IPointsServerRemote.SetBlobPoint</see> and <see cref="M:Corning.GenSys.Point.IPointsServerRemote.GetBlobPoint(System.String,System.String,System.Object@,System.String@)">IPointsServerRemote.GetBlobPoint</see>
            methods to access attributes of the remote point.</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointProxyServer.#ctor(Corning.GenSys.Point.IPointsServerRemote,System.String)">
      <summary>Creates a new <see cref="T:Corning.GenSys.Point.CPointProxyServer">CPointProxyServer</see> instance. This constructor simply stores the <paramref name="IPointsServerRemote">IPointsServerRemote Interface</paramref> used
            to communicate to the local point server as well as a name for the point proxy server. The interface is used during the creation of point proxy
            instances as a result of calls to the <see cref="M:Corning.GenSys.Point.CPointProxyServer.GetPointProxy(System.String,System.Boolean)">GetPointProxy</see> or <see cref="M:Corning.GenSys.Point.CPointProxyServer.CreateAndAddAllPointProxies">CreateAndAddAllPointProxies</see> methods.</summary>
      <param name="iPointsServerRemote">The <paramref name="IPointsServerRemote">IPointsServerRemote Interface</paramref> used to communicate to the local point server.</param>
      <param name="strRemoteName">Name of the point proxy server.</param>
    </member>
    <member name="M:Corning.GenSys.Point.CPointProxyServer.CreateAndAddAllPointProxies">
      <summary>When a <see cref="T:Corning.GenSys.Point.CPointProxyServer">CPointProxyServer Class</see> object is created it contains information to connect to the remote point server but no point proxy are
            created. A an internal point proxy object is usually created on demand when the <see cref="M:Corning.GenSys.Point.CPointProxyServer.GetPointProxy(System.String,System.Boolean)">GetPointProxy Method</see> is called.
            the CreateAndAddAllPointProxies Method will create one point proxy object for each point exposed by the remote point server.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointProxyServer.GetPoint(System.String,System.Boolean)">
      <summary>Same as <see cref="M:Corning.GenSys.Point.CPointProxyServer.GetPointProxy(System.String,System.Boolean)">GetPointProxy Method</see></summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointProxyServer.FaultNotification(System.String[],System.String[],System.String[],System.String[])">
      <summary>Realization of the <see cref="T:Corning.GenSys.Point.IPointsServerReply">IPointsServerReply Interface</see></summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointProxyServer.PointChangeNotification(System.String[],System.String[],System.String[],System.String[])">
      <summary>Realization of the <see cref="T:Corning.GenSys.Point.IPointsServerReply">IPointsServerReply Interface</see></summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointProxyServer.GetPointProxy(System.String,System.Boolean)">
      <summary>
        <para>If the requested point proxy does not exist internally it is created and then returned as an <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see>. If it already exists then the
            existing instance is returned. Note that the creation of a point proxy includes the infrastructure necessary for the propagation of
            <see cref="E:Corning.GenSys.Point.IPoint.eventPointChanged">eventPointChanged</see> and <see cref="E:Corning.GenSys.Point.IPoint.eventFault">eventFault</see> events from the local point connected to the point proxy.</para>
        <para>IMPORTANT: The internal point proxy class that can be obtained with this method uses the <see cref="!:PointsInterface_WCF.PointsInterfaceClient_WCF.SetBlobPoint">PointsInterfaceClient_WCF.SetBlobPoint
            Method</see><see cref="M:Corning.GenSys.Point.IPointsServerRemote.SetBlobPoint(System.String,System.String,System.Object,System.String@)">IPointsServerRemote.SetBlobPoint</see>
            and <see cref="M:Corning.GenSys.Point.IPointsServerRemote.GetBlobPoint(System.String,System.String,System.Object@,System.String@)">IPointsServerRemote.GetBlobPoint</see> methods to access attributes of the remote point.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointProxyServer.PointServerRemote">
      <summary>This property returns the <see cref="T:Corning.GenSys.Point.IPointsServerRemote">IPointsServerRemote Interface</see> used to communicate to the local point server.</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CPointProxyServer.RemoteName">
      <summary>The name of the point proxy server passed at construction time. This name could be different from the name of the point server pointed too. In the case of a
            point proxy server obtain from a <see cref="!:CSystemNetworker">CSystemNetworker Class</see> instance this property returns the name of the local point server.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointProxyFactory">
      <summary>
            This class is used to create point proxy objects (internal class) realizing the <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see>.
            </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointProxyFactory.Create(System.String,Corning.GenSys.Point.IPointsServerRemote)">
      <summary>
            Creates point proxy objects (internal class) realizing the <see cref="T:Corning.GenSys.Point.IPoint">IPoint Interface</see>. The point proxy object communicates with the remote point server via the <see cref="T:Corning.GenSys.Point.IPointsServerRemote">IPointsServerRemote Interface</see></summary>
      <param name="strPointName">The name of the point on the remote point server the point proxy will "connect" to.</param>
      <param name="iPointsServerRemote">The <see cref="T:Corning.GenSys.Point.IPointsServerRemote">IPointsServerRemote Interface</see> realized by the remote point server.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Corning.GenSys.Point.CPointProxy`2">
      <summary>
      </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointProxy`2.SetData``1(Corning.GenSys.Point.IPointsServerRemote,System.String,Corning.GenSys.Point.CPointAttribute,``0,System.Boolean)">
      <summary>
            WARNING: This method must conversion to string must match what is done in the CPoint class for the conversion
                     from string to data type
            </summary>
      <typeparam name="TData">
      </typeparam>
      <param name="iPointsServerRemote">
      </param>
      <param name="strPointname">
      </param>
      <param name="oPointAttribute">
      </param>
      <param name="tdataValue">
      </param>
      <param name="bUseString"> If true use the iPointsServerRemote SetPoints function taking a string as parameter otherwise use the 
            function using a byte array as parameter</param>
    </member>
    <member name="T:Corning.GenSys.Point.CPointProxyLogger">
      <summary>This class just holds the logger reference. Rather than trying to set a logger for each CPoint&lt;TPoint, TRaw&gt; combination, this logger reference is
            copied into the ms_iLogger of the class the system automatically creates.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointSerialization">
      <summary>
            Helper class used to serialize a point to and from string. This is used to send and receive point to and from remote locations
            </summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointSerialization.SerializeToString(System.Object,System.String,System.String,System.String)">
      <summary>
      </summary>
      <param name="objData">
      </param>
      <param name="strSeparator">
      </param>
      <param name="strArrayStart">
      </param>
      <param name="strArrayEnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointSerialization.DeserializeFromString``1(System.String,System.String,System.String,System.String)">
      <summary>
      </summary>
      <typeparam name="TData">
      </typeparam>
      <param name="strData">
      </param>
      <param name="strSeparator">
      </param>
      <param name="strArrayStart">
      </param>
      <param name="strArrayEnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CPointSerialization.DeserializeFromString(System.Type,System.String,System.String,System.String,System.String)">
      <summary>Used by <see cref="!:CPoint&lt;TValue,TRaw&gt;.SetAttributeValueAsString">SetAttributeValueAsString Method</see> to convert the string passed to an object with the same type as
            the point's underlying type.</summary>
      <param name="oType">
      </param>
      <param name="strData">
      </param>
      <param name="strSeparator">
      </param>
      <param name="strArrayStart">
      </param>
      <param name="strArrayEnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Corning.GenSys.PointsInterface_WCF.CBinarySerializer">
      <summary>
            Helper class used to perform the serialization/deserialization of a complex types to a byte array.
            </summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.CBinarySerializer.Serialize(System.Object)">
      <summary>Unused. Same as <see cref="M:Corning.GenSys.PointsInterface_WCF.CBinarySerializer.SerializeForWcf(System.Object)">SerializeForWcf Method</see> except that the received object is serialized to a byte array even if it is not a complex type.</summary>
      <param name="objData">Object to serialize</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.CBinarySerializer.SerializeForWcf(System.Object)">
      <summary>
        <para>If the objData object is a complex type, it is serialized as a byte array using the Microsoft
            <see cref="!:https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatters.binary.binaryformatter(v=vs.110).aspx">BinaryFormatter</see> class. The byte array
            is then returned in the returned object.</para>
        <para>If the objData object is a primitive type it is returned un changed.</para>
      </summary>
      <param name="objData">Object to serialize</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.CBinarySerializer.Deserialize(System.Byte[])">
      <summary>Unused. Same as other overload except that the data received is always deserialized using the Microsoft
            <see cref="!:https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatters.binary.binaryformatter(v=vs.110).aspx">BinaryFormatter</see> class.</summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.CBinarySerializer.Deserialize(System.Object)">
      <summary>This method expects to receive an objData object of type byte array if the original object serialized had a complex type. The byte array is then deserialized
            to an object with the same type as the originally serialized object (see <see cref="M:Corning.GenSys.PointsInterface_WCF.CBinarySerializer.SerializeForWcf(System.Object)">Serialize Method</see>) using the Microsoft
            <see cref="!:https://msdn.microsoft.com/en-us/library/system.runtime.serialization.formatters.binary.binaryformatter(v=vs.110).aspx">BinaryFormatter</see> class. If the objData
            object is a primitive type the object is returned un changed.</summary>
      <param name="objData">The object data.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter">
      <summary>This class implements the <see cref="T:Corning.GenSys.Point.IPointsServerRemote">IPointsServerRemote Interface</see> and is used by the <see cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceServer_WCF">PointsInterfaceServer_WCF
            Class</see> to allow the binary transfer of points with complex types. It relies on the <see cref="T:Corning.GenSys.PointsInterface_WCF.CBinarySerializer">CBinarySerializer Class</see> to
            perform the binary serialization / deserialization. This class function as a shim class in front of an object realizing the <see cref="T:Corning.GenSys.Point.IPointsServerRemote">IPointsServerRemote
            Interface</see>. All the methods of this class are pass thru except for methods
            <see cref="M:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter.SetBlobPoint(System.String,System.String,System.Object,System.String@)">SetBlobPoint</see> and <see cref="M:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter.GetBlobPoint(System.String,System.String,System.Object@,System.String@)">GetBlobPoint</see>.</summary>
      <seealso cref="T:Corning.GenSys.Point.IPointsServerRemote">
      </seealso>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter.EnumPoints(System.String[]@)">
      <summary>Pass thru. When using the <see cref="T:Corning.GenSys.Point.CSystemNetworker">CSystemNetworker Class</see>  this method will call the <see cref="O:Corning.GenSys.Point.CPointServerBase.EnumPoints">CPointServerBase.EnumPoints
            Method</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter.EnumAttributes(System.String[]@,System.String[]@,System.String[]@)">
      <summary>Pass thru. When using the <see cref="T:Corning.GenSys.Point.CSystemNetworker">CSystemNetworker Class</see>  this method will call the <see cref="O:Corning.GenSys.Point.CPointServerBase.EnumAttributes">CPointServerBase.EnumAttributes
            Method</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter.GetPoints(System.String[],System.String[],System.String[]@,System.String[]@)">
      <summary>Pass thru. When using the <see cref="T:Corning.GenSys.Point.CSystemNetworker">CSystemNetworker Class</see>  this method will call the <see cref="O:Corning.GenSys.Point.CPointServerBase.GetPoints">CPointServerBase.GetPoints
            Method</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter.GetBlobPoint(System.String,System.String,System.Object@,System.String@)">
      <summary>
        <para>Data is first retrieved using the <see cref="M:Corning.GenSys.Point.IPointsServerRemote.GetBlobPoint(System.String,System.String,System.Object@,System.String@)">IPointsServerRemote.GetBlobPoint Method</see>. If the returned data object is a complex
            type, it is serialized as a byte array using <see cref="M:Corning.GenSys.PointsInterface_WCF.CBinarySerializer.SerializeForWcf(System.Object)">CBinarySerializer.SerializeForWcf Method</see> and assigned to objPointData.</para>
        <para>When using the <see cref="T:Corning.GenSys.Point.CSystemNetworker">CSystemNetworker Class</see> this method will more specifically call the <see cref="O:Corning.GenSys.Point.CPointServerBase.GetBlobPoint">CPointServerBase.GetBlobPoint
            Method</see>.</para>
        <para>This is the realization of <see cref="M:Corning.GenSys.Point.IPointsServerRemote.GetBlobPoint(System.String,System.String,System.Object@,System.String@)">IPointsServerRemote.GetBlobPoint Method</see>.</para>
        <para>
        </para>.</summary>
      <param name="strPointName">Name of the point to retrieve data from.</param>
      <param name="strAttribute">Name of the attribute to return.</param>
      <param name="objPointData">Out parameter where the retrieved data is stored. This is an array of bytes if the returned data is of complex type</param>
      <param name="strErrorMessage">Out parameter containing an string describing an error when the return value is false. It is null otherwise.</param>
      <returns>True if the method call was successful. False if the method call failed. If false <em>strErrorMessage</em> contains the cause of the error.</returns>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter.SetPoints(System.String[],System.String[],System.String[],System.String[]@)">
      <summary>Pass thru. When using the <see cref="T:Corning.GenSys.Point.CSystemNetworker">CSystemNetworker Class</see>  this method will call the <see cref="O:Corning.GenSys.Point.CPointServerBase.SetPoints">CPointServerBase.SetPoints
            Method</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter.SetBlobPoint(System.String,System.String,System.Object,System.String@)">
      <summary>This method expects to receive an objPointData object of type byte array if the point has a complex underlying type. The byte array is then deserialized to an
            object with the same type as the underlying type of the point using the <see cref="O:Corning.GenSys.PointsInterface_WCF.CBinarySerializer.Deserialize">CBinarySerializer.Deserialize
            Method</see>. This object is then used in the call to the <see cref="M:Corning.GenSys.Point.IPointsServerRemote.SetBlobPoint(System.String,System.String,System.Object,System.String@)">SetBlobPoint
            Method</see>.
              <para>When using the <see cref="T:Corning.GenSys.Point.CSystemNetworker">CSystemNetworker Class</see> this method will more specifically call the <see cref="O:Corning.GenSys.Point.CPointServerBase.SetBlobPoint">CPointServerBase.SetBlobPoint
            Method</see>.</para></summary>
      <param name="strPointName">
      </param>
      <param name="strAttribute">
      </param>
      <param name="objPointData">
      </param>
      <param name="strErrorMessage">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter.SubscribeFaults(System.String[],System.String[]@)">
      <summary>Pass thru. When using the <see cref="T:Corning.GenSys.Point.CSystemNetworker">CSystemNetworker Class</see>  this method will call the <see cref="O:Corning.GenSys.Point.CPointServerBase.SubscribeFaults">CPointServerBase.SubscribeFaults
            Method</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter.UnSubscribeFaults(System.String[],System.String[]@)">
      <summary>Pass thru. When using the <see cref="T:Corning.GenSys.Point.CSystemNetworker">CSystemNetworker Class</see>  this method will call the <see cref="O:Corning.GenSys.Point.CPointServerBase.UnSubscribeFaults">CPointServerBase.UnSubscribeFaults
            Method</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter.SubscribePointChange(System.String[],System.String[],System.String[],System.String[]@)">
      <summary>Pass thru. When using the <see cref="T:Corning.GenSys.Point.CSystemNetworker">CSystemNetworker Class</see>  this method will call the <see cref="O:Corning.GenSys.Point.CPointServerBase.SubscribePointChange">CPointServerBase.SubscribePointChange
            Method</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter.UnSubscribePointChange(System.String[],System.String[]@)">
      <summary>Pass thru. When using the <see cref="T:Corning.GenSys.Point.CSystemNetworker">CSystemNetworker Class</see>  this method will call the <see cref="O:Corning.GenSys.Point.CPointServerBase.UnSubscribePointChange">CPointServerBase.UnSubscribePointChange
            Method</see>.</summary>
    </member>
    <member name="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF">
      <summary>This class realizes interfaces <see cref="T:Corning.GenSys.Point.IPointsServerRemote">IPointsServerRemote</see> and <see cref="T:Corning.GenSys.Point.IPointsServerReply">IPointsServerReply</see> which are associated to a remote point
            server accessed through WCF. It acts as a proxy to a remote point server exposed by a <see cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceServer_WCF" /> class
            instance.</summary>
      <seealso cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceServer_WCF">
      </seealso>
      <seealso cref="T:Corning.GenSys.Point.IPointsServerRemote">
      </seealso>
      <seealso cref="T:Corning.GenSys.Point.IPointsServerReply">
      </seealso>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.#ctor(System.String,System.String,System.Boolean@,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF" /> class.
            </summary>
      <param name="strName">Name of the object instance.</param>
      <param name="strServerURL">The remote point server URL where this instance is supposed to connect to.</param>
      <param name="bStatus">Set to <c>true</c> if the connection to the remote server is successful. If the connection is unsuccessful it returns
            <c>false</c></param>
      <param name="dReceiveTimeout_s">The WCF timeout when receiving messages in seconds. Default value of 30 seconds.</param>
      <param name="dSendTimeout_s">The WCF timeout when sending messages in seconds. Default value of 30 seconds.</param>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.#ctor(System.String,System.Boolean@,System.Double,System.Double)">
      <summary>
        <para>Deprecated 09/11/2015 because an instance name is now required. If this constructor is used the name will be set to "WCF".</para>
        <para>Initializes a new instance of the <see cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF" /> class.</para>
      </summary>
      <param name="strServerURL">The remote point server URL where this instance is supposed to connect to.</param>
      <param name="bStatus">Set to <c>true</c> if the connection to the remote server is successful. If the connection is unsuccessful it returns
            <c>false</c></param>
      <param name="dReceiveTimeout_s">The WCF timeout when receiving messages in seconds. Default value of 30 seconds.</param>
      <param name="dSendTimeout_s">The WCF timeout when sending messages in seconds. Default value of 30 seconds.</param>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.#ctor(System.String,System.UInt16,System.Net.IPAddress,System.Double,System.Double)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF" /> class.</para>
        <para>This constructor is used by the <see cref="M:Corning.GenSys.Point.CSystemNetworker.AddRemoteSystem">CSystemNetworker.AddRemoteSystem Method</see> using the name of the remote point server for the strName parameter</para>
      </summary>
      <param name="strName">Name of the object instance.</param>
      <param name="usPort">The port of the remote point server where this instance is supposed to connect to.</param>
      <param name="oIpAddress">The ip address of the remote point server where this instance is supposed to connect to.</param>
      <param name="dReceiveTimeout_s">The WCF timeout when receiving messages in seconds. Default value of 30 seconds.</param>
      <param name="dSendTimeout_s">The WCF timeout when sending messages in seconds. Default value of 30 seconds.</param>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.#ctor(System.UInt16,System.Net.IPAddress,System.Double,System.Double)">
      <summary>
        <para>Deprecated 09/11/2015 because an instance name is now required. If this constructor is used the name will be set to "WCF".</para>
        <para>Initializes a new instance of the <see cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF" /> class.</para>
      </summary>
      <param name="usPort">The port of the remote point server where this instance is supposed to connect to.</param>
      <param name="oIpAddress">The ip address of the remote point server where this instance is supposed to connect to.</param>
      <param name="dReceiveTimeout_s">The WCF timeout when receiving messages in seconds. Default value of 30 seconds.</param>
      <param name="dSendTimeout_s">The WCF timeout when sending messages in seconds. Default value of 30 seconds.</param>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.DisconnectFromPointsServer">
      <summary>
            Disconnects from the remote points server.
            </summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.EnumPoints(System.String[]@)">
      <summary>This is the realization of the <see cref="M:Corning.GenSys.Point.IPointsServerRemote.EnumPoints(System.String[]@)">IPointsServerRemote.EnumPoints Method</see>. Will call the
            <see cref="M:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter.EnumPoints(System.String[]@)">CPointServerRemote_ComplexTypeAdapter.EnumPoints Method</see> via WCF.</summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.EnumAttributes(System.String[]@,System.String[]@,System.String[]@)">
      <summary>This is the realization of the <see cref="M:Corning.GenSys.Point.IPointsServerRemote.EnumAttributes(System.String[]@,System.String[]@,System.String[]@)">IPointsServerRemote.EnumAttributes Method</see></summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.GetPoints(System.String[],System.String[],System.String[]@,System.String[]@)">
      <summary>This is the realization of the <see cref="M:Corning.GenSys.Point.IPointsServerRemote.GetPoints(System.String[],System.String[],System.String[]@,System.String[]@)">IPointsServerRemote.GetPoints Method</see></summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.GetBlobPoint(System.String,System.String,System.Object@,System.String@)">
      <summary>
        <para>This method will get a point from the remote point server via WCF. It is expected that the data has been processed by
            <see cref="M:Corning.GenSys.PointsInterface_WCF.CPointServerRemote_ComplexTypeAdapter.GetBlobPoint(System.String,System.String,System.Object@,System.String@)">CPointServerRemote_ComplexTypeAdapter.GetBlobPoint Method</see> on the remote system. Therefore, in the case
            where the point underlying type is a complex type the object received via WCF will contain a byte array. This byte array will be deserialized using the
            <see cref="O:Corning.GenSys.PointsInterface_WCF.CBinarySerializer.Deserialize">CBinarySerializer.Deserialize Method</see> and the deserialized data is assigned to
            <em>objPointData</em>.</para>
        <para>This is the realization of <see cref="M:Corning.GenSys.Point.IPointsServerRemote.GetBlobPoint(System.String,System.String,System.Object@,System.String@)">IPointsServerRemote.GetBlobPoint Method</see>.</para>
      </summary>
      <param name="strPointName">Name of the point to retrieve data from.</param>
      <param name="strAttribute">Name of the attribute to return.</param>
      <param name="objPointData">Out parameter where the retrieved data is stored.</param>
      <param name="strErrorMessage">Out parameter containing an string describing an error when the return value is false. It is null otherwise.</param>
      <returns>True if the method call was successful. False if the method call failed. If false <em>strErrorMessage</em> contains the cause of the error.</returns>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.SetPoints(System.String[],System.String[],System.String[],System.String[]@)">
      <summary>This is the realization of the <see cref="M:Corning.GenSys.Point.IPointsServerRemote.SetPoints(System.String[],System.String[],System.String[],System.String[]@)">IPointsServerRemote.SetPoints Method</see></summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.SetBlobPoint(System.String,System.String,System.Object,System.String@)">
      <summary>Sets a point using binary serialization. This method calls the <see cref="M:Corning.GenSys.PointsInterface_WCF.CBinarySerializer.SerializeForWcf(System.Object)">CBinarySerializer.SerializeForWcf Method</see> which will
            serialize any object which is not a primitive type to a byte array. Therefore all primitive types will rely solely on the Microsoft DataContractSerializer to
            transfer data while all other types will be first serialized to a byte array which is subsequently serialized by the DataContractSerializer. This is necessary
            because the DataContractSerializer does not support complex types. Using this pattern, any kind of point underlying type can be used with this method.</summary>
      <param name="strPointName">Name of the string point.</param>
      <param name="strAttribute">The string attribute.</param>
      <param name="oData">The o data.</param>
      <param name="strErrorMessage">The string error message.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.SubscribeFaults(System.String[],System.String[]@)">
      <summary>This is the realization of the <see cref="M:Corning.GenSys.Point.IPointsServerRemote.SubscribeFaults(System.String[],System.String[]@)">IPointsServerRemote.SubscribeFaults Method</see></summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.UnSubscribeFaults(System.String[],System.String[]@)">
      <summary>This is the realization of the <see cref="M:Corning.GenSys.Point.IPointsServerRemote.UnSubscribeFaults(System.String[],System.String[]@)">IPointsServerRemote.UnSubscribeFaults Method</see></summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.SubscribePointChange(System.String[],System.String[],System.String[],System.String[]@)">
      <summary>This is the realization of the <see cref="M:Corning.GenSys.Point.IPointsServerRemote.SubscribePointChange(System.String[],System.String[],System.String[],System.String[]@)">IPointsServerRemote.SubscribePointChange Method</see></summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.UnSubscribePointChange(System.String[],System.String[]@)">
      <summary>This is the realization of the <see cref="M:Corning.GenSys.Point.IPointsServerRemote.UnSubscribePointChange(System.String[],System.String[]@)">IPointsServerRemote.UnSubscribePointChange Method</see></summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.FaultNotification(System.String[],System.String[],System.String[],System.String[])">
      <summary>This is the realization of the <see cref="M:Corning.GenSys.Point.IPointsServerReply.FaultNotification(System.String[],System.String[],System.String[],System.String[])">IPointsServerReply.FaultNotification Method</see></summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.PointChangeNotification(System.String[],System.String[],System.String[],System.String[])">
      <summary>This is the realization of the <see cref="M:Corning.GenSys.Point.IPointsServerReply.PointChangeNotification(System.String[],System.String[],System.String[],System.String[])">IPointsServerReply.PointChangeNotification Method</see></summary>
    </member>
    <member name="P:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.ServerConnectionValid">
      <summary>
            Gets a value indicating whether the object instance is connected to a remote point server.
            </summary>
      <value>
        <c>true</c> if the object instance is connected to a remote point server; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.ServerUrl">
      <summary>
            Gets the remote point server URL.
            </summary>
      <value>
            The remote point server URL.
            </value>
    </member>
    <member name="P:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF.Name">
      <summary>Gets the name of the object instance set at construction time. If the object instance was created by a <see cref="!:Point.CSystemNetworker">CSystemNetworker Class</see> object this property
            contains the name of the remote point server.</summary>
      <value>
            The name of the object instance set at construction time.
            </value>
    </member>
    <member name="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceServer_WCF">
      <summary>
            This class is used to expose a local point server to an ip network and allows clients of type <see cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceClient_WCF" /> to access it.
            </summary>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceServer_WCF.#ctor(System.String,Corning.GenSys.Point.IPointsServerRemote,Corning.GenSys.Point.IPointsServerReply,System.Boolean@,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceServer_WCF" /> class. This class exposes a point server's <see cref="T:Corning.GenSys.Point.IPointsServerRemote" /> interface to an ip
            network on the specified network port.</summary>
      <param name="strServerURL">The url string to the WCF service.</param>
      <param name="oDataServer">An object realizing the <see cref="T:Corning.GenSys.Point.IPointsServerRemote" /> interface. In most cases a <see cref="!:Point.CPointServerBase">CPointServerBase Class</see> instance.</param>
      <param name="oDataClient">An object realizing the <see cref="T:Corning.GenSys.Point.IPointsServerReply" /> interrface.</param>
      <param name="bStatus">Set to <c>true</c> if the connection to the remote server is successful. If the connection is unsuccessful it returns
            <c>false</c></param>
      <param name="dReceiveTimeout_s">The WCF timeout when receiving messages in seconds. Default value of 30 seconds.</param>
      <param name="dSendTimeout_s">The WCF timeout when sending messages in seconds. Default value of 30 seconds.</param>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceServer_WCF.Create(Corning.GenSys.Point.IPointsServerRemote,Corning.GenSys.Point.IPointsServerReply,System.UInt16,System.Net.IPAddress,System.Double,System.Double)">
      <summary>Creates and initializes a new instance of the <see cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceServer_WCF" /> class. This class exposes a point server's <see cref="T:Corning.GenSys.Point.IPointsServerRemote" /> interface to an ip
            network on the specified network port.</summary>
      <param name="oDataServer">An object realizing the <see cref="T:Corning.GenSys.Point.IPointsServerRemote" /> interface. In most cases a <see cref="!:Point.CPointServerBase">CPointServerBase Class</see> instance.</param>
      <param name="oDataClient">An object realizing the <see cref="T:Corning.GenSys.Point.IPointsServerReply" /> interrface.</param>
      <param name="usPort">The network port the server will listen on.</param>
      <param name="oIpAddress">The ip address of the Ethernet controller the server listen on. Use 127.0.0.1 to listen on all controllers..</param>
      <param name="dReceiveTimeout_s">The WCF timeout when receiving messages in seconds. Default value of 30 seconds.</param>
      <param name="dSendTimeout_s">The WCF timeout when sending messages in seconds. Default value of 30 seconds.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.PointsInterface_WCF.PointsInterfaceServer_WCF.DisconnectFromPointsClient">
      <summary>
            Disconnects all clients.
            </summary>
    </member>
    <member name="T:Corning.GenSys.Point.CNamedConnection">
      <summary>Contains the necessary parameters to establish an Ethernet connection i.e. ip address and port. It also contains a name associated with the connection. This is
            used by the <see cref="T:Corning.GenSys.Point.CSystemNetworker">CSystemNetworker class</see> to establish the reverse connection to a point server. CNamedConnection allows the entire content to be
            encoded to a string using the <see cref="P:Corning.GenSys.Point.CNamedConnection.NameIpAddressPort">NameIpAddressPort Property</see> and decoded by using the <see cref="M:Corning.GenSys.Point.CNamedConnection.Create(System.String)">Create Method</see>.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CNamedConnection.Create(System.String)">
      <summary>Class factory used to create instances of the <see cref="T:Corning.GenSys.Point.CNamedConnection">CNamedConnection Class</see>. The string passed to this function should use the
            following format: &lt;Name&gt;:&lt;IpAddress&gt;:&lt;Port#&gt;. ex: "Server:192.168.0.10:8080"</summary>
      <param name="strNameIpAddressPort">Uses the following format: &lt;Name&gt;:&lt;IpAddress&gt;:&lt;Port#&gt;. ex: "Server:192.168.0.10:8080"</param>
    </member>
    <member name="P:Corning.GenSys.Point.CNamedConnection.NameIpAddressPort">
      <value>Uses the following format: &lt;Name&gt;:&lt;IpAddress&gt;:&lt;Port#&gt;. ex: "Server:192.168.0.10:8080"</value>
    </member>
    <member name="P:Corning.GenSys.Point.CNamedConnection.Name">
      <summary>A name associated with the connection</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CNamedConnection.IpAddress">
      <summary>IP address of the connection</summary>
    </member>
    <member name="P:Corning.GenSys.Point.CNamedConnection.Port">
      <summary>The Ethernet port used by the connection.</summary>
    </member>
    <member name="T:Corning.GenSys.Point.CPointserverNotifHandler">
      <summary>This class allows a user to easily create an object realizing the <see cref="T:Corning.GenSys.Point.IPointsServerReply">IPointsServerReply Interface</see> with two delegates. One delegate
            handles point changes notifications while the other delegate handles point faults notifications.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointserverNotifHandler.#ctor(System.Func{System.String[],System.String[],System.String[],System.String[],System.Boolean},System.Func{System.String[],System.String[],System.String[],System.String[],System.Boolean})">
      <summary>Creates a <see cref="T:Corning.GenSys.Point.CPointserverNotifHandler">CPointserverNotifHandler Class</see> with a delegate handling point changes notifications and a delegate handling point
            faults notifications</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointserverNotifHandler.FaultNotification(System.String[],System.String[],System.String[],System.String[])">
      <summary>Realization of the <see cref="M:Corning.GenSys.Point.IPointsServerReply.FaultNotification(System.String[],System.String[],System.String[],System.String[])">IPointsServerReply.FaultNotification Method</see></summary>
    </member>
    <member name="M:Corning.GenSys.Point.CPointserverNotifHandler.PointChangeNotification(System.String[],System.String[],System.String[],System.String[])">
      <summary>Realization of the <see cref="M:Corning.GenSys.Point.IPointsServerReply.PointChangeNotification(System.String[],System.String[],System.String[],System.String[])">IPointsServerReply.PointChangeNotification Method</see></summary>
    </member>
    <member name="M:Corning.GenSys.Point.CRemoteSystemProxy.TriggerRemoteSystemReverseConnection(Corning.GenSys.Point.CNamedConnection,System.String)">
      <summary>
            Writes the connection information of the caller to a point on the remote system which will trigger the remote system to add the 
            calling system as a client.
            </summary>
      <param name="oNamedConnectionCaller">Named connection of the system calling this method</param>
      <param name="strRemoteSystemNameIpAddressPortPointName">The name of the point where this information should be sent. It is a constant string</param>
      <returns>
      </returns>
    </member>
    <member name="T:Corning.GenSys.Point.CSystemNetworker">
      <summary>
        <para>A common scenario occurs when two point servers are located on two different computers and both computer require remote access to the remote point server.
            In this case it is necessary to establish a bidirectional connection. This requires that both computer have an instance of
            <see cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceServer_WCF">PointsInterfaceServer_WCF</see> to serve their point server and
            <see cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceServer_WCF">PointsInterfaceClient_WCF</see> to access the remote point server. Because software on both computer cannot start at
            the same time it is required to implement a retry strategy. Also both computer will need to know the ip address and port number of the other computer.</para>
        <para>In order to simplify the implementation of such a scenario class CSystemNetworker has been added to the GenSys library. This class takes care of the
            instantiation of <see cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceServer_WCF">PointsInterfaceServer_WCF</see> and
            <see cref="T:Corning.GenSys.PointsInterface_WCF.PointsInterfaceServer_WCF">PointsInterfaceClient_WCF</see> as well as the automatic creation of a reverse connection so that only one of the two
            computer needs to know the ip address and port of the other computer. Due to the automatic creation of a reverse connection, the computer that does not need to
            know the ip address of the other computer is viewed as a server while the other one is viewed as a client. The CSystemNetworker class can assume both client
            and server roles. For a CSystemNetworker to be a server one simply needs to call one of the <see cref="O:Corning.GenSys.Point.CSystemNetworker.Create">Create Methods</see>.
            For a CSystemNetworker to be a client one needs to call one of the <see cref="O:Corning.GenSys.Point.CSystemNetworker.Create">Create Methods</see> as well as make one call to
            the <see cref="O:Corning.GenSys.Point.CSystemNetworker.AddRemoteSystem">AddRemoteSystem Method</see> witch will establish a connection to the remote point server as well as
            create the reverse connection. In the case when the CSystemNetworker implements a client role a retry strategy is implemented so the software on both client
            and server computer can be started in any order.</para>
      </summary>
      <example>
        <code title="Creation of a CSystemNetworker object acting as a Server" description="This example shows how to create a CSystemNetworker object acting as a Server. The only difference in the code compared to the client creation is that the server is not connecting to a remote system." groupname="Server" lang="CS">
            // Example creating a CSystemNetworker object acting as a server
            private void CreateServer()
            {
                // Creates the point server that will be exposed to the ip network by the SystemNetworker
                m_oDataServer = new CPointsServer();
                // Add local points to local point server created on previous line
                CLocalServerPoints.AddPointsToDataServer(m_oDataServer);
                // Creates a new CSystemNetworker named "Server" which will listen on all ethernet interfaces on port 9091
                m_oSystemNetworker = CSystemNetworker.Create(m_oDataServer, new CPointserverNotifHandler(null, null), "Server", 9091,
                                                             IPAddress.Parse("127.0.0.1"));
                // Test that the CSystemNetworker was created properly.
                if (m_oSystemNetworker == null)
                {
                    MessageBox.Show("Error:  Unable to create server SystemNetworker! ");
                }
            }</code>
        <code title="Creation of a CSystemNetworker object acting as a Client" description="This example shows how to create a CSystemNetworker object acting as a Client. The only difference in the code compared to the server creation is that the client contains code to connect to a remote system." groupname="Client" lang="CS">
            // Example creating a CSystemNetworker object acting as a client
            private void CreateClient()
            {
                // Creates the point server that will be exposed to the ip network by the SystemNetworker
                m_oDataServer = new CPointsServer();
                // Add local points to local point server created on previous line
                CLocaClientPoints.AddPointsToDataServer(m_oDataServer);
                // Creates a new CSystemNetworker named "Client" which will listen on all ethernet interfaces on port 8091
                m_oSystemNetworker = CSystemNetworker.Create(m_oDataServer, new CPointserverNotifHandler(null, null), "Client", 8091,
                                                             IPAddress.Parse("127.0.0.1"));
                // Test that the CSystemNetworker was created properly.
                if (m_oSystemNetworker == null)
                {
                    MessageBox.Show("Error:  Unable to create client SystemNetworker! ");
                }
                else
                {
                    // Subscribe to the CSystemNetworker OnConnected event which will be raised each time a connection to another 
                    // CSystemNetworker is established.
                    m_oSystemNetworker.OnConnected += m_oSystemNetworker_OnConnected;
                    // Add a connection to a remote CSystemNetworker named "Server" at ip address 192.168.0.50 listening on port 9091.
                    // If the server is not yet responding the code will periodically retry the connection. When the connection has
                    // been established the OnConnected event is raised.
                    // This line of code is the only difference with the server code.
                    m_oSystemNetworker.AddRemoteSystem("Server", 9091, IPAddress.Parse("192.168.0.50"), 10, 10);
                }
            }</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.Point.CSystemNetworker.#ctor(Corning.GenSys.Point.CPointsServer,Corning.GenSys.Point.IPointsServerReply,System.String,System.UInt16,System.Net.IPAddress,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Class used to facilitate the network connection of a CPointsServer and/or a IPointsServerReply with another
            CSystemNetworker. This class uses the WCF client and server classes to enable the connection. It also creates
            hidden points in the point server to enable an automatic reverse connection.
            When the system to connect to is not available this 
            </summary>
      <param name="oPointsServer">
      </param>
      <param name="iPointsServerReply">
      </param>
      <param name="strSystemName">
      </param>
      <param name="usPort">
      </param>
      <param name="oIpAddress">
      </param>
      <param name="dServerReceiveTimeout">
      </param>
      <param name="dServerSendTimeout">
      </param>
      <param name="dClientAutoConnectReceiveTimeout">Used by a "Server" when a client connects to it. In the case of a "Client" this parameter is passed in the AddRemoteSystem method</param>
      <param name="dClientAutoConnectSendTimeout">Used by a "Server" when a client connects to it. In the case of a "Client" this parameter is passed in the AddRemoteSystem method</param>
    </member>
    <member name="M:Corning.GenSys.Point.CSystemNetworker.Create(Corning.GenSys.Point.CPointsServer,System.String,System.UInt16,System.Net.IPAddress,System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates a new system networker that will listen for incoming connections. All timeouts defaults to 30 seconds.</summary>
      <param name="oPointsServer">The point server clients will have access to</param>
      <param name="strSystemName">The name of the system. This is the name that the client needs to use along with the appropriate ip address and port number.</param>
      <param name="usPort">Port on which the server listens.</param>
      <param name="oIpAddress">Ip address of the Ethernet controller the server listen on. Use 127.0.0.1 to listen on all controllers.</param>
      <param name="dClientReceiveTimeout_s">Used when a reverse connection is automatically created.</param>
      <param name="dClientSendTimeout_s">Used when a reverse connection is automatically created.</param>
    </member>
    <member name="M:Corning.GenSys.Point.CSystemNetworker.Create(Corning.GenSys.Point.IPointsServerReply,System.String,System.UInt16,System.Net.IPAddress,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <para>Creates a new system networker that will listen for incoming connections. All timeouts defaults to 30 seconds.</para>
        <para>This overload is to be used when no local point server is to be shared.</para>
      </summary>
      <param name="iPointsServerReply">
        <para>Used to handle fault and change notifications from the remote point server. Two delegates can be passed with the use of the <see cref="T:Corning.GenSys.Point.CPointserverNotifHandler">CPointserverNotifHandler
            Class</see>.</para>
        <para>This parameter can be set to null if it is not needed.</para>
      </param>
      <param name="strSystemName">The name of the system. This is the name that the client needs to use along with the appropriate ip address and port number.</param>
      <param name="usPort">Port on which the server listens.</param>
      <param name="oIpAddress">Ip address of the Ethernet controller the server listen on. Use 127.0.0.1 to listen on all controllers.</param>
      <param name="dClientReceiveTimeout_s">Used when a reverse connection is automatically created.</param>
      <param name="dClientSendTimeout_s">Used when a reverse connection is automatically created.</param>
    </member>
    <member name="M:Corning.GenSys.Point.CSystemNetworker.Create(Corning.GenSys.Point.CPointsServer,Corning.GenSys.Point.IPointsServerReply,System.String,System.UInt16,System.Net.IPAddress,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <para>Creates a new system networker that will listen for incoming connections. All timeouts defaults to 30 seconds.</para>
        <para>This overload is to be used when a local point server is to be shared.</para>
      </summary>
      <param name="oPointsServer">The local point server is to be shared.</param>
      <param name="iPointsServerReply">
        <para>Used to handle fault and change notifications from the remote point server. Two delegates can be passed with the use of the <see cref="T:Corning.GenSys.Point.CPointserverNotifHandler">CPointserverNotifHandler
            Class</see>.</para>
        <para>This parameter can be set to null if it is not needed.</para>
      </param>
      <param name="strSystemName">The name of the system. This is the name that the client needs to use along with the appropriate ip address and port number.</param>
      <param name="usPort">Port on which the server listens.</param>
      <param name="oIpAddress">Ip address of the Ethernet controller the server listen on. Use 127.0.0.1 to listen on all controllers.</param>
      <param name="dClientReceiveTimeout_s">Used when a reverse connection is automatically created.</param>
      <param name="dClientSendTimeout_s">Used when a reverse connection is automatically created.</param>
    </member>
    <member name="M:Corning.GenSys.Point.CSystemNetworker.AddRemoteSystem(System.String,System.UInt16,System.Net.IPAddress,System.Double,System.Double)">
      <summary>This method creates a connection to a remote CSystemNetworker instance as well as a reverse connection. If the remote CSystemNetworker instance does not
            respond the software keeps retrying at a rate specified at the time the CSystemNetworker instance was created.</summary>
      <param name="strSystemName">Name of the remote CSystemNetworker instance</param>
      <param name="usPort">Port number of the remote CSystemNetworker instance</param>
      <param name="oIpAddress">Ip address of the remote CSystemNetworker instance</param>
    </member>
    <member name="M:Corning.GenSys.Point.CSystemNetworker.AddRemoteSystem(Corning.GenSys.Point.CNamedConnection,System.Boolean,System.Double,System.Double)">
      <summary>
            Adds a remote system. This method can be called by a client of the system connector or by a remote
            system connector establishing a reverse connection.
            </summary>
      <param name="oNamedConnection">
      </param>
      <param name="bTriggerReverseConnection">Should be true if the call was initiated by a client</param>
      <param name="dReceiveTimeout_s">
      </param>
      <param name="dSendTimeout_s">
      </param>
    </member>
    <member name="M:Corning.GenSys.Point.CSystemNetworker.ConnectionDetectionCallBack(System.String,Corning.GenSys.Point.IPoint,System.Object)">
      <summary>
            This function is called after a remote system has been connected. It is initated by a call to the method
            TriggerRemoteSystemReverseConnection on the remote system
            </summary>
      <param name="iPoint"> Contains a string SystemName:IpAddress:Port</param>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.Point.CSystemNetworker.EnumerateConnectedSystem">
      <summary>Returns an array of strings containing the name of each remote system the local systtem is connected to.</summary>
    </member>
    <member name="M:Corning.GenSys.Point.CSystemNetworker.GetConnectedPointServerRemote(System.String)">
      <summary>
        <para>Return an object realizing the <see cref="T:Corning.GenSys.Point.IPointsServerRemote">IPointsServerRemote Interface</see> interface pointing to the remote system with name strName. The name
            of all remote system connected can be obtain by calling the <see cref="M:Corning.GenSys.Point.CSystemNetworker.EnumerateConnectedSystem">EnumerateConnectedSystem Method</see>.</para>
        <para>If no system with name strName is connected this method returns null</para>
      </summary>
      <param name="strName">The name of the remote server.</param>
      <returns>An object realizing the <see cref="T:Corning.GenSys.Point.IPointsServerRemote">IPointsServerRemote Interface</see> interface pointing to the remote system with name strName.
            <para>null if no system with name strName is connected.</para></returns>
    </member>
    <member name="M:Corning.GenSys.Point.CSystemNetworker.GetConnectedPointServerNotif(System.String)">
      <summary>
        <para>Return an object realizing the <see cref="T:Corning.GenSys.Point.IPointsServerReply">IPointsServerReply Interface</see> interface pointing to the remote system with name strName. The name
            of all remote system connected can be obtain by calling the <see cref="M:Corning.GenSys.Point.CSystemNetworker.EnumerateConnectedSystem">EnumerateConnectedSystem Method</see>.</para>
        <para>If no system with name strName is connected this method returns null</para>
      </summary>
      <param name="strName">The name of the remote server.</param>
      <returns>An object realizing the <see cref="T:Corning.GenSys.Point.IPointsServerReply">IPointsServerReply Interface</see> interface pointing to the remote system with name strName.
            <para>null if no system with name strName is connected.</para></returns>
    </member>
    <member name="M:Corning.GenSys.Point.CSystemNetworker.GetPointProxyServer(System.String)">
      <summary>
        <para>Return an object realizing the <see cref="T:Corning.GenSys.Point.IPointProxyServer">IPointProxyServer Interface</see> interface pointing to the remote system with name strName. The name
            of all remote system connected can be obtain by calling the <see cref="M:Corning.GenSys.Point.CSystemNetworker.EnumerateConnectedSystem">EnumerateConnectedSystem Method</see>.</para>
        <para>If no system with name strName is connected this method returns null</para>
      </summary>
      <param name="strName">The name of the remote server.</param>
      <returns>An object realizing the <see cref="T:Corning.GenSys.Point.IPointProxyServer">IPointProxyServer Interface</see> interface pointing to the remote system with name strName.
            <para>null if no system with name strName is connected.</para></returns>
    </member>
    <member name="E:Corning.GenSys.Point.CSystemNetworker.OnConnected">
      <summary>This event is fired when a connection is established with a remote system. The arguments are the CSystemNetworker sender and the name of the remote system
            connected to.</summary>
    </member>
    <member name="T:Corning.GenSys.DirCleaner.CDirCleaner">
      <summary>
        <para>Class to perform housekeeping on a set of directories and/or subdirectories by limiting file retention time, the total size and number of files they
            contain.</para>
        <para>Cleaning can be specified to occur either synchronously or asynchronously. Cleaning can be performed on all file extensions or either inclusion or exclusion
            file Extensions may be specified. Multiple directories may be specified for cleaning and may be on different drives. The cleaning interval is specified in
            Minutes, Hours, or days. Periodic cleaning may be specified by setting one of the DirectoryCleaningIntervalInXXXX properties then setting the
            <see cref="P:Corning.GenSys.DirCleaner.CDirCleaner.PeriodicCleaningEnabled">PeriodicCleaningEnabled Property</see> to "true". Retention time is specified in Minutes, Hours, or days. Directories not
            specified for cleaning are removed when they have no files and no subdirectories.</para>
        <para>Sample Code: The following code creates a directory cleaner, specifies directories BB and CC on the C Drive are to be cleaned. *.csv files are NOT to be
            cleaned. A combined limit of 500 files may remain in the specified directories after cleaning. Note: Files with a *.csv extension are not counted in this limit
            A combined limit of 200 MegaBytes may remain in the specified directories after cleaning. Note: Files with a *.csv extension are not counted in this limit
            Files older than 7 days are cleaned An initial asynchronous cleaning is performed then a periodic cleaning interval of 1.5 minutes is specified and the
            Directory Cleaning timer enabled.</para>
      </summary>
      <example>
        <code title="Example" description="The following code creates a directory cleaner, specifies directories BB and CC on the C Drive are to be cleaned. *.csv files are NOT to be cleaned. A combined limit of 500 files may remain in the specified directories after cleaning. Note: Files with a *.csv extension are not counted in this limit A combined limit of 200 MegaBytes may remain in the specified directories after cleaning. Note: Files with a *.csv extension are not counted in this limit Files older than 7 days are cleaned An initial asynchronous cleaning is performed then a periodic cleaning interval of 1.5 minutes is specified and the Directory Cleaning timer enabled." lang="CS">
            using DirectoryCleaner;
             
            CDirCleaner oDirCleaner = new CDirCleaner();
            oDirCleaner.AddDirPath("C:\\CC");
            oDirCleaner.AddDirPath("C:\\BB");
            oDirCleaner.AddExclusionFileExtension(".csv");
            oDirCleaner.MaxNumOfFiles = 500;
            oDirCleaner.MaxCombinedDirSize = 200000000;
            oDirCleaner.FileRetentionInDays = 7;
            oDirCleaner.CleanDirsOnceAsync();
            oDirCleaner.CleaningIntervalInMinutes = 1.5;
            oDirCleaner.PeriodicCleaningEnabled = true;</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.#ctor">
      <summary>
            The constructor for CDirectoryCleaner. 
            </summary>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.GetTimeSpanFromSeconds(System.Int64)">
      <summary>
            Returns a TimeSpan from the supplied number of seconds.
            </summary>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.RemoveAllDirPaths">
      <summary>
            Clears the list of all directory path to be cleaned.
            </summary>
      <returns>   true if it succeeds, false if it fails. </returns>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.RemoveAllFileExtensions">
      <summary>
            Clears the list of all File extensions to be cleaned.
            </summary>
      <returns>   true if it succeeds, false if it fails. </returns>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.AddDirPath(System.String)">
      <summary>
            Adds an additional directory path to be cleaned.
            </summary>
      <param name="strDirectoryPath">The addition directory path to be cleaned.</param>
      <returns>   true if it succeeds, false if the directory doesn't exist or if it fails. </returns>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.AddDirPaths(System.String[])">
      <summary>
            Adds an additional directory paths to be cleaned.
            </summary>
      <param name="astrDirectoryPaths">An array of addition directory paths to be cleaned.</param>
      <returns>   true if it succeeds, false if any directory doesn't exist or if it fails. </returns>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.RemoveDirPath(System.String)">
      <summary>
            Removes a directory path to be cleaned.
            </summary>
      <param name="strDirectoryPath">The directory path to be removed.</param>
      <returns>   true if it succeeds, false if the directory didn't exist in the list of cleaned directories or if it fails. </returns>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.RemoveDirPaths(System.String[])">
      <summary>
            Removes a set of directory paths to be cleaned.
            </summary>
      <param name="astrDirectoryPaths">An array of directory paths to be removed.</param>
      <returns>   true if it succeeds, false if any directory didn't exist in the list of cleaned directories or if it fails. </returns>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.AddInclusionFileExtension(System.String)">
      <summary>
            Adds an additional file extension which a file must possess to qualify for cleaning.
            </summary>
      <param name="strFileExtensions"> Files with this extension are included be cleaned.</param>
      <returns>   true if it succeeds, false if it fails. </returns>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.AddInclusionFileExtensions(System.String[])">
      <summary>
            Adds an array of additional file extensions which a file must possess to qualify for cleaning.
            </summary>
      <param name="astrFileExtensions"> Files with this extension are included be cleaned.</param>
      <returns>   true if it succeeds, false if it fails. </returns>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.AddExclusionFileExtension(System.String)">
      <summary>
            Adds an additional file extension which a file must NOT possess to qualify for cleaning.
            </summary>
      <param name="strFileExtensions"> Files with this extension are excluded from cleaning.</param>
      <returns>   true if it succeeds, false if it fails. </returns>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.AddExclusionFileExtensions(System.String[])">
      <summary>
            Adds an array of additional file extensions which a file must NOT possess to qualify for cleaning.
            </summary>
      <param name="astrFileExtensions"> Files with this extension are excluded from cleaning.</param>
      <returns>   true if it succeeds, false if it fails. </returns>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.RemoveFileExtension(System.String)">
      <summary>
            Removes a File Extension used during cleaning.
            </summary>
      <param name="strFileExtension">The File Extension to be removed.</param>
      <returns>   true if it succeeds, false if the File Extension didn't exist in the list of File Extensions or if it fails. </returns>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.RemoveFileExtensions(System.String[])">
      <summary>
            Removes a set of File Extensions used during cleaning.
            </summary>
      <param name="astrFileExtensions">An array of File Extensions to be removed.</param>
      <returns>   true if it succeeds, false if any File Extension didn't exist in the list of File Extensions or if it fails. </returns>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.PeriodicCleanerThread">
      <summary>
            Thread which kicks off Periodic Cleaning.
            </summary>
      <remarks>
              The lock object, m_oPeriodicCleanerThreadLock, is pulsed:
              1.) When Periodic Cleaning is enabled and the one of the Cleaning Intervals is set.
              2.) When the PeriodicCleaningEnabled is touched.
            </remarks>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.CleanDirsOnceAsync">
      <summary>
            Asynchronously cleans the specified directories and sub-directories using the specified file inclusion/exclusion extensions using a thread from the thread pool.
            </summary>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.CleanDirsOnce(System.Object)">
      <summary>
            Helper function to clean the specified directories and sub-directories using the specified file inclusion/exclusion extensions.
            </summary>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.CleanDirsOnce">
      <summary>
            Cleans the specified directories and sub-directories using the specified file inclusion/exclusion extensions.
            </summary>
      <remarks>
            To clean all files in the specified directories and sub-directories, do not set any inclusion or exclusion File Extensions.
            Trying to use a wildcard "*" for the File Extension will not work.
            </remarks>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.strGetCommaDelimitedStringOfDirs">
      <summary>
            Returns a comma delimited string of File Directories used in the cleaning process.
            </summary>
      <returns>   A string of comma delimited file directories. </returns>
    </member>
    <member name="M:Corning.GenSys.DirCleaner.CDirCleaner.strGetCommaDelimitedStringOfFileExtensions">
      <summary>
            Returns a comma delimited string of file extensions that are used for determining qualification for inclusion/exclusion of the cleaning process.
            </summary>
      <returns>   A string of comma delimited file extensions. </returns>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.MaxCombinedDirSize">
      <summary>
            Gets/Sets the maximum combined size, in bytes, of the specified directories after cleaning. 
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.MaxCombinedDirSize_byte">
      <summary>
            Gets/Sets the maximum combined size, in kB, of the specified directories after cleaning. 
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.MaxCombinedDirSize_kB">
      <summary>
            Gets/Sets the maximum combined size, in kB, of the specified directories after cleaning. 
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.MaxCombinedDirSize_MB">
      <summary>
            Gets/Sets the maximum combined size, in MB, of the specified directories after cleaning. 
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.MaxCombinedDirSize_GB">
      <summary>
            Gets/Sets the maximum combined size, in GB, of the specified directories after cleaning. 
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.MaxNumOfFiles">
      <summary>
            Gets/Sets the maximum combined number of files which may remain in the specified directories after cleaning
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.CommaDelimitedStringOfDirPaths">
      <summary>
            Gets a comma delimited string of the directories to be cleaned
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.CommaDelimitedStringOfFileExtensions">
      <summary>
            Gets a comma delimited string of File Extensions
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.NumFilesDeletedFromLastCleaning">
      <summary>
            Gets number of files deleted by the last cleaning cycle.
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.NumBytesDeletedFromLastCleaning">
      <summary>
            Gets number of bytes deleted by the last cleaning cycle.
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.CleaningIntervalInMinutes">
      <summary>
            Gets and Sets the interval of the cleaning cycles in Minutes.
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.CleaningIntervalInHours">
      <summary>
            Gets and Sets the interval of the cleaning cycles in Hours.
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.CleaningIntervalInDays">
      <summary>
            Gets and Sets the interval of the cleaning cycles in Days.
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.PeriodicCleaningEnabled">
      <summary>
            Starts and reads the operating status of the Periodic Directory Cleaner
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.FileRetentionInDays">
      <summary>
            Gets and Sets how long Files are retained in days.
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.FileRetentionInHours">
      <summary>
            Gets and Sets how long Files are retained in hours.
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.FileRetentionInMinutes">
      <summary>
            Gets and Sets how long Files are retained in minutes.
            </summary>
    </member>
    <member name="P:Corning.GenSys.DirCleaner.CDirCleaner.PeriodicCleanerThreadPriority">
      <summary>
            Gets and Sets how long Files are retained in minutes.
            </summary>
    </member>
    <member name="M:Corning.GenSys.Group.CGroup`1.AddElementGroup(Corning.GenSys.Group.IGroup{`0},System.String)">
      <summary>
      </summary>
      <param name="grouptElement">
      </param>
      <param name="strNamePrefix">
      </param>
      <returns>Array of Elements that were not removed</returns>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.FeatureTypeName">
      <summary>
            The name of the feature type detected
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.FeatureType">
      <summary>
            The constant integer value that is always associated with this Feature type (offered to allow faster comparisons)
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.FeatureID">
      <summary>
             A unique ID associated with this particular feature instance
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.Density">
      <summary>
            The percent density of this feature in the range of 0 (min) to 100 (max)
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.Count">
      <summary>
            The count associated with the amount of this feature
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.AssociatedTimeStamp">
      <summary>
            Any timestamp associated with when the image associate with this feature vector was acquired
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.AssociatedCameraSerial">
      <summary>
            The reference of the ICamera object associated with the image used for this processing
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.TriggerCnt">
      <summary>
            The trigger count of the image associated with this image processing
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.FrameNum">
      <summary>
            The frame number of the image associated with this image processing
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.DUTLoc">
      <summary>
            Any location information (if available) associated with the device under test (DUT) position
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.SensorLoc">
      <summary>
            Any location information (if available) associated with the Sensor location
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.BrightnessMean">
      <summary>
            The mean of the brightness
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.BrightnessStdDev">
      <summary>
            The brightness standard deviation
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.BrightnessMode">
      <summary>
            The mean \ most common brightness 
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.BrigthnessAggregate">
      <summary>
            The sum of all of the pixel brightness providing energy information
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.MajorAxis">
      <summary>
            The X,Y pixel endpoints of the longest line that can be drawn through the object
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.MajorAxisAngle">
      <summary>
            Angle between the Major Axis and the x axis of the image in degrees
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.MajorAxisLength">
      <summary>
            The pixel length of the major axis
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.MinorAxis">
      <summary>
            The pixel X,Y endpoints of the shortest line that can be drawn through the object
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.MinorAxisAngle">
      <summary>
            The Angle between the Minor Axis and the x axis of the image in degrees
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.MinorAxisWidth">
      <summary>
            The pixel length of the minor axis (referred to as width of the Feature)
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.Perimeter">
      <summary>
            The perimeter of the feature (in pixels)
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.Area">
      <summary>
            The area of the feature (in square pixels)
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.BoundingBoxArea">
      <summary>
            The area of the bounding box of this feature (in square pixels)
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.Centroid">
      <summary>
            The center of this feature
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.WeightedCentroid">
      <summary>
            The weighted center (i.e. the center of the brightness) of this feature
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.SelectedImage">
      <summary>
             A reference to the image selected for display
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFeature`1.AnnotatedImage">
      <summary>
            A reference to the annotated image selected for display
            </summary>
    </member>
    <member name="P:Corning.GenSys.ImageProcBase.CFrameResults.AnnotatedImage">
      <summary>
             A reference to the image selected for display
            </summary>
    </member>
    <member name="T:Corning.GenSys.SettingAttribute.APointAttribute">
      <summary>
        <para>This attribute class is to be used to attribute a class property or field member, independently of their accessibility level, to allow the the
            automatic creation of points containing read and write Current Value delegate accessing the attributed field. In other word when using a point created
            based on the ASettingAttribute, reading its CurrentValue property will access the underlying field or property that was attributed.</para>
        <para>When a class has field or property attributed with this attribute points can be automatically created using <see cref="O:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint.CreateSettingPoints">CreateSettingPoints
            Method</see>.</para>
      </summary>
      <example>
        <code title="Example" description="This example illustrates how to create points using the ASettings Attribute" lang="CS">
            class CMyClass
            {
                public CMyClass(int dMinValue, int dMaxValue, double dControlledValue, float fValue)
                {
                    m_dMinValue = dMinValue;
                    m_dMaxValue = dMaxValue;
                    m_dControlledValue = dControlledValue;
                    m_fValue = fValue;
                }
             
                // Note that ASetting members with a name ending with "Property" can also be initialized with a
                // field name as illustrated with MaxValProperty
                [ASetting(Name = "ControledValue", Description = "My controlled Value", Units = "mm",
                            MinValProperty = "MinValue", MaxValProperty = "m_dMaxValue")]
                public double ControlledValue
                {
                    get { return m_dControlledValue; }
                    set { m_dControlledValue = value; }
                }
             
                public float Value
                {
                    get { return m_fValue; }
                    set { m_fValue = value; }
                }
             
                public double MaxValue
                {
                    get { return m_dMaxValue; }
                    set { m_dMaxValue = value; }
                }
             
                public double MinValue
                {
                    get { return m_dMinValue; }
                    set { m_dMinValue = (int)value; }
                }
             
                private double m_dMinValue;
                private double m_dMaxValue;
                private double m_dControlledValue;
             
                [ASetting(Name = "Value", Description = "My Value", Units = "%",
                            MinVal = 0, MaxVal = 100,
                            ReadAccess = EAccess.Operator | EAccess.Admin, WriteAccess = EAccess.Admin,
                            InstanceNameOverride = "MyOverride")]
                private float m_fValue;
            }
             
            public static void PointCreationExampleUsingASettingsAttributes()
            {
             
                // &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
                // Point creation using the ASetting attribute
                // &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
                CMyClass myclass1 = new CMyClass(-5, 500, 10.5, 56.78f);
                CMyClass myclass2 = new CMyClass(-60, 60, 30d, 87.89f);
             
                // The follolwing will create two points named "Main.First.ControledValue", "Main.First.Value"
                List&lt;IPoint&gt; lstipointFirst = CSettingHelperPoint.CreateSettingPoints("Main.First", myclass1, false);
             
                // The follolwing will create two points named "Main.Second.ControledValue", "MyOverride.Value"
                // The second point uses the instance name override.
                List&lt;IPoint&gt; lstipointSecond = CSettingHelperPoint.CreateSettingPoints("Main.Second", myclass2, true);
             
                // The first point in the list is attached to property ControledValue
                Assert.AreEqual("Main.Second.ControledValue", lstipointFirst[0].PointName);
                // The property the point is attached to was attributed with MinValProperty = "MinValue".
                // The following line verifies that the point MinSettableValue is indeed equal to the
                // property MinValue
                Assert.AreEqual(-5, lstipointFirst[0].MinSettableValue);
                // The following code illustartes that changing the MinValue property has no effect on
                // the point MinSettableValue. This is because the property referenced by MinValProperty
                // in ASetting is used only when the point is created.
                myclass1.MinValue = 88;
                Assert.AreEqual(-5, lstipointFirst[0].MinSettableValue);
             
                // The first point in the list is attached to property ControledValue
                Assert.AreEqual(10.5, lstipointFirst[0].CurrentValue);
             
                // The following code shows that changing an attributed field changes what is retreived
                // using the CyrrentValue property of the associated point.
                // IMPORTANT: The value of the internal current value field is updated only at the time 
                // the CurrentValue property is read. This is important because the update of the internal
                // field correspond to when the fault and change event evaluation is performed. Practiacally
                // this means that changing the class property in such a way that the same change to the 
                // point current value would trigger an event will not result in any event in the associated
                // point until its current value is queried.
                myclass1.ControlledValue = 13.65;
                Assert.AreEqual(13.65, lstipointFirst[0].CurrentValue);
             
                // Changing the CurrentValue of the point changes the value of the associated property.
                lstipointFirst[0].CurrentValue = 22.45;
                Assert.AreEqual(22.45, myclass1.ControlledValue);
            }</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.SettingAttribute.APointAttribute.FixTypes(System.Type)">
      <summary>
            converts all the members of type object to a type that matches the type of the property
            </summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.Name">
      <summary>
        <para>The ShortName of the point that will be created. See</para>
        <para>If <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.InstanceNameOverride">InstanceNameOverride Property</see> is not specified method
            <see cref="O:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint.CreateSettingPoints">CreateSettingPoints</see> takes a string parameter strInstanceName which is prepended
            to this property with a separating '.' to create the created point name. CreatedPoint.Name = strInstanceName.Name</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.MinValProperty">
      <summary>If used this property will override any value specified in <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.MinVal">MinVal Property</see>. It contains a string designating the name of a property located in the
            same class as the attributed property. The value of this property <strong>at the time</strong><see cref="O:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint.CreateSettingPoints">CreateSettingPoints
            Method</see> will be used for the Minimum value of the created point.</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.MaxValProperty">
      <summary>If used this property will override any value specified in <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.MaxVal">MaxVal Property</see>. It contains a string designating the name of a property located in
            the same class as the attributed property. The value of this property <strong>at the time</strong><see cref="O:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint.CreateSettingPoints">CreateSettingPoints
            Method</see> will be used for the Maximum value of the created point.</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.IncValProperty">
      <summary>If used this property will override any value specified in <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.IncVal">IncVal Property</see>. It contains a string designating the name of a property located in the
            same class as the attributed property. The value of this property <strong>at the time</strong><see cref="O:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint.CreateSettingPoints">CreateSettingPoints
            Method</see> will be used for the Increment value of the created point.</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.PrecisionProperty">
      <summary>If used this property will override any value specified in <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.Precision">Precision Property</see>. It contains a string designating the name of a property located
            in the same class as the attributed property. The value of this property <strong>at the time</strong><see cref="O:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint.CreateSettingPoints">CreateSettingPoints
            Method</see> will be used for the Precision value of the created point.</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.MinVal">
      <summary>
        <para>If <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.MinValProperty">MinValProperty Property</see> is not specified then this property will be used for the Minimum Value of the point that
            will be created. See</para>
        <para>WARNING: The value of the point is the value of the attributed property or field attributed which may change independently of the point Current Value field.
            Therefore if the value of attributed property or field becomes greater than MinVal an exception will be thrown upon reading the point.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.MaxVal">
      <summary>
        <para>If <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.MaxValProperty">MaxValProperty Property</see> is not specified then this property will be used for the Maximum Value of the point that will be created. See
            <see cref="!:Point.CPoint&lt;TValue, TRaw&gt;.MaxSettableValue">CPoint&lt;Value, TRaw&gt;.MaxSettableValue Property</see></para>
        <para>WARNING: The value of the point is the value of the attributed property or field attributed which may change independently of the point Current Value field.
            Therefore if the value of attributed property or field becomes greater than MaxVal an exception will be thrown upon reading the point.</para>
        <para>Test RuleEngine Property link: <see cref="!:RuleEngine.CRule.BoolRule">BoolRule Property</see></para>
        <para>Test2 Generics method link: <see cref="!:RuleEngine.CRuleEngineHelper&lt;T&gt;.Modifier">Modifier Method</see></para>
        <para>Test2 Generics property link: <see cref="!:RuleEngine.CRuleEngine&lt;TData,TInput,TOutput&gt;.TdataRuleEngineData">TdataRuleEngineData Property</see></para>
        <para>Test3 Generics property link: <see cref="!:Point.CPointProxy&lt;TValue,TRaw&gt;.MaxSettableValue">MaxSettableValue Property</see></para>
        <para>Test4 Generics property link: <see cref="!:Point.CPoint&lt;TValue,TRaw&gt;.MaxSettableValue">MaxSettableValue Property</see></para>
        <para>Test4 property link: <see cref="!:Point.CPointProxyServer.RemoteName">RemoteName Property</see></para>
        <para>end</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.IncVal">
      <summary>If <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.IncValProperty">IncValProperty Property</see> is not specified then this property will be used for the Increment of the point that will be created. See</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.Precision">
      <summary>The Precision of the point that will be created. See</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.Units">
      <summary>The Units of the point that will be created. See</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.Description">
      <summary>The Description of the point that will be created. See</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.WriteAccess">
      <summary>The WriteAccess level of the point that will be created. See</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.ReadAccess">
      <summary>The ReadAccess level of the point that will be created. See</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.HasMin">
      <summary>Read only property indicating if a <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.MinVal">MinVal Property</see> or <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.MinValProperty">MinValProperty Property</see> has been specified.</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.HasMax">
      <summary>Read only property indicating if a <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.MaxVal">MaxVal Property</see> or <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.MaxValProperty">MaxValProperty Property</see> has been specified.</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.HasInc">
      <summary>Read only property indicating if a <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.IncVal">IncVal</see> or <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.IncValProperty">IncValProperty</see> has been specified.</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.DefaultWriteAccess">
      <summary>This is a static property containing the default value used for the created point WriteAccess if <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.WriteAccess">WriteAccess Property</see> is not specified.</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.DefaultReadAccess">
      <summary>This is a static property containing the default value used for the created point ReadAccess if <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.ReadAccess">ReadAccess Property</see> is not specified.</summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.GroupList">
      <summary>The list of groups the created point will belong to. It is pecified using <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.Groups_CSV">Groups_CSV Property</see></summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.Groups_CSV">
      <summary>A list of groups the created point will belong to. This is entered as a comma separated string. It can also be reprieved using <see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.GroupList">GroupList
            Property</see></summary>
    </member>
    <member name="P:Corning.GenSys.SettingAttribute.APointAttribute.InstanceNameOverride">
      <summary>
        <para>This property is used to override string parameter strInstanceName used in <see cref="O:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint.CreateSettingPoints">CreateSettingPoints
            Method</see>.</para>
        <para>This means that a point created with this method will have a name: InstanceNameOverride.<see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.Name">Name</see> instead of strInstanceName.<see cref="P:Corning.GenSys.SettingAttribute.APointAttribute.Name">Name</see>.</para>
        <para>WARNING: If this property is specified the point created from multiple instances will all have the same name which could cause issues when adding these
            point to a point server which expects all added points to have a unique name.<br />
            To avoid this issue only one call to <see cref="O:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint.CreateSettingPoints">CreateSettingPoints Method</see> should have
            parameter set to false and all the other one should set this parameter to true.</para>
      </summary>
    </member>
    <member name="T:Corning.GenSys.SettingAttribute.CPropertyOrField">
      <summary>
            Wrapper to hold PropertyInfo or FieldInfo
            </summary>
    </member>
    <member name="M:Corning.GenSys.SettingAttribute.CPropertyOrField.GetValueFromObjAndPropOrField(System.Object,System.String,System.Object)">
      <summary>
            Given the instance of an object and the name of a property or field, this method tries to get the value of the property
            or field of the object instance. If it is unsuccessful it will return objReturnedDefault
            </summary>
      <param name="objInstance">
      </param>
      <param name="strPropertyOrFieldName">
      </param>
      <param name="objReturnedDefault">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.SettingAttribute.CPropertyOrField.SetValueFromObjAndPropOrField(System.Object,System.String,System.Object)">
      <summary>
            Given the instance of an object and the name of a property or field, this method tries to set objValue to the property
            or field of the object instance. Returns true if successful or false otherwise
            </summary>
      <param name="objInstance">
      </param>
      <param name="strPropertyOrFieldName">
      </param>
      <param name="objValue">
      </param>
    </member>
    <member name="T:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint">
      <summary>OBSOLETE: use CPointCreatorHelper instead.  Helper class whose <see cref="O:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint.CreateSettingPoints">CreateSettingPoints Methods</see> are used to create points from
            classes that have been attributed using <see cref="T:Corning.GenSys.SettingAttribute.ASettingAttribute">ASettingAttributes</see>.</summary>
      <example>
        <code title="Point creation using attributes" description="" lang="CS">
            class CMyClass
            {
                public CMyClass(int dMinValue, int dMaxValue, double dControlledValue, float fValue)
                {
                    m_dMinValue = dMinValue;
                    m_dMaxValue = dMaxValue;
                    m_dControlledValue = dControlledValue;
                    m_fValue = fValue;
                }
             
                // Note that ASetting members with a name ending with "Property" can also be initialized with a
                // field name as illustrated with MaxValProperty
                [ASetting(Name = "ControledValue", Description = "My controlled Value", Units = "mm",
                            MinValProperty = "MinValue", MaxValProperty = "m_dMaxValue")]
                public double ControlledValue
                {
                    get { return m_dControlledValue; }
                    set { m_dControlledValue = value; }
                }
             
                public float Value
                {
                    get { return m_fValue; }
                    set { m_fValue = value; }
                }
             
                public double MaxValue
                {
                    get { return m_dMaxValue; }
                    set { m_dMaxValue = value; }
                }
             
                public double MinValue
                {
                    get { return m_dMinValue; }
                    set { m_dMinValue = (int)value; }
                }
             
                private double m_dMinValue;
                private double m_dMaxValue;
                private double m_dControlledValue;
             
                [ASetting(Name = "Value", Description = "My Value", Units = "%",
                            MinVal = 0, MaxVal = 100,
                            ReadAccess = EAccess.Operator | EAccess.Admin, WriteAccess = EAccess.Admin,
                            InstanceNameOverride = "MyOverride")]
                private float m_fValue;
            }
             
            public static void PointCreationExampleUsingASettingsAttributes()
            {
             
                // &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
                // Point creation using the ASetting attribute
                // &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
                CMyClass myclass1 = new CMyClass(-5, 500, 10.5, 56.78f);
                CMyClass myclass2 = new CMyClass(-60, 60, 30d, 87.89f);
             
                // The follolwing will create two points named "Main.First.ControledValue", "Main.First.Value"
                List&lt;IPoint&gt; lstipointFirst = CSettingHelperPoint.CreateSettingPoints("Main.First", myclass1, false);
             
                // The follolwing will create two points named "Main.Second.ControledValue", "MyOverride.Value"
                // The second point uses the instance name override.
                List&lt;IPoint&gt; lstipointSecond = CSettingHelperPoint.CreateSettingPoints("Main.Second", myclass2, true);
             
                // The first point in the list is attached to property ControledValue
                Assert.AreEqual("Main.Second.ControledValue", lstipointFirst[0].PointName);
                // The property the point is attached to was attributed with MinValProperty = "MinValue".
                // The following line verifies that the point MinSettableValue is indeed equal to the
                // property MinValue
                Assert.AreEqual(-5, lstipointFirst[0].MinSettableValue);
                // The following code illustartes that changing the MinValue property has no effect on
                // the point MinSettableValue. This is because the property referenced by MinValProperty
                // in ASetting is used only when the point is created.
                myclass1.MinValue = 88;
                Assert.AreEqual(-5, lstipointFirst[0].MinSettableValue);
             
                // The first point in the list is attached to property ControledValue
                Assert.AreEqual(10.5, lstipointFirst[0].CurrentValue);
             
                // The following code shows that changing an attributed field changes what is retreived
                // using the CyrrentValue property of the associated point.
                // IMPORTANT: The value of the internal current value field is updated only at the time 
                // the CurrentValue property is read. This is important because the update of the internal
                // field correspond to when the fault and change event evaluation is performed. Practiacally
                // this means that changing the class property in such a way that the same change to the 
                // point current value would trigger an event will not result in any event in the associated
                // point until its current value is queried.
                myclass1.ControlledValue = 13.65;
                Assert.AreEqual(13.65, lstipointFirst[0].CurrentValue);
             
                // Changing the CurrentValue of the point changes the value of the associated property.
                lstipointFirst[0].CurrentValue = 22.45;
                Assert.AreEqual(22.45, myclass1.ControlledValue);
            }</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint.CreateSettingPoints(System.String,System.Object,System.Boolean)">
      <summary>
        <para>Create a list of points from an instance of a class with at least one property or field attributed with the <see cref="T:Corning.GenSys.SettingAttribute.ASettingAttribute">ASettingAttribute
            Class</see>. One point is created for each attributed property or field. The name of the point is created by prefixing the
            property or field name with the content of parameter strInstanceName separated by the '.' character. For instance if strInstanceName = "Main.First" and the
            attributed property is named "MyProperty" the created point attached to this property will be named "Main.First.MyProperty".</para>
        <para>If parameter bIgnoreInstanceNameForPrefixedAttributes is true and the attributed property or field has the <see cref="!:SettingAttribute.ASettingAttribute.InstanceNameOverride">InstanceNameOverride
            </see> initialized then the strInstanceName parameter is ignored and the value of InstanceNameOverride is
            used instead.</para>
      </summary>
      <param name="strInstanceName">
      </param>
      <param name="objInstance">
      </param>
      <param name="bIgnoreInstanceNameForPrefixedAttributes">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint.CreateSettingPoints(System.String,System.Object,System.Collections.Generic.List{System.Exception}@)">
      <summary>
        <para>Create a list of points from an instance of a class with at least one property or field attributed with the <see cref="T:Corning.GenSys.SettingAttribute.ASettingAttribute">ASettingAttribute
            Class</see>. One point is created for each attributed property or field. The name of the point is created by prefixing the
            property or field name with the content of parameter strInstanceName separated by the '.' character. For instance if strInstanceName = "Main.First" and the
            attributed property is named "MyProperty" the created point attached to this property will be named "Main.First.MyProperty".</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint.CreateSettingPoints(System.String,System.Object,System.Boolean,System.Collections.Generic.List{System.Exception}@)">
      <summary>
        <para>Create a list of points from an instance of a class with at least one property or field attributed with the <see cref="T:Corning.GenSys.SettingAttribute.ASettingAttribute">ASettingAttribute
            Class</see>. One point is created for each attributed property or field. The name of the point is created by prefixing the
            property or field name with the content of parameter strInstanceName separated by the '.' character. For instance if strInstanceName = "Main.First" and the
            attributed property is named "MyProperty" the created point attached to this property will be named "Main.First.MyProperty".</para>
        <para>If parameter bIgnoreInstanceNameForPrefixedAttributes is true and the attributed property or field has the <see cref="!:SettingAttribute.ASettingAttribute.InstanceNameOverride">InstanceNameOverride
            </see> initialized then the strInstanceName parameter is ignored and the value of InstanceNameOverride is
            used instead.</para>
      </summary>
    </member>
    <member name="T:Corning.GenSys.SettingHelperPoint.CPointCreatorHelper`1">
      <summary>Helper class whose <see cref="O:Corning.GenSys.SettingHelperPoint.CSettingHelperPoint.CreateSettingPoints">CreateSettingPoints Methods</see> are used to create points from
            classes that have been attributed using <see cref="T:Corning.GenSys.SettingAttribute.ASettingAttribute">ASettingAttributes</see>.</summary>
      <example>
        <code title="Point creation using attributes" description="" lang="CS">
            class CMyClass
            {
                public CMyClass(int dMinValue, int dMaxValue, double dControlledValue, float fValue)
                {
                    m_dMinValue = dMinValue;
                    m_dMaxValue = dMaxValue;
                    m_dControlledValue = dControlledValue;
                    m_fValue = fValue;
                }
             
                // Note that ASetting members with a name ending with "Property" can also be initialized with a
                // field name as illustrated with MaxValProperty
                [ASetting(Name = "ControledValue", Description = "My controlled Value", Units = "mm",
                            MinValProperty = "MinValue", MaxValProperty = "m_dMaxValue")]
                public double ControlledValue
                {
                    get { return m_dControlledValue; }
                    set { m_dControlledValue = value; }
                }
             
                public float Value
                {
                    get { return m_fValue; }
                    set { m_fValue = value; }
                }
             
                public double MaxValue
                {
                    get { return m_dMaxValue; }
                    set { m_dMaxValue = value; }
                }
             
                public double MinValue
                {
                    get { return m_dMinValue; }
                    set { m_dMinValue = (int)value; }
                }
             
                private double m_dMinValue;
                private double m_dMaxValue;
                private double m_dControlledValue;
             
                [ASetting(Name = "Value", Description = "My Value", Units = "%",
                            MinVal = 0, MaxVal = 100,
                            ReadAccess = EAccess.Operator | EAccess.Admin, WriteAccess = EAccess.Admin,
                            InstanceNameOverride = "MyOverride")]
                private float m_fValue;
            }
             
            public static void PointCreationExampleUsingASettingsAttributes()
            {
             
                // &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
                // Point creation using the ASetting attribute
                // &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
                CMyClass myclass1 = new CMyClass(-5, 500, 10.5, 56.78f);
                CMyClass myclass2 = new CMyClass(-60, 60, 30d, 87.89f);
             
                // The follolwing will create two points named "Main.First.ControledValue", "Main.First.Value"
                List&lt;IPoint&gt; lstipointFirst = CSettingHelperPoint.CreateSettingPoints("Main.First", myclass1, false);
             
                // The follolwing will create two points named "Main.Second.ControledValue", "MyOverride.Value"
                // The second point uses the instance name override.
                List&lt;IPoint&gt; lstipointSecond = CSettingHelperPoint.CreateSettingPoints("Main.Second", myclass2, true);
             
                // The first point in the list is attached to property ControledValue
                Assert.AreEqual("Main.Second.ControledValue", lstipointFirst[0].PointName);
                // The property the point is attached to was attributed with MinValProperty = "MinValue".
                // The following line verifies that the point MinSettableValue is indeed equal to the
                // property MinValue
                Assert.AreEqual(-5, lstipointFirst[0].MinSettableValue);
                // The following code illustartes that changing the MinValue property has no effect on
                // the point MinSettableValue. This is because the property referenced by MinValProperty
                // in ASetting is used only when the point is created.
                myclass1.MinValue = 88;
                Assert.AreEqual(-5, lstipointFirst[0].MinSettableValue);
             
                // The first point in the list is attached to property ControledValue
                Assert.AreEqual(10.5, lstipointFirst[0].CurrentValue);
             
                // The following code shows that changing an attributed field changes what is retreived
                // using the CyrrentValue property of the associated point.
                // IMPORTANT: The value of the internal current value field is updated only at the time 
                // the CurrentValue property is read. This is important because the update of the internal
                // field correspond to when the fault and change event evaluation is performed. Practiacally
                // this means that changing the class property in such a way that the same change to the 
                // point current value would trigger an event will not result in any event in the associated
                // point until its current value is queried.
                myclass1.ControlledValue = 13.65;
                Assert.AreEqual(13.65, lstipointFirst[0].CurrentValue);
             
                // Changing the CurrentValue of the point changes the value of the associated property.
                lstipointFirst[0].CurrentValue = 22.45;
                Assert.AreEqual(22.45, myclass1.ControlledValue);
            }</code>
      </example>
    </member>
    <member name="M:Corning.GenSys.SettingHelperPoint.CPointCreatorHelper`1.CreatePointsFromAttributes(System.String,System.Object,System.Boolean)">
      <summary>
        <para>Create a list of points from an instance of a class with at least one property or field attributed with the <see cref="T:Corning.GenSys.SettingAttribute.ASettingAttribute">ASettingAttribute
            Class</see>. One point is created for each attributed property or field. The name of the point is created by prefixing the
            property or field name with the content of parameter strInstanceName separated by the '.' character. For instance if strInstanceName = "Main.First" and the
            attributed property is named "MyProperty" the created point attached to this property will be named "Main.First.MyProperty".</para>
        <para>If parameter bIgnoreInstanceNameForPrefixedAttributes is true and the attributed property or field has the <see cref="!:SettingAttribute.ASettingAttribute.InstanceNameOverride">InstanceNameOverride
            </see> initialized then the strInstanceName parameter is ignored and the value of InstanceNameOverride is
            used instead.</para>
      </summary>
      <param name="strInstanceName">
      </param>
      <param name="objInstance">
      </param>
      <param name="bIgnoreInstanceNameForPrefixedAttributes">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Corning.GenSys.SettingHelperPoint.CPointCreatorHelper`1.CreatePointsFromAttributes(System.String,System.Object,System.Collections.Generic.List{System.Exception}@)">
      <summary>
        <para>Create a list of points from an instance of a class with at least one property or field attributed with the <see cref="T:Corning.GenSys.SettingAttribute.ASettingAttribute">ASettingAttribute
            Class</see>. One point is created for each attributed property or field. The name of the point is created by prefixing the
            property or field name with the content of parameter strInstanceName separated by the '.' character. For instance if strInstanceName = "Main.First" and the
            attributed property is named "MyProperty" the created point attached to this property will be named "Main.First.MyProperty".</para>
      </summary>
    </member>
    <member name="M:Corning.GenSys.SettingHelperPoint.CPointCreatorHelper`1.CreatePointsFromAttributes(System.String,System.Object,System.Boolean,System.Collections.Generic.List{System.Exception}@)">
      <summary>
        <para>Create a list of points from an instance of a class with at least one property or field attributed with the <see cref="T:Corning.GenSys.SettingAttribute.ASettingAttribute">ASettingAttribute
            Class</see>. One point is created for each attributed property or field. The name of the point is created by prefixing the
            property or field name with the content of parameter strInstanceName separated by the '.' character. For instance if strInstanceName = "Main.First" and the
            attributed property is named "MyProperty" the created point attached to this property will be named "Main.First.MyProperty".</para>
        <para>If parameter bIgnoreInstanceNameForPrefixedAttributes is true and the attributed property or field has the <see cref="!:SettingAttribute.ASettingAttribute.InstanceNameOverride">InstanceNameOverride
            </see> initialized then the strInstanceName parameter is ignored and the value of InstanceNameOverride is
            used instead.</para>
      </summary>
    </member>
    <member name="F:Corning.GenSys.FileArchiver.CFileArchiver.m_oLogger">
      <summary>
            The logger instance
            </summary>
    </member>
    <member name="M:Corning.GenSys.FileArchiver.CFileArchiver.SetLogger(Corning.GenSys.Logger.ILogger)">
      <summary>
            Sets the logger.
            </summary>
      <param name="iLogger">The logger instance.</param>
    </member>
    <member name="T:Corning.GenSys.Threading.CThreadHandler">
      <summary>
            Class to manage a thread requiring no parameters for either the thread method or stop method. 
            </summary>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler.#ctor(System.String,System.Func{System.Boolean},System.Threading.ThreadPriority,System.Int32,Corning.GenSys.Threading.ThreadDelay)">
      <summary>
            CThreadHandler Constructor.
            </summary>
      <param name="strThreadName">The user-defined name of the thread which is used during logging.</param>
      <param name="oFunc"> The Method, returning bool, to call with each pass of the "While" loop. The method returns "false" when it desired to self-terminate</param>
      <param name="oThreadPriority"> The thread priority for the created thread.</param>
      <param name="nDelayInterval"> The time period, in mSec, either periodic OR time to wait after the method returns, before calling it again.</param>
      <param name="eThreadDelayType"> Specifies if thread is run periodically or if the delay is from the end of the Action execution.</param>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler.#ctor(System.String,System.Func{System.Boolean},System.Int32,System.Threading.ThreadPriority,Corning.GenSys.Threading.ThreadDelay)">
      <summary>
            CThreadHandler Constructor.
            </summary>
      <param name="strThreadName">The user-defined name of the thread which is used during logging.</param>
      <param name="oFunc"> The Method, returning bool, to call with each pass of the "While" loop. The method returns "false" when it desired to self-terminate</param>
      <param name="nDelayInterval"> The time period, in mSec, either periodic OR time to wait after the method returns, before calling it again.</param>
      <param name="oThreadPriority"> The thread priority for the created thread.</param>
      <param name="eThreadDelayType"> Specifies if thread is run periodically or if the delay is from the end of the Action execution.</param>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler.Pause">
      <summary>
            Permits the Action currently being executed to finish then doesn't call the Action again until Pause is released with the Start() command.
            </summary>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler.Stop(System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler.Stop(System.Action,System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler.StopThreadAndWaitUntilStopped(System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler.WaitForThreadToStop(System.Object)">
      <summary>
            Waits for the main thread to stop. A timeout is specified to determine how long to wait before.
            </summary>
      <param name="nWaitTimeIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns True if the thread stopped withing the specified time period, otherwise false</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler.SetThreadStopCallbackAction(System.Action)">
      <summary>
            Sets the method which is invoked when the thread stops.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler.SetThreadPriority(System.Threading.ThreadPriority)">
      <summary>
            Sets the Thread Priority to a new value.
            </summary>
      <param name="oThreadPriority">The new Thread Priority.</param>
      <returns>Returns void</returns>
    </member>
    <member name="P:Corning.GenSys.Threading.CThreadHandler.ThreadTerminationRequested">
      <summary>
            If True, the thread has been requested to terminate. Note: The thread should check this flag and try to exit quickly, if true, otherwise it will be killed.
            </summary>
    </member>
    <member name="P:Corning.GenSys.Threading.CThreadHandler.DelayInterval">
      <summary>
            Sets/Gets the amount of time to wait after a Action completes, while in the "Running" state, before calling the Action again.
            </summary>
    </member>
    <member name="P:Corning.GenSys.Threading.CThreadHandler.ThreadState">
      <summary>
            This routine returns the Thread state.
            </summary>
      <returns>Returns the Thread state.</returns>
    </member>
    <member name="T:Corning.GenSys.Threading.CThreadHandler`1">
      <summary>
            Class to manage a thread. TParam is passed to the Method each time it is called.
            TParam is passed to the Thread Stop method and is optional. 
            </summary>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`1.#ctor(System.String,System.Func{System.Boolean},System.Threading.ThreadPriority,System.Int32,Corning.GenSys.Threading.ThreadDelay)">
      <summary>
            CThreadHandler Constructor.
            </summary>
      <param name="strThreadName">The user-defined name of the thread which is used during logging.</param>
      <param name="oFunc"> The Method, returning bool, to call with each pass of the "While" loop. The method returns "false" when it desired to self-terminate</param>
      <param name="oThreadPriority"> The thread priority for the created thread.</param>
      <param name="nDelayInterval"> The time period, in mSec, either periodic OR time to wait after the method returns, before calling it again.</param>
      <param name="eThreadDelayType"> Specifies if thread is run periodically or if the delay is from the end of the Action execution.</param>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`1.#ctor(System.String,System.Func{System.Boolean},System.Int32,System.Threading.ThreadPriority,Corning.GenSys.Threading.ThreadDelay)">
      <summary>
            CThreadHandler Constructor.
            </summary>
      <param name="strThreadName">The user-defined name of the thread which is used during logging.</param>
      <param name="oFunc"> The Method, returning bool, to call with each pass of the "While" loop. The method returns "false" when it desired to self-terminate</param>
      <param name="nDelayInterval"> The time period, in mSec, either periodic OR time to wait after the method returns, before calling it again.</param>
      <param name="oThreadPriority"> The thread priority for the created thread.</param>
      <param name="eThreadDelayType"> Specifies if thread is run periodically or if the delay is from the end of the Action execution.</param>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`1.#ctor(System.String,System.Func{`0,System.Boolean},`0,System.Int32,System.Threading.ThreadPriority,Corning.GenSys.Threading.ThreadDelay)">
      <summary>
            CThreadHandler Constructor.
            </summary>
      <param name="strThreadName">The user-defined name of the thread which is used during logging.</param>
      <param name="oFuncWithParameter"> The Method, returning bool, to call with each pass of the "While" loop. The method returns "false" when it desired to self-terminate</param>
      <param name="oParameter"> The parameter (TParam) to pass to the method each time it is called.</param>
      <param name="nDelayInterval"> The time period, in mSec, either periodic OR time to wait after the method returns, before calling it again.</param>
      <param name="oThreadPriority"> The thread priority for the created thread.</param>
      <param name="eThreadDelayType"> Specifies if thread is run periodically or if the delay is from the end of the Action execution.</param>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`1.#ctor(System.String,System.Func{`0,System.Boolean},`0,System.Threading.ThreadPriority,System.Int32,Corning.GenSys.Threading.ThreadDelay)">
      <summary>
            CThreadHandler Constructor.
            </summary>
      <param name="strThreadName">The user-defined name of the thread which is used during logging.</param>
      <param name="oFuncWithParameter"> The Method, returning bool, to call with each pass of the "While" loop. The method returns "false" when it desired to self-terminate</param>
      <param name="oParameter"> The parameter (TParam) to pass to the method each time it is called.</param>
      <param name="oThreadPriority"> The thread priority for the created thread.</param>
      <param name="nDelayInterval"> The time period, in mSec, either periodic OR time to wait after the method returns, before calling it again.</param>
      <param name="eThreadDelayType"> Specifies if thread is run periodically or if the delay is from the end of the Action execution.</param>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`1.Start">
      <summary>
            Either creates and starts a new main thread or if the main thread is already running, queues Thread-Start command for when the main thread terminates.
            </summary>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`1.Pause">
      <summary>
            Permits the Action currently being executed to finish then doesn't call the Action again until Pause is released with the Start() command.
            </summary>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`1.Stop(System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`1.Stop(System.Action,System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`1.Stop(System.Action{`0},`0,System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <param name="oActionObject"> The parameter to pass with the called Action when the thread stops.</param>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`1.StopThreadAndWaitUntilStopped(System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`1.WaitForThreadToStop(System.Object)">
      <summary>
            Waits for the main thread to stop. A timeout is specified to determine how long to wait before.
            </summary>
      <param name="nWaitTimeIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns True if the thread stopped withing the specified time period, otherwise false</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`1.SetThreadStopCallbackAction(System.Action)">
      <summary>
            Sets the method which is invoked when the thread stops.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`1.SetThreadStopCallbackAction(System.Action{`0},`0)">
      <summary>
            Sets the method and its passed parameter which is invoked when the thread stops.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <param name="oActionObject"> The parameter to pass with the called Action when the thread stops.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`1.SetThreadPriority(System.Threading.ThreadPriority)">
      <summary>
            Sets the Thread Priority to a new value.
            </summary>
      <param name="oThreadPriority">The new Thread Priority.</param>
      <returns>Returns void</returns>
    </member>
    <member name="P:Corning.GenSys.Threading.CThreadHandler`1.ThreadTerminationRequested">
      <summary>
            If True, the thread has been requested to terminate. Note: The thread should check this flag and try to exit quickly, if true, otherwise it will be killed.
            </summary>
    </member>
    <member name="P:Corning.GenSys.Threading.CThreadHandler`1.DelayInterval">
      <summary>
            Sets/Gets the amount of time to wait after a Action completes, while in the "Running" state, before calling the Action again.
            </summary>
    </member>
    <member name="P:Corning.GenSys.Threading.CThreadHandler`1.ThreadState">
      <summary>
            This routine returns the Thread state.
            </summary>
      <returns>Returns the Thread state.</returns>
    </member>
    <member name="T:Corning.GenSys.Threading.CThreadHandler`2">
      <summary>
            Class to manage a thread. TParam is passed to the Method each time it is called.
            TParamStop is passed to the Thread Stop method. 
            </summary>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.#ctor(System.String,System.Func{System.Boolean},System.Threading.ThreadPriority,System.Int32,Corning.GenSys.Threading.ThreadDelay)">
      <summary>
            CThreadHandler Constructor.
            </summary>
      <param name="strThreadName">The user-defined name of the thread which is used during logging.</param>
      <param name="oFunc"> The Method, returning bool, to call with each pass of the "While" loop. The method returns "true" when it desired to self-terminate</param>
      <param name="eThreadPriority"> The thread priority for the created thread.</param>
      <param name="nDelayInterval"> The time period, in mSec, either periodic OR time to wait after the method returns, before calling it again.</param>
      <param name="eThreadDelayType"> Specifies if thread is run periodically or if the delay is from the end of the Action execution.</param>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.#ctor(System.String,System.Func{System.Boolean},System.Int32,System.Threading.ThreadPriority,Corning.GenSys.Threading.ThreadDelay)">
      <summary>
            CThreadHandler Constructor.
            </summary>
      <param name="strThreadName">The user-defined name of the thread which is used during logging.</param>
      <param name="oFunc"> The Method, returning bool, to call with each pass of the "While" loop. The method returns "true" when it desired to self-terminate</param>
      <param name="nDelayInterval"> The time period, in mSec, either periodic OR time to wait after the method returns, before calling it again.</param>
      <param name="eThreadPriority"> The thread priority for the created thread.</param>
      <param name="eThreadDelayType"> Specifies if thread is run periodically or if the delay is from the end of the Action execution.</param> /// 
        </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.#ctor(System.String,System.Func{`0,System.Boolean},`0,System.Int32,System.Threading.ThreadPriority,Corning.GenSys.Threading.ThreadDelay)">
      <summary>
            CThreadHandler Constructor.
            </summary>
      <param name="strThreadName">The user-defined name of the thread which is used during logging.</param>
      <param name="oFuncWithParameter"> The Method, returning bool, to call with each pass of the "While" loop. The method returns "true" when it desired to self-terminate</param>
      <param name="oParameter"> The parameter (TParam) to pass to the method each time it is called.</param>
      <param name="nDelayInterval"> The time period, in mSec, either periodic OR time to wait after the method returns, before calling it again.</param>
      <param name="eThreadPriority"> The thread priority for the created thread.</param>
      <param name="eThreadDelayType"> Specifies if thread is run periodically or if the delay is from the end of the Action execution.</param>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.#ctor(System.String,System.Func{`0,System.Boolean},`0,System.Threading.ThreadPriority,System.Int32,Corning.GenSys.Threading.ThreadDelay)">
      <summary>
            CThreadHandler Constructor.
            </summary>
      <param name="strThreadName">The user-defined name of the thread which is used during logging.</param>
      <param name="oFuncWithParameter"> The Method, returning bool, to call with each pass of the "While" loop. The method returns "true" when it desired to self-terminate</param>
      <param name="oParameter"> The parameter (TParam) to pass to the method each time it is called.</param>
      <param name="eThreadPriority"> The thread priority for the created thread.</param>
      <param name="nDelayInterval"> The time period, in mSec, either periodic OR time to wait after the method returns, before calling it again.</param>
      <param name="eThreadDelayType"> Specifies if thread is run periodically or if the delay is from the end of the Action execution.</param>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.Start">
      <summary>
            Either creates and starts a new main thread or if the main thread is already running, queues Thread-Start command for when the main thread terminates.
            </summary>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.Pause">
      <summary>
            Permits the Action currently being executed to finish then doesn't call the Action again until Pause is released with the Start() command.
            </summary>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.SetThreadStopCallbackAction(System.Action)">
      <summary>
            Sets the method which is invoked when the thread stops.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.SetThreadStopCallbackAction(System.Action{`1},`1)">
      <summary>
            Sets the method and its passed parameter which is invoked when the thread stops.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <param name="oActionObject"> The parameter to pass with the called Action when the thread stops.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.StopThreadAndWaitUntilStopped(System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.Stop(System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.Stop(System.Action,System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.Stop(System.Action{`1},`1,System.Int32)">
      <summary>
            Initiates the process to stop the main thread.
            </summary>
      <param name="oAction">The Action to call when the thread stops.</param>
      <param name="oActionObject"> The parameter to pass with the called Action when the thread stops.</param>
      <param name="nTimeoutIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.WaitForThreadToStop(System.Object)">
      <summary>
            Waits for the main thread to stop. A timeout is specified to determine how long to wait before.
            </summary>
      <param name="nWaitTimeIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns True if the thread stopped withing the specified time period, otherwise false</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.StopTheThread(System.Int32)">
      <summary>
            Either initiates the process to stop the main thread or removes a queued Thread-Start command.
            </summary>
      <param name="nWaitTimeIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.StopDetectionThread(System.Object)">
      <summary>
            A thread which waits for the main thread to stop. A timeout is specified to determine how long to wait before forcefully killing it.
            </summary>
      <param name="nWaitTimeIn_mSec">The number of milliseconds to wait before forcefully killing the thread if it doesn't stop.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.ThreadStopped">
      <summary>
            This routine is called when the main thread terminates. It calls the Thread Stop callback routines, if present, and restarts the thread if a Thread-Start is queued.
            </summary>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.ThreadLoop">
      <summary>
            This the main thread which continues to execute as long as m_bThreadTerminationRequested == false. If not in the "Paused state, either a Func or Func with parameter is called".
            The called routine returns "true" when it wants to self-terminate. A delay interval may have been specified. These delays are broken up into periods no greater than 1 second so Stop commands can be responsive.
            </summary>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.Kill">
      <summary>
            This routine forcefully kills the thread.
            </summary>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.SetThreadPriority(System.Threading.ThreadPriority)">
      <summary>
            Sets the Thread Priority to a new value.
            </summary>
      <param name="oThreadPriority">The new Thread Priority.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.Threading.CThreadHandler`2.LogMethodAndThreadNameMessage(Corning.GenSys.Logger.ELogLevel,System.String)">
      <summary>
            Perform logging of message which only needs to report the Method Name and Thread Name.
            </summary>
      <param name="eLogLevel">The LogLevel to report</param>
      <param name="strMessage">The "String.Format" format string with two parameters to fill in. {0} is the Method Name. {1} Is the Thread Name.</param>
      <returns>Returns void</returns>
    </member>
    <member name="P:Corning.GenSys.Threading.CThreadHandler`2.DelayInterval">
      <summary>
            Sets/Gets the amount of time to wait after a Action completes, while in the "Running" state, before calling the Action again.
            </summary>
    </member>
    <member name="P:Corning.GenSys.Threading.CThreadHandler`2.ThreadTerminationRequested">
      <summary>
            If True, the thread has been requested to terminate. Note: The thread should check this flag and try to exit quickly, if true, otherwise it will be killed.
            </summary>
    </member>
    <member name="P:Corning.GenSys.Threading.CThreadHandler`2.ThreadState">
      <summary>
            This routine returns the Thread state.
            </summary>
      <returns>Returns the Thread state.</returns>
    </member>
    <member name="T:Corning.GenSys.TimeDurationMeasurement.CTimeDurationMeasurement">
      <summary>
            Class to measure and optionally log time durations in either mSec or ticks.
            </summary>
    </member>
    <member name="M:Corning.GenSys.TimeDurationMeasurement.CTimeDurationMeasurement.#ctor(System.String,Corning.GenSys.TimeDurationMeasurement.EStartTimeMeasurement,Corning.GenSys.TimeDurationMeasurement.ETimeMeasureType,Corning.GenSys.TimeDurationMeasurement.ELogTimeOperation,Corning.GenSys.Logger.ILogger)">
      <summary>
            Time duration measurement with logging.
            </summary>
      <param name="strStopWatchName">If defined, this name is included in all log messages to provide clarity when multiple time duration measurements are being made.</param>
      <param name="eStartMeasurement"> If set to "StartMeasurement" then the timer is started immediately. Otherwise it can be started later using the StartTimeMeasurement method. Default is "StartMeasurement".</param>
      <param name="eTimeMeasurementType">If set to "UseTicks", then the duration is measured in ticks, otherwise in mSec. If set to "UseTimeSpan" then the log entry will contain Days, Hours, Minutes, Seconds, and Fractional Seconds. Default is "UseMsec". </param>
      <param name="eLogTimeOperation">If eStartMeasurement is set to StartMeasurement and this is set to "LogTimeOperation", the logger will contain the entry: "Starting Time Measurement for " strStopWatchName. Default is "DontLogTimeOperation".</param>
      <param name="iLogger">Permits a class's ILogger to be passed in rather than using the predefined one. Default is "null" which causes the predefined logger to be used.</param>
    </member>
    <member name="M:Corning.GenSys.TimeDurationMeasurement.CTimeDurationMeasurement.#ctor(System.String,Corning.GenSys.TimeDurationMeasurement.ETimeMeasureType,Corning.GenSys.TimeDurationMeasurement.ELogTimeOperation,Corning.GenSys.TimeDurationMeasurement.EStartTimeMeasurement,Corning.GenSys.Logger.ILogger)">
      <summary>
            DEPRECATED: For backwards compatability. Time duration measurement with logging.
            </summary>
      <param name="strStopWatchName">If defined, this name is included in all log messages to provide clarity when multiple time duration measurements are being made.</param>
      <param name="eTimeMeasurementType">If set to "UseTicks", then the duration is measured in ticks, otherwise in mSec. If set to "UseTimeSpan" then the log entry will contain Days, Hours, Minutes, Seconds, and Fractional Seconds. Default is "UseMsec". </param>
      <param name="eLogTimeOperation">If eStartMeasurement is set to StartMeasurement and this is set to "LogTimeOperation", the logger will contain the entry: "Starting Time Measurement for " strStopWatchName. Default is "DontLogTimeOperation".</param>
      <param name="eStartMeasurement"> If set to "StartMeasurement" then the timer is started immediately. Otherwise it can be started later using the StartTimeMeasurement method. Default is "StartMeasurement".</param>
      <param name="iLogger">Permits a class's ILogger to be passed in rather than using the predefined one. Default is "null" which causes the predefined logger to be used.</param>
    </member>
    <member name="M:Corning.GenSys.TimeDurationMeasurement.CTimeDurationMeasurement.StartTimeMeasurement(Corning.GenSys.TimeDurationMeasurement.ELogTimeOperation,System.String)">
      <summary>
            Starts the Time Measurement.
            </summary>
      <param name="eLogTimeOperation">If set to "LogTimeOperation", the logger will contain the entry: "Starting Time Measurement for " strStopWatchName. Default is "DontLogTimeOperation".</param>
      <param name="strCustomStartMessage"> If not an empty string, this is used as the logged message. If it contains a {0}, then the Stopwatch name is substituted.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.TimeDurationMeasurement.CTimeDurationMeasurement.StopTimeMeasurement(Corning.GenSys.TimeDurationMeasurement.ELogTimeOperation,System.String)">
      <summary>
            Stop the Time Duration Measurement and returns the elasped time in mSec or Ticks.
            </summary>
      <param name="eLogTimeOperation">If set to "LogTimeOperation", the logger will contain the entry: "Stopping Time Measurement for " strStopWatchName. Default is "DontLogTimeOperation".</param>
      <param name="strCustomStopMessage"> If not an empty string, this is used as the logged message. If it contains a {0} then the elapsed time is substituted.</param>
      <returns>Returns the elasped time in mSec or Ticks</returns>
    </member>
    <member name="M:Corning.GenSys.TimeDurationMeasurement.CTimeDurationMeasurement.GetCurrentTimeMeasurement(Corning.GenSys.TimeDurationMeasurement.ELogTimeOperation,System.String)">
      <summary>
            Gets the current elased time interval and optionally logs it.
            </summary>
      <param name="eLogTimeOperation">If set to "LogTimeOperation", the logger will contain the entry: "Starting Time Measurement for " strStopWatchName. Default is "DontLogTimeOperation".</param>
      <param name="strCustomMessage"> If not an empty string, this is used as the logged message. If it contains a {0} then the elapsed time is substituted.</param>
      <returns>Returns the elasped time in mSec or Ticks</returns>
    </member>
    <member name="M:Corning.GenSys.TimeDurationMeasurement.CTimeDurationMeasurement.ResumeTimeMeasurement(Corning.GenSys.TimeDurationMeasurement.ELogTimeOperation,System.String)">
      <summary>
            Resumes the Time Duration Measurement. Previous elapsed time is not lost.
            </summary>
      <param name="eLogTimeOperation">If set to "LogTimeOperation", the logger will contain the entry: "Resuming Time Measurement for " strStopWatchName. Default is "DontLogTimeOperation".</param>
      <param name="strCustomMessage"> If not an empty string, this is used as the logged message. If it contains a {0} then the stopwatch name is substituted.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.TimeDurationMeasurement.CTimeDurationMeasurement.RestartTimeMeasurement(Corning.GenSys.TimeDurationMeasurement.ELogTimeOperation,System.String)">
      <summary>
            Restarts the Time Duration Measurement. Previous elapsed time is not lost.
            </summary>
      <param name="eLogTimeOperation">If set to "LogTimeOperation", the logger will contain the entry: "Restarting Time Measurement for " strStopWatchName. Default is "DontLogTimeOperation".</param>
      <param name="strCustomMessage"> If not an empty string, this is used as the logged message. If it contains a {0} then the stopwatch name is substituted.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.TimeDurationMeasurement.CTimeDurationMeasurement.ResetTimeMeasurement(Corning.GenSys.TimeDurationMeasurement.ELogTimeOperation,System.String)">
      <summary>
            Resets the Time Duration Measurement. Previous elapsed time is lost.
            </summary>
      <param name="eLogTimeOperation">If set to "LogTimeOperation", the logger will contain the entry: "Resetting Time Measurement for " strStopWatchName. Default is "DontLogTimeOperation".</param>
      <param name="strCustomMessage"> If not an empty string, this is used as the logged message. If it contains a {0} then the stopwatch name is substituted.</param>
      <returns>Returns void</returns>
    </member>
    <member name="M:Corning.GenSys.TimeDurationMeasurement.CTimeDurationMeasurement.GetTimeInterval(System.String,Corning.GenSys.TimeDurationMeasurement.ELogTimeOperation)">
      <summary>
            Returns and optionally logs the Time Duration.
            </summary>
      <param name="strLogMessagePrefix">The message to be included with the logged Time Interval.".</param>
      <param name="eLogTimeOperation">If set to "LogTimeOperation", the logger will contain an Time Duration entry which includes strStopWatchName. Default is "DontLogTimeOperation".</param>
      <returns>Returns the elasped time in mSec or Ticks</returns>
    </member>
    <member name="M:Corning.GenSys.TimeDurationMeasurement.CTimeDurationMeasurement.GetTimeInterval(Corning.GenSys.TimeDurationMeasurement.ELogTimeOperation)">
      <summary>
            DEPRECATED: Returns and optionally logs the Time Duration.
            </summary>
      <param name="eLogTimeOperation">If set to "LogTimeOperation", the logger will contain an Time Duration entry which includes strStopWatchName. Default is "DontLogTimeOperation".</param>
      <returns>Returns the elasped time in mSec or Ticks</returns>
    </member>
    <member name="P:Corning.GenSys.TimeDurationMeasurement.CTimeDurationMeasurement.LogLevel">
      <summary>
            Set the Log Level for Logging.
            </summary>
    </member>
    <member name="M:Corning.GenSys.RuleEngine.CRuleEngine`3.MakeRuleSource(System.Collections.Generic.IEnumerable{System.Tuple{System.Func{System.String,System.Object,System.String},System.Object}},System.Collections.Generic.IEnumerable{System.Tuple{System.Func{System.String,System.Object,System.String},System.Object}},Corning.GenSys.RuleEngine.IRule)">
      <summary>
      </summary>
      <param name="ienumfuncstrstrBoolRuleModifierWithParam">
      </param>
      <param name="ienumfuncstrstrActionIfTrueModifierWithParam">
      </param>
      <param name="iRule">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Corning.GenSys.EthernetIp.CEtIpAssembly">
      <summary>
        <para>Represents an EtherNet/IP assembly. It contains multiple instances of <see cref="T:Corning.GenSys.EthernetIp.CEtIpTag">CEtIpTag Class</see>.</para>
        <para>It implements the <see cref="T:Corning.GenSys.EthernetIp.IEtIpAssembly">IEtIpAssembly Interface</see>.</para>
      </summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpAssembly.Id">
      <summary>
            Id of the assembly
            </summary>
    </member>
    <member name="T:Corning.GenSys.EthernetIp.CEtIpServerDevice">
      <summary>
            	This is a class implementing an EtherNet/IP Server Device. It is based on the <see cref="!:http://www.pyramidsolutions.com/nc/NetStaX/NetStaX_EADK_DataSheet.pdf">PyramidSolutions EtherNet/IP Adapter Developers Kit v4.3.0</see></summary>
    </member>
    <member name="P:Corning.GenSys.EthernetIp.CEtIpServerDevice.Name">
      <summary>
            Name
            </summary>
    </member>
    <member name="E:Corning.GenSys.EthernetIp.CEtIpServerDevice.OnTagChanged">
      <summary>
            Sender, Changed tag, Value of changed tag
            </summary>
    </member>
    <member name="T:Corning.GenSys.EthernetIp.CEtIpTag">
      <summary>
        <para>Corresponds to an EtherNet/IP tag. It contains extra information which is not required by the Ethernet Ip protocol.</para>
        <para>It implements the <see cref="T:Corning.GenSys.EthernetIp.IEtIpTag">IEtIpTag Interface</see></para>
      </summary>
    </member>
    <member name="T:Corning.GenSys.EthernetIp.CPlcType">
      <summary>
            Represents the types supported by a PLC
            </summary>
    </member>
    <member name="T:Corning.GenSys.EthernetIpHelperPoint.CEthernetIpHelperPoint">
      <summary>Helper class used to extract points from an instance of <see cref="T:Corning.GenSys.EthernetIp.CEtIpServerDevice">CEtIpServerDevice Class</see>.</summary>
    </member>
  </members>
</doc>